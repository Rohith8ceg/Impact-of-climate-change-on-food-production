/*! For license information please see bundle.7b72a8ef7957864ba1ea.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={921:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,"#gmv91QcQMip_xjV_gDj7 {\r\n    font-family: 'Lato';\r\n    text-align: center;\r\n    padding: 30px;\r\n    font-size: 28px;\r\n    letter-spacing: -0.01em;\r\n    color: #333;\r\n  }\r\n\r\n#M0YnSc4FTDg_oKyHCGqP {\r\n  font-family: 'Lato';\r\n  text-align: center;\r\n}","",{version:3,sources:["webpack://./public/src/components/App.css"],names:[],mappings:"AAAA;IACI,mBAAmB;IACnB,kBAAkB;IAClB,aAAa;IACb,eAAe;IACf,uBAAuB;IACvB,WAAW;EACb;;AAEF;EACE,mBAAmB;EACnB,kBAAkB;AACpB",sourcesContent:["#title {\r\n    font-family: 'Lato';\r\n    text-align: center;\r\n    padding: 30px;\r\n    font-size: 28px;\r\n    letter-spacing: -0.01em;\r\n    color: #333;\r\n  }\r\n\r\n#header {\r\n  font-family: 'Lato';\r\n  text-align: center;\r\n}"],sourceRoot:""}]),a.locals={title:"gmv91QcQMip_xjV_gDj7",header:"M0YnSc4FTDg_oKyHCGqP"};const s=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&a[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([o]).join("\n")}return[t].join("\n")}},679:(e,t,n)=>{var r=n(296),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?a:s[e.$$typeof]||i}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=a;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,h=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(p){var i=h(n);i&&i!==p&&e(t,i,r)}var a=c(n);d&&(a=a.concat(d(n)));for(var s=l(t),g=l(n),m=0;m<a.length;++m){var b=a[m];if(!(o[b]||r&&r[b]||g&&g[b]||s&&s[b])){var v=f(n,b);try{u(t,b,v)}catch(e){}}}}return t}},103:(e,t)=>{var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,i=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,h=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.suspense_list"):60120,g=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,b=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,y=n?Symbol.for("react.responder"):60118,x=n?Symbol.for("react.scope"):60119;function _(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case o:case s:case a:case h:return e;default:switch(e=e&&e.$$typeof){case u:case f:case m:case g:case l:return e;default:return t}}case i:return t}}}function w(e){return _(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=l,t.Element=r,t.ForwardRef=f,t.Fragment=o,t.Lazy=m,t.Memo=g,t.Portal=i,t.Profiler=s,t.StrictMode=a,t.Suspense=h,t.isAsyncMode=function(e){return w(e)||_(e)===c},t.isConcurrentMode=w,t.isContextConsumer=function(e){return _(e)===u},t.isContextProvider=function(e){return _(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return _(e)===f},t.isFragment=function(e){return _(e)===o},t.isLazy=function(e){return _(e)===m},t.isMemo=function(e){return _(e)===g},t.isPortal=function(e){return _(e)===i},t.isProfiler=function(e){return _(e)===s},t.isStrictMode=function(e){return _(e)===a},t.isSuspense=function(e){return _(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===d||e===s||e===a||e===h||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===g||e.$$typeof===l||e.$$typeof===u||e.$$typeof===f||e.$$typeof===v||e.$$typeof===y||e.$$typeof===x||e.$$typeof===b)},t.typeOf=_},296:(e,t,n)=>{e.exports=n(103)},418:e=>{var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var a,s,l=i(e),u=1;u<arguments.length;u++){for(var c in a=Object(arguments[u]))n.call(a,c)&&(l[c]=a[c]);if(t){s=t(a);for(var d=0;d<s.length;d++)r.call(a,s[d])&&(l[s[d]]=a[s[d]])}}return l}},448:(e,t,n)=>{var r=n(294),i=n(418),o=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)s.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h=Object.prototype.hasOwnProperty,p={},g={};function m(e,t,n,r,i,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var b={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){b[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];b[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){b[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){b[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){b[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){b[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){b[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){b[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){b[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function x(e,t,n,r){var i=b.hasOwnProperty(t)?b[t]:null;(null!==i?0===i.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!h.call(g,e)||!h.call(p,e)&&(f.test(e)?g[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,y);b[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,y);b[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,y);b[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){b[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),b.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){b[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=60103,k=60106,S=60107,M=60108,E=60114,C=60109,O=60110,P=60112,T=60113,D=60120,A=60115,L=60116,R=60121,I=60128,N=60129,z=60130,F=60131;if("function"==typeof Symbol&&Symbol.for){var V=Symbol.for;w=V("react.element"),k=V("react.portal"),S=V("react.fragment"),M=V("react.strict_mode"),E=V("react.profiler"),C=V("react.provider"),O=V("react.context"),P=V("react.forward_ref"),T=V("react.suspense"),D=V("react.suspense_list"),A=V("react.memo"),L=V("react.lazy"),R=V("react.block"),V("react.scope"),I=V("react.opaque.id"),N=V("react.debug_trace_mode"),z=V("react.offscreen"),F=V("react.legacy_hidden")}var j,B="function"==typeof Symbol&&Symbol.iterator;function H(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function W(e){if(void 0===j)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);j=t&&t[1]||""}return"\n"+j+e}var U=!1;function $(e,t){if(!e||U)return"";U=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var i=e.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s])return"\n"+i[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{U=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?W(e):""}function Y(e){switch(e.tag){case 5:return W(e.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return $(e.type,!1);case 11:return $(e.type.render,!1);case 22:return $(e.type._render,!1);case 1:return $(e.type,!0);default:return""}}function X(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case k:return"Portal";case E:return"Profiler";case M:return"StrictMode";case T:return"Suspense";case D:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case A:return X(e.type);case R:return X(e._render);case L:t=e._payload,e=e._init;try{return X(e(t))}catch(e){}}return null}function q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=Q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&x(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ie(e,t.type,n):t.hasOwnProperty("defaultValue")&&ie(e,t.type,q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ie(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function oe(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+q(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:q(n)}}function ue(e,t){var n=q(t.value),r=q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?fe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var pe,ge,me=(ge=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((pe=pe||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=pe.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ge(e,t)}))}:ge);function be(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ve={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ye=["Webkit","ms","Moz","O"];function xe(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ve.hasOwnProperty(e)&&ve[e]?(""+t).trim():t+"px"}function _e(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=xe(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(ve).forEach((function(e){ye.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ve[t]=ve[e]}))}));var we=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(we[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Se(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Me(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,Ce=null,Oe=null;function Pe(e){if(e=ni(e)){if("function"!=typeof Ee)throw Error(a(280));var t=e.stateNode;t&&(t=ii(t),Ee(e.stateNode,e.type,t))}}function Te(e){Ce?Oe?Oe.push(e):Oe=[e]:Ce=e}function De(){if(Ce){var e=Ce,t=Oe;if(Oe=Ce=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function Ae(e,t){return e(t)}function Le(e,t,n,r,i){return e(t,n,r,i)}function Re(){}var Ie=Ae,Ne=!1,ze=!1;function Fe(){null===Ce&&null===Oe||(Re(),De())}function Ve(e,t){var n=e.stateNode;if(null===n)return null;var r=ii(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var je=!1;if(d)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){je=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(ge){je=!1}function He(e,t,n,r,i,o,a,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var We=!1,Ue=null,$e=!1,Ye=null,Xe={onError:function(e){We=!0,Ue=e}};function qe(e,t,n,r,i,o,a,s,l){We=!1,Ue=null,He.apply(Xe,arguments)}function Qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ke(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ge(e){if(Qe(e)!==e)throw Error(a(188))}function Ze(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Qe(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return Ge(i),e;if(o===r)return Ge(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s){for(l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,it=!1,ot=[],at=null,st=null,lt=null,ut=new Map,ct=new Map,dt=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ht(e,t,n,r,i){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:i,targetContainers:[r]}}function pt(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function gt(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e=ht(t,n,r,i,o),null!==t&&null!==(t=ni(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function mt(e){var t=ti(e.target);if(null!==t){var n=Qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ke(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){o.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function bt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ni(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function vt(e,t,n){bt(e)&&n.delete(t)}function yt(){for(it=!1;0<ot.length;){var e=ot[0];if(null!==e.blockedOn){null!==(e=ni(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&ot.shift()}null!==at&&bt(at)&&(at=null),null!==st&&bt(st)&&(st=null),null!==lt&&bt(lt)&&(lt=null),ut.forEach(vt),ct.forEach(vt)}function xt(e,t){e.blockedOn===t&&(e.blockedOn=null,it||(it=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,yt)))}function _t(e){function t(t){return xt(t,e)}if(0<ot.length){xt(ot[0],e);for(var n=1;n<ot.length;n++){var r=ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&xt(at,e),null!==st&&xt(st,e),null!==lt&&xt(lt,e),ut.forEach(t),ct.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)mt(n),null===n.blockedOn&&dt.shift()}function wt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:wt("Animation","AnimationEnd"),animationiteration:wt("Animation","AnimationIteration"),animationstart:wt("Animation","AnimationStart"),transitionend:wt("Transition","TransitionEnd")},St={},Mt={};function Et(e){if(St[e])return St[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Mt)return St[e]=n[t];return e}d&&(Mt=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Ct=Et("animationend"),Ot=Et("animationiteration"),Pt=Et("animationstart"),Tt=Et("transitionend"),Dt=new Map,At=new Map,Lt=["abort","abort",Ct,"animationEnd",Ot,"animationIteration",Pt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Tt,"transitionEnd","waiting","waiting"];function Rt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1];i="on"+(i[0].toUpperCase()+i.slice(1)),At.set(r,t),Dt.set(r,i),u(i,[r])}}(0,o.unstable_now)();var It=8;function Nt(e){if(0!=(1&e))return It=15,1;if(0!=(2&e))return It=14,2;if(0!=(4&e))return It=13,4;var t=24&e;return 0!==t?(It=12,t):0!=(32&e)?(It=11,32):0!=(t=192&e)?(It=10,t):0!=(256&e)?(It=9,256):0!=(t=3584&e)?(It=8,t):0!=(4096&e)?(It=7,4096):0!=(t=4186112&e)?(It=6,t):0!=(t=62914560&e)?(It=5,t):67108864&e?(It=4,67108864):0!=(134217728&e)?(It=3,134217728):0!=(t=805306368&e)?(It=2,t):0!=(1073741824&e)?(It=1,1073741824):(It=8,e)}function zt(e,t){var n=e.pendingLanes;if(0===n)return It=0;var r=0,i=0,o=e.expiredLanes,a=e.suspendedLanes,s=e.pingedLanes;if(0!==o)r=o,i=It=15;else if(0!=(o=134217727&n)){var l=o&~a;0!==l?(r=Nt(l),i=It):0!=(s&=o)&&(r=Nt(s),i=It)}else 0!=(o=n&~a)?(r=Nt(o),i=It):0!==s&&(r=Nt(s),i=It);if(0===r)return 0;if(r=n&((0>(r=31-Wt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(Nt(t),i<=It)return t;It=i}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-Wt(t)),r|=e[n],t&=~i;return r}function Ft(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Vt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=jt(24&~t))?Vt(10,t):e;case 10:return 0===(e=jt(192&~t))?Vt(8,t):e;case 8:return 0===(e=jt(3584&~t))&&0===(e=jt(4186112&~t))&&(e=512),e;case 2:return 0===(t=jt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function jt(e){return e&-e}function Bt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ht(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Wt(t)]=n}var Wt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Ut(e)/$t|0)|0},Ut=Math.log,$t=Math.LN2,Yt=o.unstable_UserBlockingPriority,Xt=o.unstable_runWithPriority,qt=!0;function Qt(e,t,n,r){Ne||Re();var i=Gt,o=Ne;Ne=!0;try{Le(i,e,t,n,r)}finally{(Ne=o)||Fe()}}function Kt(e,t,n,r){Xt(Yt,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var i;if(qt)if((i=0==(4&t))&&0<ot.length&&-1<ft.indexOf(e))e=ht(null,e,t,n,r),ot.push(e);else{var o=Zt(e,t,n,r);if(null===o)i&&pt(e,r);else{if(i){if(-1<ft.indexOf(e))return e=ht(o,e,t,n,r),void ot.push(e);if(function(e,t,n,r,i){switch(t){case"focusin":return at=gt(at,e,t,n,r,i),!0;case"dragenter":return st=gt(st,e,t,n,r,i),!0;case"mouseover":return lt=gt(lt,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return ut.set(o,gt(ut.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,ct.set(o,gt(ct.get(o)||null,e,t,n,r,i)),!0}return!1}(o,e,t,n,r))return;pt(e,r)}Rr(e,t,r,null,n)}}}function Zt(e,t,n,r){var i=Me(r);if(null!==(i=ti(i))){var o=Qe(i);if(null===o)i=null;else{var a=o.tag;if(13===a){if(null!==(i=Ke(o)))return i;i=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;i=null}else o!==i&&(i=null)}}return Rr(e,t,r,i,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,i="value"in Jt?Jt.value:Jt.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return tn=i.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function sn(e){function t(t,n,r,i,o){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?on:an,this.isPropagationStopped=an,this}return i(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,un,cn,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=sn(dn),hn=i({},dn,{view:0,detail:0}),pn=sn(hn),gn=i({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(ln=e.screenX-cn.screenX,un=e.screenY-cn.screenY):un=ln=0,cn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:un}}),mn=sn(gn),bn=sn(i({},gn,{dataTransfer:0})),vn=sn(i({},hn,{relatedTarget:0})),yn=sn(i({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),xn=i({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),_n=sn(xn),wn=sn(i({},dn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Mn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Mn[e])&&!!t[e]}function Cn(){return En}var On=i({},hn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Pn=sn(On),Tn=sn(i({},gn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Dn=sn(i({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),An=sn(i({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Ln=i({},gn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=sn(Ln),In=[9,13,27,32],Nn=d&&"CompositionEvent"in window,zn=null;d&&"documentMode"in document&&(zn=document.documentMode);var Fn=d&&"TextEvent"in window&&!zn,Vn=d&&(!Nn||zn&&8<zn&&11>=zn),jn=String.fromCharCode(32),Bn=!1;function Hn(e,t){switch(e){case"keyup":return-1!==In.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Wn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,$n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Yn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$n[e.type]:"textarea"===t}function Xn(e,t,n,r){Te(r),0<(t=Nr(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,Qn=null;function Kn(e){Or(e,0)}function Gn(e){if(G(ri(e)))return e}function Zn(e,t){if("change"===e)return t}var Jn=!1;if(d){var er;if(d){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Jn=er&&(!document.documentMode||9<document.documentMode)}function rr(){qn&&(qn.detachEvent("onpropertychange",ir),Qn=qn=null)}function ir(e){if("value"===e.propertyName&&Gn(Qn)){var t=[];if(Xn(t,Qn,e,Me(e)),e=Kn,Ne)e(t);else{Ne=!0;try{Ae(e,t)}finally{Ne=!1,Fe()}}}}function or(e,t,n){"focusin"===e?(rr(),Qn=n,(qn=t).attachEvent("onpropertychange",ir)):"focusout"===e&&rr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Qn)}function sr(e,t){if("click"===e)return Gn(t)}function lr(e,t){if("input"===e||"change"===e)return Gn(t)}var ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},cr=Object.prototype.hasOwnProperty;function dr(e,t){if(ur(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cr.call(t,n[r])||!ur(e[n[r]],t[n[r]]))return!1;return!0}function fr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function hr(e,t){var n,r=fr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fr(r)}}function pr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?pr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function gr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function mr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var br=d&&"documentMode"in document&&11>=document.documentMode,vr=null,yr=null,xr=null,_r=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;_r||null==vr||vr!==Z(r)||(r="selectionStart"in(r=vr)&&mr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},xr&&dr(xr,r)||(xr=r,0<(r=Nr(yr,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}Rt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Rt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Rt(Lt,2);for(var kr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Sr=0;Sr<kr.length;Sr++)At.set(kr[Sr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Mr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Er=new Set("cancel close invalid load scroll toggle".split(" ").concat(Mr));function Cr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,o,s,l,u){if(qe.apply(this,arguments),We){if(!We)throw Error(a(198));var c=Ue;We=!1,Ue=null,$e||($e=!0,Ye=c)}}(r,t,void 0,e),e.currentTarget=null}function Or(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==o&&i.isPropagationStopped())break e;Cr(i,s,u),o=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,u=s.currentTarget,s=s.listener,l!==o&&i.isPropagationStopped())break e;Cr(i,s,u),o=l}}}if($e)throw e=Ye,$e=!1,Ye=null,e}function Pr(e,t){var n=oi(t),r=e+"__bubble";n.has(r)||(Lr(t,e,2,!1),n.add(r))}var Tr="_reactListening"+Math.random().toString(36).slice(2);function Dr(e){e[Tr]||(e[Tr]=!0,s.forEach((function(t){Er.has(t)||Ar(t,!1,e,null),Ar(t,!0,e,null)})))}function Ar(e,t,n,r){var i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===e&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!t&&Er.has(e)){if("scroll"!==e)return;i|=2,o=r}var a=oi(o),s=e+"__"+(t?"capture":"bubble");a.has(s)||(t&&(i|=4),Lr(o,e,i,t),a.add(s))}function Lr(e,t,n,r){var i=At.get(t);switch(void 0===i?2:i){case 0:i=Qt;break;case 1:i=Kt;break;default:i=Gt}n=i.bind(null,t,n,e),i=void 0,!je||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Rr(e,t,n,r,i){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=ti(s)))return;if(5===(l=a.tag)||6===l){r=o=a;continue e}s=s.parentNode}}r=r.return}!function(e,t,n){if(ze)return e();ze=!0;try{Ie(e,t,n)}finally{ze=!1,Fe()}}((function(){var r=o,i=Me(n),a=[];e:{var s=Dt.get(e);if(void 0!==s){var l=fn,u=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Pn;break;case"focusin":u="focus",l=vn;break;case"focusout":u="blur",l=vn;break;case"beforeblur":case"afterblur":l=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=bn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Dn;break;case Ct:case Ot:case Pt:l=yn;break;case Tt:l=An;break;case"scroll":l=pn;break;case"wheel":l=Rn;break;case"copy":case"cut":case"paste":l=_n;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Tn}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==s?s+"Capture":null:s;c=[];for(var h,p=r;null!==p;){var g=(h=p).stateNode;if(5===h.tag&&null!==g&&(h=g,null!==f&&null!=(g=Ve(p,f))&&c.push(Ir(p,g,h))),d)break;p=p.return}0<c.length&&(s=new l(s,u,null,n,i),a.push({event:s,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!ti(u)&&!u[Jr])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?ti(u):null)&&(u!==(d=Qe(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=mn,g="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(c=Tn,g="onPointerLeave",f="onPointerEnter",p="pointer"),d=null==l?s:ri(l),h=null==u?s:ri(u),(s=new c(g,p+"leave",l,n,i)).target=d,s.relatedTarget=h,g=null,ti(i)===r&&((c=new c(f,p+"enter",u,n,i)).target=h,c.relatedTarget=d,g=c),d=g,l&&u)e:{for(f=u,p=0,h=c=l;h;h=zr(h))p++;for(h=0,g=f;g;g=zr(g))h++;for(;0<p-h;)c=zr(c),p--;for(;0<h-p;)f=zr(f),h--;for(;p--;){if(c===f||null!==f&&c===f.alternate)break e;c=zr(c),f=zr(f)}c=null}else c=null;null!==l&&Fr(a,s,l,c,!1),null!==u&&null!==d&&Fr(a,d,u,c,!0)}if("select"===(l=(s=r?ri(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Zn;else if(Yn(s))if(Jn)m=lr;else{m=ar;var b=or}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=sr);switch(m&&(m=m(e,r))?Xn(a,m,n,i):(b&&b(e,s,r),"focusout"===e&&(b=s._wrapperState)&&b.controlled&&"number"===s.type&&ie(s,"number",s.value)),b=r?ri(r):window,e){case"focusin":(Yn(b)||"true"===b.contentEditable)&&(vr=b,yr=r,xr=null);break;case"focusout":xr=yr=vr=null;break;case"mousedown":_r=!0;break;case"contextmenu":case"mouseup":case"dragend":_r=!1,wr(a,n,i);break;case"selectionchange":if(br)break;case"keydown":case"keyup":wr(a,n,i)}var v;if(Nn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Un?Hn(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Vn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==y?"onCompositionEnd"===y&&Un&&(v=nn()):(en="value"in(Jt=i)?Jt.value:Jt.textContent,Un=!0)),0<(b=Nr(r,y)).length&&(y=new wn(y,e,null,n,i),a.push({event:y,listeners:b}),(v||null!==(v=Wn(n)))&&(y.data=v))),(v=Fn?function(e,t){switch(e){case"compositionend":return Wn(t);case"keypress":return 32!==t.which?null:(Bn=!0,jn);case"textInput":return(e=t.data)===jn&&Bn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Nn&&Hn(e,t)?(e=nn(),tn=en=Jt=null,Un=!1,e):null;switch(e){default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Vn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Nr(r,"onBeforeInput")).length&&(i=new wn("onBeforeInput","beforeinput",null,n,i),a.push({event:i,listeners:r}),i.data=v)}Or(a,t)}))}function Ir(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Nr(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=Ve(e,n))&&r.unshift(Ir(e,o,i)),null!=(o=Ve(e,t))&&r.push(Ir(e,o,i))),e=e.return}return r}function zr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Fr(e,t,n,r,i){for(var o=t._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,i?null!=(l=Ve(n,o))&&a.unshift(Ir(n,l,s)):i||null!=(l=Ve(n,o))&&a.push(Ir(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Vr(){}var jr=null,Br=null;function Hr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Wr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Ur="function"==typeof setTimeout?setTimeout:void 0,$r="function"==typeof clearTimeout?clearTimeout:void 0;function Yr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Xr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function qr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Qr=0,Kr=Math.random().toString(36).slice(2),Gr="__reactFiber$"+Kr,Zr="__reactProps$"+Kr,Jr="__reactContainer$"+Kr,ei="__reactEvents$"+Kr;function ti(e){var t=e[Gr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jr]||n[Gr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=qr(e);null!==e;){if(n=e[Gr])return n;e=qr(e)}return t}n=(e=n).parentNode}return null}function ni(e){return!(e=e[Gr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ri(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function ii(e){return e[Zr]||null}function oi(e){var t=e[ei];return void 0===t&&(t=e[ei]=new Set),t}var ai=[],si=-1;function li(e){return{current:e}}function ui(e){0>si||(e.current=ai[si],ai[si]=null,si--)}function ci(e,t){si++,ai[si]=e.current,e.current=t}var di={},fi=li(di),hi=li(!1),pi=di;function gi(e,t){var n=e.type.contextTypes;if(!n)return di;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function mi(e){return null!=e.childContextTypes}function bi(){ui(hi),ui(fi)}function vi(e,t,n){if(fi.current!==di)throw Error(a(168));ci(fi,t),ci(hi,n)}function yi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(a(108,X(t)||"Unknown",o));return i({},n,r)}function xi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||di,pi=fi.current,ci(fi,e),ci(hi,hi.current),!0}function _i(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=yi(e,t,pi),r.__reactInternalMemoizedMergedChildContext=e,ui(hi),ui(fi),ci(fi,e)):ui(hi),ci(hi,n)}var wi=null,ki=null,Si=o.unstable_runWithPriority,Mi=o.unstable_scheduleCallback,Ei=o.unstable_cancelCallback,Ci=o.unstable_shouldYield,Oi=o.unstable_requestPaint,Pi=o.unstable_now,Ti=o.unstable_getCurrentPriorityLevel,Di=o.unstable_ImmediatePriority,Ai=o.unstable_UserBlockingPriority,Li=o.unstable_NormalPriority,Ri=o.unstable_LowPriority,Ii=o.unstable_IdlePriority,Ni={},zi=void 0!==Oi?Oi:function(){},Fi=null,Vi=null,ji=!1,Bi=Pi(),Hi=1e4>Bi?Pi:function(){return Pi()-Bi};function Wi(){switch(Ti()){case Di:return 99;case Ai:return 98;case Li:return 97;case Ri:return 96;case Ii:return 95;default:throw Error(a(332))}}function Ui(e){switch(e){case 99:return Di;case 98:return Ai;case 97:return Li;case 96:return Ri;case 95:return Ii;default:throw Error(a(332))}}function $i(e,t){return e=Ui(e),Si(e,t)}function Yi(e,t,n){return e=Ui(e),Mi(e,t,n)}function Xi(){if(null!==Vi){var e=Vi;Vi=null,Ei(e)}qi()}function qi(){if(!ji&&null!==Fi){ji=!0;var e=0;try{var t=Fi;$i(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Fi=null}catch(t){throw null!==Fi&&(Fi=Fi.slice(e+1)),Mi(Di,Xi),t}finally{ji=!1}}}var Qi=_.ReactCurrentBatchConfig;function Ki(e,t){if(e&&e.defaultProps){for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Gi=li(null),Zi=null,Ji=null,eo=null;function to(){eo=Ji=Zi=null}function no(e){var t=Gi.current;ui(Gi),e.type._context._currentValue=t}function ro(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function io(e,t){Zi=e,eo=Ji=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Na=!0),e.firstContext=null)}function oo(e,t){if(eo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(eo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ji){if(null===Zi)throw Error(a(308));Ji=t,Zi.dependencies={lanes:0,firstContext:t,responders:null}}else Ji=Ji.next=t;return e._currentValue}var ao=!1;function so(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function lo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function uo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function co(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function fo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=t:o=o.next=t}else i=o=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ho(e,t,n,r){var o=e.updateQueue;ao=!1;var a=o.firstBaseUpdate,s=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,c=u.next;u.next=null,null===s?a=c:s.next=c,s=u;var d=e.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==s&&(null===f?d.firstBaseUpdate=c:f.next=c,d.lastBaseUpdate=u)}}if(null!==a){for(f=o.baseState,s=0,d=c=u=null;;){l=a.lane;var h=a.eventTime;if((r&l)===l){null!==d&&(d=d.next={eventTime:h,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var p=e,g=a;switch(l=t,h=n,g.tag){case 1:if("function"==typeof(p=g.payload)){f=p.call(h,f,l);break e}f=p;break e;case 3:p.flags=-4097&p.flags|64;case 0:if(null==(l="function"==typeof(p=g.payload)?p.call(h,f,l):p))break e;f=i({},f,l);break e;case 2:ao=!0}}null!==a.callback&&(e.flags|=32,null===(l=o.effects)?o.effects=[a]:l.push(a))}else h={eventTime:h,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===d?(c=d=h,u=f):d=d.next=h,s|=l;if(null===(a=a.next)){if(null===(l=o.shared.pending))break;a=l.next,l.next=null,o.lastBaseUpdate=l,o.shared.pending=null}}null===d&&(u=f),o.baseState=u,o.firstBaseUpdate=c,o.lastBaseUpdate=d,Fs|=s,e.lanes=s,e.memoizedState=f}}function po(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(a(191,i));i.call(r)}}}var go=(new r.Component).refs;function mo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var bo={isMounted:function(e){return!!(e=e._reactInternals)&&Qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ul(),i=cl(e),o=uo(r,i);o.payload=t,null!=n&&(o.callback=n),co(e,o),dl(e,i,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ul(),i=cl(e),o=uo(r,i);o.tag=1,o.payload=t,null!=n&&(o.callback=n),co(e,o),dl(e,i,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ul(),r=cl(e),i=uo(n,r);i.tag=2,null!=t&&(i.callback=t),co(e,i),dl(e,r,n)}};function vo(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!(t.prototype&&t.prototype.isPureReactComponent&&dr(n,r)&&dr(i,o))}function yo(e,t,n){var r=!1,i=di,o=t.contextType;return"object"==typeof o&&null!==o?o=oo(o):(i=mi(t)?pi:fi.current,o=(r=null!=(r=t.contextTypes))?gi(e,i):di),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=bo,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function xo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&bo.enqueueReplaceState(t,t.state,null)}function _o(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=go,so(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=oo(o):(o=mi(t)?pi:fi.current,i.context=gi(e,o)),ho(e,n,i,r),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(mo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&bo.enqueueReplaceState(i,i.state,null),ho(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4)}var wo=Array.isArray;function ko(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=r.refs;t===go&&(t=r.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function So(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Mo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Wl(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Xl(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=ko(e,t,n),r.return=e,r):((r=Ul(n.type,n.key,n.props,null,e.mode,r)).ref=ko(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=ql(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=$l(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Ul(t.type,t.key,t.props,null,e.mode,n)).ref=ko(e,null,t),n.return=e,n;case k:return(t=ql(t,e.mode,n)).return=e,t}if(wo(t)||H(t))return(t=$l(t,e.mode,n,null)).return=e,t;So(e,t)}return null}function h(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===i?n.type===S?d(e,t,n.props.children,r,i):u(e,t,n,r):null;case k:return n.key===i?c(e,t,n,r):null}if(wo(n)||H(n))return null!==i?null:d(e,t,n,r,null);So(e,n)}return null}function p(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return e=e.get(null===r.key?n:r.key)||null,r.type===S?d(t,e,r.props.children,i,r.key):u(t,e,r,i);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(wo(r)||H(r))return d(t,e=e.get(n)||null,r,i,null);So(t,r)}return null}function g(i,a,s,l){for(var u=null,c=null,d=a,g=a=0,m=null;null!==d&&g<s.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var b=h(i,d,s[g],l);if(null===b){null===d&&(d=m);break}e&&d&&null===b.alternate&&t(i,d),a=o(b,a,g),null===c?u=b:c.sibling=b,c=b,d=m}if(g===s.length)return n(i,d),u;if(null===d){for(;g<s.length;g++)null!==(d=f(i,s[g],l))&&(a=o(d,a,g),null===c?u=d:c.sibling=d,c=d);return u}for(d=r(i,d);g<s.length;g++)null!==(m=p(d,i,g,s[g],l))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),a=o(m,a,g),null===c?u=m:c.sibling=m,c=m);return e&&d.forEach((function(e){return t(i,e)})),u}function m(i,s,l,u){var c=H(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var d=c=null,g=s,m=s=0,b=null,v=l.next();null!==g&&!v.done;m++,v=l.next()){g.index>m?(b=g,g=null):b=g.sibling;var y=h(i,g,v.value,u);if(null===y){null===g&&(g=b);break}e&&g&&null===y.alternate&&t(i,g),s=o(y,s,m),null===d?c=y:d.sibling=y,d=y,g=b}if(v.done)return n(i,g),c;if(null===g){for(;!v.done;m++,v=l.next())null!==(v=f(i,v.value,u))&&(s=o(v,s,m),null===d?c=v:d.sibling=v,d=v);return c}for(g=r(i,g);!v.done;m++,v=l.next())null!==(v=p(g,i,m,v.value,u))&&(e&&null!==v.alternate&&g.delete(null===v.key?m:v.key),s=o(v,s,m),null===d?c=v:d.sibling=v,d=v);return e&&g.forEach((function(e){return t(i,e)})),c}return function(e,r,o,l){var u="object"==typeof o&&null!==o&&o.type===S&&null===o.key;u&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case w:e:{for(c=o.key,u=r;null!==u;){if(u.key===c){if(7===u.tag){if(o.type===S){n(e,u.sibling),(r=i(u,o.props.children)).return=e,e=r;break e}}else if(u.elementType===o.type){n(e,u.sibling),(r=i(u,o.props)).ref=ko(e,u,o),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}o.type===S?((r=$l(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=Ul(o.type,o.key,o.props,null,e.mode,l)).ref=ko(e,r,o),l.return=e,e=l)}return s(e);case k:e:{for(u=o.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=ql(o,e.mode,l)).return=e,e=r}return s(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=Xl(o,e.mode,l)).return=e,e=r),s(e);if(wo(o))return g(e,r,o,l);if(H(o))return m(e,r,o,l);if(c&&So(e,o),void 0===o&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,X(e.type)||"Component"))}return n(e,r)}}var Eo=Mo(!0),Co=Mo(!1),Oo={},Po=li(Oo),To=li(Oo),Do=li(Oo);function Ao(e){if(e===Oo)throw Error(a(174));return e}function Lo(e,t){switch(ci(Do,t),ci(To,e),ci(Po,Oo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ui(Po),ci(Po,t)}function Ro(){ui(Po),ui(To),ui(Do)}function Io(e){Ao(Do.current);var t=Ao(Po.current),n=he(t,e.type);t!==n&&(ci(To,e),ci(Po,n))}function No(e){To.current===e&&(ui(Po),ui(To))}var zo=li(0);function Fo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Vo=null,jo=null,Bo=!1;function Ho(e,t){var n=Bl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Wo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Uo(e){if(Bo){var t=jo;if(t){var n=t;if(!Wo(e,t)){if(!(t=Xr(n.nextSibling))||!Wo(e,t))return e.flags=-1025&e.flags|2,Bo=!1,void(Vo=e);Ho(Vo,n)}Vo=e,jo=Xr(t.firstChild)}else e.flags=-1025&e.flags|2,Bo=!1,Vo=e}}function $o(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Vo=e}function Yo(e){if(e!==Vo)return!1;if(!Bo)return $o(e),Bo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Wr(t,e.memoizedProps))for(t=jo;t;)Ho(e,t),t=Xr(t.nextSibling);if($o(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){jo=Xr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}jo=null}}else jo=Vo?Xr(e.stateNode.nextSibling):null;return!0}function Xo(){jo=Vo=null,Bo=!1}var qo=[];function Qo(){for(var e=0;e<qo.length;e++)qo[e]._workInProgressVersionPrimary=null;qo.length=0}var Ko=_.ReactCurrentDispatcher,Go=_.ReactCurrentBatchConfig,Zo=0,Jo=null,ea=null,ta=null,na=!1,ra=!1;function ia(){throw Error(a(321))}function oa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ur(e[n],t[n]))return!1;return!0}function aa(e,t,n,r,i,o){if(Zo=o,Jo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ko.current=null===e||null===e.memoizedState?Aa:La,e=n(r,i),ra){o=0;do{if(ra=!1,!(25>o))throw Error(a(301));o+=1,ta=ea=null,t.updateQueue=null,Ko.current=Ra,e=n(r,i)}while(ra)}if(Ko.current=Da,t=null!==ea&&null!==ea.next,Zo=0,ta=ea=Jo=null,na=!1,t)throw Error(a(300));return e}function sa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ta?Jo.memoizedState=ta=e:ta=ta.next=e,ta}function la(){if(null===ea){var e=Jo.alternate;e=null!==e?e.memoizedState:null}else e=ea.next;var t=null===ta?Jo.memoizedState:ta.next;if(null!==t)ta=t,ea=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ea=e).memoizedState,baseState:ea.baseState,baseQueue:ea.baseQueue,queue:ea.queue,next:null},null===ta?Jo.memoizedState=ta=e:ta=ta.next=e}return ta}function ua(e,t){return"function"==typeof t?t(e):t}function ca(e){var t=la(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=ea,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var s=i.next;i.next=o.next,o.next=s}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=s=o=null,u=i;do{var c=u.lane;if((Zo&c)===c)null!==l&&(l=l.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var d={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===l?(s=l=d,o=r):l=l.next=d,Jo.lanes|=c,Fs|=c}u=u.next}while(null!==u&&u!==i);null===l?o=r:l.next=s,ur(r,t.memoizedState)||(Na=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function da(e){var t=la(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{o=e(o,s.action),s=s.next}while(s!==i);ur(o,t.memoizedState)||(Na=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function fa(e,t,n){var r=t._getVersion;r=r(t._source);var i=t._workInProgressVersionPrimary;if(null!==i?e=i===r:(e=e.mutableReadLanes,(e=(Zo&e)===e)&&(t._workInProgressVersionPrimary=r,qo.push(t))),e)return n(t._source);throw qo.push(t),Error(a(350))}function ha(e,t,n,r){var i=Ts;if(null===i)throw Error(a(349));var o=t._getVersion,s=o(t._source),l=Ko.current,u=l.useState((function(){return fa(i,t,n)})),c=u[1],d=u[0];u=ta;var f=e.memoizedState,h=f.refs,p=h.getSnapshot,g=f.source;f=f.subscribe;var m=Jo;return e.memoizedState={refs:h,source:t,subscribe:r},l.useEffect((function(){h.getSnapshot=n,h.setSnapshot=c;var e=o(t._source);if(!ur(s,e)){e=n(t._source),ur(d,e)||(c(e),e=cl(m),i.mutableReadLanes|=e&i.pendingLanes),e=i.mutableReadLanes,i.entangledLanes|=e;for(var r=i.entanglements,a=e;0<a;){var l=31-Wt(a),u=1<<l;r[l]|=e,a&=~u}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=h.getSnapshot,n=h.setSnapshot;try{n(e(t._source));var r=cl(m);i.mutableReadLanes|=r&i.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ur(p,n)&&ur(g,t)&&ur(f,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ua,lastRenderedState:d}).dispatch=c=Ta.bind(null,Jo,e),u.queue=e,u.baseQueue=null,d=fa(i,t,n),u.memoizedState=u.baseState=d),d}function pa(e,t,n){return ha(la(),e,t,n)}function ga(e){var t=sa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ua,lastRenderedState:e}).dispatch=Ta.bind(null,Jo,e),[t.memoizedState,e]}function ma(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Jo.updateQueue)?(t={lastEffect:null},Jo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ba(e){return e={current:e},sa().memoizedState=e}function va(){return la().memoizedState}function ya(e,t,n,r){var i=sa();Jo.flags|=e,i.memoizedState=ma(1|t,n,void 0,void 0===r?null:r)}function xa(e,t,n,r){var i=la();r=void 0===r?null:r;var o=void 0;if(null!==ea){var a=ea.memoizedState;if(o=a.destroy,null!==r&&oa(r,a.deps))return void ma(t,n,o,r)}Jo.flags|=e,i.memoizedState=ma(1|t,n,o,r)}function _a(e,t){return ya(516,4,e,t)}function wa(e,t){return xa(516,4,e,t)}function ka(e,t){return xa(4,2,e,t)}function Sa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ma(e,t,n){return n=null!=n?n.concat([e]):null,xa(4,2,Sa.bind(null,t,e),n)}function Ea(){}function Ca(e,t){var n=la();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&oa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Oa(e,t){var n=la();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&oa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Pa(e,t){var n=Wi();$i(98>n?98:n,(function(){e(!0)})),$i(97<n?97:n,(function(){var n=Go.transition;Go.transition=1;try{e(!1),t()}finally{Go.transition=n}}))}function Ta(e,t,n){var r=ul(),i=cl(e),o={lane:i,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),t.pending=o,a=e.alternate,e===Jo||null!==a&&a===Jo)ra=na=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=a(s,n);if(o.eagerReducer=a,o.eagerState=l,ur(l,s))return}catch(e){}dl(e,i,r)}}var Da={readContext:oo,useCallback:ia,useContext:ia,useEffect:ia,useImperativeHandle:ia,useLayoutEffect:ia,useMemo:ia,useReducer:ia,useRef:ia,useState:ia,useDebugValue:ia,useDeferredValue:ia,useTransition:ia,useMutableSource:ia,useOpaqueIdentifier:ia,unstable_isNewReconciler:!1},Aa={readContext:oo,useCallback:function(e,t){return sa().memoizedState=[e,void 0===t?null:t],e},useContext:oo,useEffect:_a,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ya(4,2,Sa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ya(4,2,e,t)},useMemo:function(e,t){var n=sa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=sa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ta.bind(null,Jo,e),[r.memoizedState,e]},useRef:ba,useState:ga,useDebugValue:Ea,useDeferredValue:function(e){var t=ga(e),n=t[0],r=t[1];return _a((function(){var t=Go.transition;Go.transition=1;try{r(e)}finally{Go.transition=t}}),[e]),n},useTransition:function(){var e=ga(!1),t=e[0];return ba(e=Pa.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=sa();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ha(r,e,t,n)},useOpaqueIdentifier:function(){if(Bo){var e=!1,t=function(e){return{$$typeof:I,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Qr++).toString(36))),Error(a(355))})),n=ga(t)[1];return 0==(2&Jo.mode)&&(Jo.flags|=516,ma(5,(function(){n("r:"+(Qr++).toString(36))}),void 0,null)),t}return ga(t="r:"+(Qr++).toString(36)),t},unstable_isNewReconciler:!1},La={readContext:oo,useCallback:Ca,useContext:oo,useEffect:wa,useImperativeHandle:Ma,useLayoutEffect:ka,useMemo:Oa,useReducer:ca,useRef:va,useState:function(){return ca(ua)},useDebugValue:Ea,useDeferredValue:function(e){var t=ca(ua),n=t[0],r=t[1];return wa((function(){var t=Go.transition;Go.transition=1;try{r(e)}finally{Go.transition=t}}),[e]),n},useTransition:function(){var e=ca(ua)[0];return[va().current,e]},useMutableSource:pa,useOpaqueIdentifier:function(){return ca(ua)[0]},unstable_isNewReconciler:!1},Ra={readContext:oo,useCallback:Ca,useContext:oo,useEffect:wa,useImperativeHandle:Ma,useLayoutEffect:ka,useMemo:Oa,useReducer:da,useRef:va,useState:function(){return da(ua)},useDebugValue:Ea,useDeferredValue:function(e){var t=da(ua),n=t[0],r=t[1];return wa((function(){var t=Go.transition;Go.transition=1;try{r(e)}finally{Go.transition=t}}),[e]),n},useTransition:function(){var e=da(ua)[0];return[va().current,e]},useMutableSource:pa,useOpaqueIdentifier:function(){return da(ua)[0]},unstable_isNewReconciler:!1},Ia=_.ReactCurrentOwner,Na=!1;function za(e,t,n,r){t.child=null===e?Co(t,null,n,r):Eo(t,e.child,n,r)}function Fa(e,t,n,r,i){n=n.render;var o=t.ref;return io(t,i),r=aa(e,t,n,r,o,i),null===e||Na?(t.flags|=1,za(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,ns(e,t,i))}function Va(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Hl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ul(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ja(e,t,a,r,i,o))}return a=e.child,0==(i&o)&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:dr)(i,r)&&e.ref===t.ref)?ns(e,t,o):(t.flags|=1,(e=Wl(a,r)).ref=t.ref,e.return=t,t.child=e)}function ja(e,t,n,r,i,o){if(null!==e&&dr(e.memoizedProps,r)&&e.ref===t.ref){if(Na=!1,0==(o&i))return t.lanes=e.lanes,ns(e,t,o);0!=(16384&e.flags)&&(Na=!0)}return Wa(e,t,n,r,o)}function Ba(e,t,n){var r=t.pendingProps,i=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},yl(0,n);else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},yl(0,e),null;t.memoizedState={baseLanes:0},yl(0,null!==o?o.baseLanes:n)}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,yl(0,r);return za(e,t,i,n),t.child}function Ha(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Wa(e,t,n,r,i){var o=mi(n)?pi:fi.current;return o=gi(t,o),io(t,i),n=aa(e,t,n,r,o,i),null===e||Na?(t.flags|=1,za(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,ns(e,t,i))}function Ua(e,t,n,r,i){if(mi(n)){var o=!0;xi(t)}else o=!1;if(io(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),yo(t,n,r),_o(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,u=n.contextType;u="object"==typeof u&&null!==u?oo(u):gi(t,u=mi(n)?pi:fi.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==u)&&xo(t,a,r,u),ao=!1;var f=t.memoizedState;a.state=f,ho(t,r,a,i),l=t.memoizedState,s!==r||f!==l||hi.current||ao?("function"==typeof c&&(mo(t,n,c,r),l=t.memoizedState),(s=ao||vo(t,n,s,r,f,l,u))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=u,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,lo(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:Ki(t.type,s),a.props=u,d=t.pendingProps,f=a.context,l="object"==typeof(l=n.contextType)&&null!==l?oo(l):gi(t,l=mi(n)?pi:fi.current);var h=n.getDerivedStateFromProps;(c="function"==typeof h||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||f!==l)&&xo(t,a,r,l),ao=!1,f=t.memoizedState,a.state=f,ho(t,r,a,i);var p=t.memoizedState;s!==d||f!==p||hi.current||ao?("function"==typeof h&&(mo(t,n,h,r),p=t.memoizedState),(u=ao||vo(t,n,u,r,f,p,l))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=l,r=u):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),r=!1)}return $a(e,t,n,r,o,i)}function $a(e,t,n,r,i,o){Ha(e,t);var a=0!=(64&t.flags);if(!r&&!a)return i&&_i(t,n,!1),ns(e,t,o);r=t.stateNode,Ia.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Eo(t,e.child,null,o),t.child=Eo(t,null,s,o)):za(e,t,s,o),t.memoizedState=r.state,i&&_i(t,n,!0),t.child}function Ya(e){var t=e.stateNode;t.pendingContext?vi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vi(0,t.context,!1),Lo(e,t.containerInfo)}var Xa,qa,Qa,Ka={dehydrated:null,retryLane:0};function Ga(e,t,n){var r,i=t.pendingProps,o=zo.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(o|=1),ci(zo,1&o),null===e?(void 0!==i.fallback&&Uo(t),e=i.children,o=i.fallback,a?(e=Za(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ka,e):"number"==typeof i.unstable_expectedLoadTime?(e=Za(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ka,t.lanes=33554432,e):((n=Yl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(i=function(e,t,n,r,i){var o=t.mode,a=e.child;e=a.sibling;var s={mode:"hidden",children:n};return 0==(2&o)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Wl(a,s),null!==e?r=Wl(e,r):(r=$l(r,o,i,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,i.children,i.fallback,n),a=t.child,o=e.child.memoizedState,a.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Ka,i):(n=function(e,t,n,r){var i=e.child;return e=i.sibling,n=Wl(i,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,i.children,n),t.memoizedState=null,n))}function Za(e,t,n,r){var i=e.mode,o=e.child;return t={mode:"hidden",children:t},0==(2&i)&&null!==o?(o.childLanes=0,o.pendingProps=t):o=Yl(t,i,0,null),n=$l(n,i,r,null),o.return=e,n.return=e,o.sibling=n,e.child=o,n}function Ja(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ro(e.return,t)}function es(e,t,n,r,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=i,a.lastEffect=o)}function ts(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(za(e,t,r.children,n),0!=(2&(r=zo.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ja(e,n);else if(19===e.tag)Ja(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ci(zo,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Fo(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),es(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Fo(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}es(t,!0,n,null,o,t.lastEffect);break;case"together":es(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function ns(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Fs|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Wl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Wl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rs(e,t){if(!Bo)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function is(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return mi(t.type)&&bi(),null;case 3:return Ro(),ui(hi),ui(fi),Qo(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Yo(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:No(t);var o=Ao(Do.current);if(n=t.type,null!==e&&null!=t.stateNode)qa(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ao(Po.current),Yo(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Gr]=t,r[Zr]=s,n){case"dialog":Pr("cancel",r),Pr("close",r);break;case"iframe":case"object":case"embed":Pr("load",r);break;case"video":case"audio":for(e=0;e<Mr.length;e++)Pr(Mr[e],r);break;case"source":Pr("error",r);break;case"img":case"image":case"link":Pr("error",r),Pr("load",r);break;case"details":Pr("toggle",r);break;case"input":ee(r,s),Pr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Pr("invalid",r);break;case"textarea":le(r,s),Pr("invalid",r)}for(var u in ke(n,s),e=null,s)s.hasOwnProperty(u)&&(o=s[u],"children"===u?"string"==typeof o?r.textContent!==o&&(e=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(e=["children",""+o]):l.hasOwnProperty(u)&&null!=o&&"onScroll"===u&&Pr("scroll",r));switch(n){case"input":K(r),re(r,s,!0);break;case"textarea":K(r),ce(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Vr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===o.nodeType?o:o.ownerDocument,e===de&&(e=fe(n)),e===de?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Gr]=t,e[Zr]=r,Xa(e,t),t.stateNode=e,u=Se(n,r),n){case"dialog":Pr("cancel",e),Pr("close",e),o=r;break;case"iframe":case"object":case"embed":Pr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Mr.length;o++)Pr(Mr[o],e);o=r;break;case"source":Pr("error",e),o=r;break;case"img":case"image":case"link":Pr("error",e),Pr("load",e),o=r;break;case"details":Pr("toggle",e),o=r;break;case"input":ee(e,r),o=J(e,r),Pr("invalid",e);break;case"option":o=oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=i({},r,{value:void 0}),Pr("invalid",e);break;case"textarea":le(e,r),o=se(e,r),Pr("invalid",e);break;default:o=r}ke(n,o);var c=o;for(s in c)if(c.hasOwnProperty(s)){var d=c[s];"style"===s?_e(e,d):"dangerouslySetInnerHTML"===s?null!=(d=d?d.__html:void 0)&&me(e,d):"children"===s?"string"==typeof d?("textarea"!==n||""!==d)&&be(e,d):"number"==typeof d&&be(e,""+d):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=d&&"onScroll"===s&&Pr("scroll",e):null!=d&&x(e,s,d,u))}switch(n){case"input":K(e),re(e,r,!1);break;case"textarea":K(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ae(e,!!r.multiple,s,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Vr)}Hr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Qa(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ao(Do.current),Ao(Po.current),Yo(t)?(r=t.stateNode,n=t.memoizedProps,r[Gr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Gr]=t,t.stateNode=r)}return null;case 13:return ui(zo),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Yo(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&zo.current)?0===Is&&(Is=3):(0!==Is&&3!==Is||(Is=4),null===Ts||0==(134217727&Fs)&&0==(134217727&Vs)||gl(Ts,As))),(r||n)&&(t.flags|=4),null);case 4:return Ro(),null===e&&Dr(t.stateNode.containerInfo),null;case 10:return no(t),null;case 19:if(ui(zo),null===(r=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(u=r.rendering))if(s)rs(r,!1);else{if(0!==Is||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=Fo(e))){for(t.flags|=64,rs(r,!1),null!==(s=u.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(u=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=u.childLanes,s.lanes=u.lanes,s.child=u.child,s.memoizedProps=u.memoizedProps,s.memoizedState=u.memoizedState,s.updateQueue=u.updateQueue,s.type=u.type,e=u.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ci(zo,1&zo.current|2),t.child}e=e.sibling}null!==r.tail&&Hi()>Ws&&(t.flags|=64,s=!0,rs(r,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=Fo(u))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rs(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Bo)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Hi()-r.renderingStartTime>Ws&&1073741824!==n&&(t.flags|=64,s=!0,rs(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Hi(),n.sibling=null,t=zo.current,ci(zo,s?1&t|2:1&t),n):null;case 23:case 24:return xl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function os(e){switch(e.tag){case 1:mi(e.type)&&bi();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ro(),ui(hi),ui(fi),Qo(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return No(e),null;case 13:return ui(zo),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ui(zo),null;case 4:return Ro(),null;case 10:return no(e),null;case 23:case 24:return xl(),null;default:return null}}function as(e,t){try{var n="",r=t;do{n+=Y(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i}}function ss(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Xa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},qa=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Ao(Po.current);var a,s=null;switch(n){case"input":o=J(e,o),r=J(e,r),s=[];break;case"option":o=oe(e,o),r=oe(e,r),s=[];break;case"select":o=i({},o,{value:void 0}),r=i({},r,{value:void 0}),s=[];break;case"textarea":o=se(e,o),r=se(e,r),s=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Vr)}for(d in ke(n,r),n=null,o)if(!r.hasOwnProperty(d)&&o.hasOwnProperty(d)&&null!=o[d])if("style"===d){var u=o[d];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(l.hasOwnProperty(d)?s||(s=[]):(s=s||[]).push(d,null));for(d in r){var c=r[d];if(u=null!=o?o[d]:void 0,r.hasOwnProperty(d)&&c!==u&&(null!=c||null!=u))if("style"===d)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(s||(s=[]),s.push(d,n)),n=c;else"dangerouslySetInnerHTML"===d?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(s=s||[]).push(d,c)):"children"===d?"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(d,""+c):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(l.hasOwnProperty(d)?(null!=c&&"onScroll"===d&&Pr("scroll",e),s||u===c||(s=[])):"object"==typeof c&&null!==c&&c.$$typeof===I?c.toString():(s=s||[]).push(d,c))}n&&(s=s||[]).push("style",n);var d=s;(t.updateQueue=d)&&(t.flags|=4)}},Qa=function(e,t,n,r){n!==r&&(t.flags|=4)};var ls="function"==typeof WeakMap?WeakMap:Map;function us(e,t,n){(n=uo(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Xs||(Xs=!0,qs=r),ss(0,t)},n}function cs(e,t,n){(n=uo(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return ss(0,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Qs?Qs=new Set([this]):Qs.add(this),ss(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ds="function"==typeof WeakSet?WeakSet:Set;function fs(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){zl(e,t)}else t.current=null}function hs(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ki(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Yr(t.stateNode.containerInfo))}throw Error(a(163))}function ps(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var i=e;r=i.next,0!=(4&(i=i.tag))&&0!=(1&i)&&(Rl(n,e),Ll(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Ki(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&po(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}po(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Hr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&_t(n)))))}throw Error(a(163))}function gs(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var i=n.memoizedProps.style;i=null!=i&&i.hasOwnProperty("display")?i.display:null,r.style.display=xe("display",i)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function ms(e,t){if(ki&&"function"==typeof ki.onCommitFiberUnmount)try{ki.onCommitFiberUnmount(wi,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,i=r.destroy;if(r=r.tag,void 0!==i)if(0!=(4&r))Rl(t,n);else{r=t;try{i()}catch(e){zl(r,e)}}n=n.next}while(n!==e)}break;case 1:if(fs(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){zl(t,e)}break;case 5:fs(t);break;case 4:ws(e,t)}}function bs(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function vs(e){return 5===e.tag||3===e.tag||4===e.tag}function ys(e){e:{for(var t=e.return;null!==t;){if(vs(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(be(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||vs(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?xs(e,n,t):_s(e,n,t)}function xs(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Vr));else if(4!==r&&null!==(e=e.child))for(xs(e,t,n),e=e.sibling;null!==e;)xs(e,t,n),e=e.sibling}function _s(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(_s(e,t,n),e=e.sibling;null!==e;)_s(e,t,n),e=e.sibling}function ws(e,t){for(var n,r,i=t,o=!1;;){if(!o){o=i.return;e:for(;;){if(null===o)throw Error(a(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}o=o.return}o=!0}if(5===i.tag||6===i.tag){e:for(var s=e,l=i,u=l;;)if(ms(s,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===l)break e;for(;null===u.sibling;){if(null===u.return||u.return===l)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(s=n,l=i.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){n=i.stateNode.containerInfo,r=!0,i.child.return=i,i=i.child;continue}}else if(ms(e,i),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(o=!1)}i.sibling.return=i.return,i=i.sibling}}function ks(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Zr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Se(e,i),t=Se(e,r),i=0;i<o.length;i+=2){var s=o[i],l=o[i+1];"style"===s?_e(n,l):"dangerouslySetInnerHTML"===s?me(n,l):"children"===s?be(n,l):x(n,s,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?ae(n,!!r.multiple,o,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,_t(n.containerInfo)));case 13:return null!==t.memoizedState&&(Hs=Hi(),gs(t.child,!0)),void Ss(t);case 19:return void Ss(t);case 23:case 24:return void gs(t,null!==t.memoizedState)}throw Error(a(163))}function Ss(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ds),t.forEach((function(t){var r=Vl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Ms(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Es=Math.ceil,Cs=_.ReactCurrentDispatcher,Os=_.ReactCurrentOwner,Ps=0,Ts=null,Ds=null,As=0,Ls=0,Rs=li(0),Is=0,Ns=null,zs=0,Fs=0,Vs=0,js=0,Bs=null,Hs=0,Ws=1/0;function Us(){Ws=Hi()+500}var $s,Ys=null,Xs=!1,qs=null,Qs=null,Ks=!1,Gs=null,Zs=90,Js=[],el=[],tl=null,nl=0,rl=null,il=-1,ol=0,al=0,sl=null,ll=!1;function ul(){return 0!=(48&Ps)?Hi():-1!==il?il:il=Hi()}function cl(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Wi()?1:2;if(0===ol&&(ol=zs),0!==Qi.transition){0!==al&&(al=null!==Bs?Bs.pendingLanes:0),e=ol;var t=4186112&~al;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Wi(),e=Vt(0!=(4&Ps)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),ol)}function dl(e,t,n){if(50<nl)throw nl=0,rl=null,Error(a(185));if(null===(e=fl(e,t)))return null;Ht(e,t,n),e===Ts&&(Vs|=t,4===Is&&gl(e,As));var r=Wi();1===t?0!=(8&Ps)&&0==(48&Ps)?ml(e):(hl(e,n),0===Ps&&(Us(),Xi())):(0==(4&Ps)||98!==r&&99!==r||(null===tl?tl=new Set([e]):tl.add(e)),hl(e,n)),Bs=e}function fl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function hl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,i=e.pingedLanes,o=e.expirationTimes,s=e.pendingLanes;0<s;){var l=31-Wt(s),u=1<<l,c=o[l];if(-1===c){if(0==(u&r)||0!=(u&i)){c=t,Nt(u);var d=It;o[l]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);s&=~u}if(r=zt(e,e===Ts?As:0),t=It,0===r)null!==n&&(n!==Ni&&Ei(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Ni&&Ei(n)}15===t?(n=ml.bind(null,e),null===Fi?(Fi=[n],Vi=Mi(Di,qi)):Fi.push(n),n=Ni):14===t?n=Yi(99,ml.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),n=Yi(n,pl.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function pl(e){if(il=-1,al=ol=0,0!=(48&Ps))throw Error(a(327));var t=e.callbackNode;if(Al()&&e.callbackNode!==t)return null;var n=zt(e,e===Ts?As:0);if(0===n)return null;var r=n,i=Ps;Ps|=16;var o=kl();for(Ts===e&&As===r||(Us(),_l(e,r));;)try{El();break}catch(t){wl(e,t)}if(to(),Cs.current=o,Ps=i,null!==Ds?r=0:(Ts=null,As=0,r=Is),0!=(zs&Vs))_l(e,0);else if(0!==r){if(2===r&&(Ps|=64,e.hydrate&&(e.hydrate=!1,Yr(e.containerInfo)),0!==(n=Ft(e))&&(r=Sl(e,n))),1===r)throw t=Ns,_l(e,0),gl(e,n),hl(e,Hi()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:case 5:Pl(e);break;case 3:if(gl(e,n),(62914560&n)===n&&10<(r=Hs+500-Hi())){if(0!==zt(e,0))break;if(((i=e.suspendedLanes)&n)!==n){ul(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=Ur(Pl.bind(null,e),r);break}Pl(e);break;case 4:if(gl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,i=-1;0<n;){var s=31-Wt(n);o=1<<s,(s=r[s])>i&&(i=s),n&=~o}if(n=i,10<(n=(120>(n=Hi()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Es(n/1960))-n)){e.timeoutHandle=Ur(Pl.bind(null,e),n);break}Pl(e);break;default:throw Error(a(329))}}return hl(e,Hi()),e.callbackNode===t?pl.bind(null,e):null}function gl(e,t){for(t&=~js,t&=~Vs,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Wt(t),r=1<<n;e[n]=-1,t&=~r}}function ml(e){if(0!=(48&Ps))throw Error(a(327));if(Al(),e===Ts&&0!=(e.expiredLanes&As)){var t=As,n=Sl(e,t);0!=(zs&Vs)&&(n=Sl(e,t=zt(e,t)))}else n=Sl(e,t=zt(e,0));if(0!==e.tag&&2===n&&(Ps|=64,e.hydrate&&(e.hydrate=!1,Yr(e.containerInfo)),0!==(t=Ft(e))&&(n=Sl(e,t))),1===n)throw n=Ns,_l(e,0),gl(e,t),hl(e,Hi()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Pl(e),hl(e,Hi()),null}function bl(e,t){var n=Ps;Ps|=1;try{return e(t)}finally{0===(Ps=n)&&(Us(),Xi())}}function vl(e,t){var n=Ps;Ps&=-2,Ps|=8;try{return e(t)}finally{0===(Ps=n)&&(Us(),Xi())}}function yl(e,t){ci(Rs,Ls),Ls|=t,zs|=t}function xl(){Ls=Rs.current,ui(Rs)}function _l(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,$r(n)),null!==Ds)for(n=Ds.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&bi();break;case 3:Ro(),ui(hi),ui(fi),Qo();break;case 5:No(r);break;case 4:Ro();break;case 13:case 19:ui(zo);break;case 10:no(r);break;case 23:case 24:xl()}n=n.return}Ts=e,Ds=Wl(e.current,null),As=Ls=zs=t,Is=0,Ns=null,js=Vs=Fs=0}function wl(e,t){for(;;){var n=Ds;try{if(to(),Ko.current=Da,na){for(var r=Jo.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}na=!1}if(Zo=0,ta=ea=Jo=null,ra=!1,Os.current=null,null===n||null===n.return){Is=1,Ns=t,Ds=null;break}e:{var o=e,a=n.return,s=n,l=t;if(t=As,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&s.mode)){var c=s.alternate;c?(s.updateQueue=c.updateQueue,s.memoizedState=c.memoizedState,s.lanes=c.lanes):(s.updateQueue=null,s.memoizedState=null)}var d=0!=(1&zo.current),f=a;do{var h;if(h=13===f.tag){var p=f.memoizedState;if(null!==p)h=null!==p.dehydrated;else{var g=f.memoizedProps;h=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!d)}}if(h){var m=f.updateQueue;if(null===m){var b=new Set;b.add(u),f.updateQueue=b}else m.add(u);if(0==(2&f.mode)){if(f.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var v=uo(-1,1);v.tag=2,co(s,v)}s.lanes|=1;break e}l=void 0,s=t;var y=o.pingCache;if(null===y?(y=o.pingCache=new ls,l=new Set,y.set(u,l)):void 0===(l=y.get(u))&&(l=new Set,y.set(u,l)),!l.has(s)){l.add(s);var x=Fl.bind(null,o,u,s);u.then(x,x)}f.flags|=4096,f.lanes=t;break e}f=f.return}while(null!==f);l=Error((X(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Is&&(Is=2),l=as(l,s),f=a;do{switch(f.tag){case 3:o=l,f.flags|=4096,t&=-t,f.lanes|=t,fo(f,us(0,o,t));break e;case 1:o=l;var _=f.type,w=f.stateNode;if(0==(64&f.flags)&&("function"==typeof _.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Qs||!Qs.has(w)))){f.flags|=4096,t&=-t,f.lanes|=t,fo(f,cs(f,o,t));break e}}f=f.return}while(null!==f)}Ol(n)}catch(e){t=e,Ds===n&&null!==n&&(Ds=n=n.return);continue}break}}function kl(){var e=Cs.current;return Cs.current=Da,null===e?Da:e}function Sl(e,t){var n=Ps;Ps|=16;var r=kl();for(Ts===e&&As===t||_l(e,t);;)try{Ml();break}catch(t){wl(e,t)}if(to(),Ps=n,Cs.current=r,null!==Ds)throw Error(a(261));return Ts=null,As=0,Is}function Ml(){for(;null!==Ds;)Cl(Ds)}function El(){for(;null!==Ds&&!Ci();)Cl(Ds)}function Cl(e){var t=$s(e.alternate,e,Ls);e.memoizedProps=e.pendingProps,null===t?Ol(e):Ds=t,Os.current=null}function Ol(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=is(n,t,Ls)))return void(Ds=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ls)||0==(4&n.mode)){for(var r=0,i=n.child;null!==i;)r|=i.lanes|i.childLanes,i=i.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=os(t)))return n.flags&=2047,void(Ds=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ds=t);Ds=t=e}while(null!==t);0===Is&&(Is=5)}function Pl(e){var t=Wi();return $i(99,Tl.bind(null,e,t)),null}function Tl(e,t){do{Al()}while(null!==Gs);if(0!=(48&Ps))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,i=r,o=e.pendingLanes&~i;e.pendingLanes=i,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=i,e.mutableReadLanes&=i,e.entangledLanes&=i,i=e.entanglements;for(var s=e.eventTimes,l=e.expirationTimes;0<o;){var u=31-Wt(o),c=1<<u;i[u]=0,s[u]=-1,l[u]=-1,o&=~c}if(null!==tl&&0==(24&r)&&tl.has(e)&&tl.delete(e),e===Ts&&(Ds=Ts=null,As=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(i=Ps,Ps|=32,Os.current=null,jr=qt,mr(s=gr())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else e:if(l=(l=s.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,o=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{l.nodeType,u.nodeType}catch(e){l=null;break e}var d=0,f=-1,h=-1,p=0,g=0,m=s,b=null;t:for(;;){for(var v;m!==l||0!==o&&3!==m.nodeType||(f=d+o),m!==u||0!==c&&3!==m.nodeType||(h=d+c),3===m.nodeType&&(d+=m.nodeValue.length),null!==(v=m.firstChild);)b=m,m=v;for(;;){if(m===s)break t;if(b===l&&++p===o&&(f=d),b===u&&++g===c&&(h=d),null!==(v=m.nextSibling))break;b=(m=b).parentNode}m=v}l=-1===f||-1===h?null:{start:f,end:h}}else l=null;l=l||{start:0,end:0}}else l=null;Br={focusedElem:s,selectionRange:l},qt=!1,sl=null,ll=!1,Ys=r;do{try{Dl()}catch(e){if(null===Ys)throw Error(a(330));zl(Ys,e),Ys=Ys.nextEffect}}while(null!==Ys);sl=null,Ys=r;do{try{for(s=e;null!==Ys;){var y=Ys.flags;if(16&y&&be(Ys.stateNode,""),128&y){var x=Ys.alternate;if(null!==x){var _=x.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&y){case 2:ys(Ys),Ys.flags&=-3;break;case 6:ys(Ys),Ys.flags&=-3,ks(Ys.alternate,Ys);break;case 1024:Ys.flags&=-1025;break;case 1028:Ys.flags&=-1025,ks(Ys.alternate,Ys);break;case 4:ks(Ys.alternate,Ys);break;case 8:ws(s,l=Ys);var w=l.alternate;bs(l),null!==w&&bs(w)}Ys=Ys.nextEffect}}catch(e){if(null===Ys)throw Error(a(330));zl(Ys,e),Ys=Ys.nextEffect}}while(null!==Ys);if(_=Br,x=gr(),y=_.focusedElem,s=_.selectionRange,x!==y&&y&&y.ownerDocument&&pr(y.ownerDocument.documentElement,y)){null!==s&&mr(y)&&(x=s.start,void 0===(_=s.end)&&(_=x),"selectionStart"in y?(y.selectionStart=x,y.selectionEnd=Math.min(_,y.value.length)):(_=(x=y.ownerDocument||document)&&x.defaultView||window).getSelection&&(_=_.getSelection(),l=y.textContent.length,w=Math.min(s.start,l),s=void 0===s.end?w:Math.min(s.end,l),!_.extend&&w>s&&(l=s,s=w,w=l),l=hr(y,w),o=hr(y,s),l&&o&&(1!==_.rangeCount||_.anchorNode!==l.node||_.anchorOffset!==l.offset||_.focusNode!==o.node||_.focusOffset!==o.offset)&&((x=x.createRange()).setStart(l.node,l.offset),_.removeAllRanges(),w>s?(_.addRange(x),_.extend(o.node,o.offset)):(x.setEnd(o.node,o.offset),_.addRange(x))))),x=[];for(_=y;_=_.parentNode;)1===_.nodeType&&x.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof y.focus&&y.focus(),y=0;y<x.length;y++)(_=x[y]).element.scrollLeft=_.left,_.element.scrollTop=_.top}qt=!!jr,Br=jr=null,e.current=n,Ys=r;do{try{for(y=e;null!==Ys;){var k=Ys.flags;if(36&k&&ps(y,Ys.alternate,Ys),128&k){x=void 0;var S=Ys.ref;if(null!==S){var M=Ys.stateNode;Ys.tag,x=M,"function"==typeof S?S(x):S.current=x}}Ys=Ys.nextEffect}}catch(e){if(null===Ys)throw Error(a(330));zl(Ys,e),Ys=Ys.nextEffect}}while(null!==Ys);Ys=null,zi(),Ps=i}else e.current=n;if(Ks)Ks=!1,Gs=e,Zs=t;else for(Ys=r;null!==Ys;)t=Ys.nextEffect,Ys.nextEffect=null,8&Ys.flags&&((k=Ys).sibling=null,k.stateNode=null),Ys=t;if(0===(r=e.pendingLanes)&&(Qs=null),1===r?e===rl?nl++:(nl=0,rl=e):nl=0,n=n.stateNode,ki&&"function"==typeof ki.onCommitFiberRoot)try{ki.onCommitFiberRoot(wi,n,void 0,64==(64&n.current.flags))}catch(e){}if(hl(e,Hi()),Xs)throw Xs=!1,e=qs,qs=null,e;return 0!=(8&Ps)||Xi(),null}function Dl(){for(;null!==Ys;){var e=Ys.alternate;ll||null===sl||(0!=(8&Ys.flags)?Je(Ys,sl)&&(ll=!0):13===Ys.tag&&Ms(e,Ys)&&Je(Ys,sl)&&(ll=!0));var t=Ys.flags;0!=(256&t)&&hs(e,Ys),0==(512&t)||Ks||(Ks=!0,Yi(97,(function(){return Al(),null}))),Ys=Ys.nextEffect}}function Al(){if(90!==Zs){var e=97<Zs?97:Zs;return Zs=90,$i(e,Il)}return!1}function Ll(e,t){Js.push(t,e),Ks||(Ks=!0,Yi(97,(function(){return Al(),null})))}function Rl(e,t){el.push(t,e),Ks||(Ks=!0,Yi(97,(function(){return Al(),null})))}function Il(){if(null===Gs)return!1;var e=Gs;if(Gs=null,0!=(48&Ps))throw Error(a(331));var t=Ps;Ps|=32;var n=el;el=[];for(var r=0;r<n.length;r+=2){var i=n[r],o=n[r+1],s=i.destroy;if(i.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===o)throw Error(a(330));zl(o,e)}}for(n=Js,Js=[],r=0;r<n.length;r+=2){i=n[r],o=n[r+1];try{var l=i.create;i.destroy=l()}catch(e){if(null===o)throw Error(a(330));zl(o,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Ps=t,Xi(),!0}function Nl(e,t,n){co(e,t=us(0,t=as(n,t),1)),t=ul(),null!==(e=fl(e,1))&&(Ht(e,1,t),hl(e,t))}function zl(e,t){if(3===e.tag)Nl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Nl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Qs||!Qs.has(r))){var i=cs(n,e=as(t,e),1);if(co(n,i),i=ul(),null!==(n=fl(n,1)))Ht(n,1,i),hl(n,i);else if("function"==typeof r.componentDidCatch&&(null===Qs||!Qs.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Fl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ul(),e.pingedLanes|=e.suspendedLanes&n,Ts===e&&(As&n)===n&&(4===Is||3===Is&&(62914560&As)===As&&500>Hi()-Hs?_l(e,0):js|=n),hl(e,t)}function Vl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Wi()?1:2:(0===ol&&(ol=zs),0===(t=jt(62914560&~ol))&&(t=4194304))),n=ul(),null!==(e=fl(e,t))&&(Ht(e,t,n),hl(e,n))}function jl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Bl(e,t,n,r){return new jl(e,t,n,r)}function Hl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Wl(e,t){var n=e.alternate;return null===n?((n=Bl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ul(e,t,n,r,i,o){var s=2;if(r=e,"function"==typeof e)Hl(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case S:return $l(n.children,i,o,t);case N:s=8,i|=16;break;case M:s=8,i|=1;break;case E:return(e=Bl(12,n,t,8|i)).elementType=E,e.type=E,e.lanes=o,e;case T:return(e=Bl(13,n,t,i)).type=T,e.elementType=T,e.lanes=o,e;case D:return(e=Bl(19,n,t,i)).elementType=D,e.lanes=o,e;case z:return Yl(n,i,o,t);case F:return(e=Bl(24,n,t,i)).elementType=F,e.lanes=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:s=10;break e;case O:s=9;break e;case P:s=11;break e;case A:s=14;break e;case L:s=16,r=null;break e;case R:s=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Bl(s,n,t,i)).elementType=e,t.type=r,t.lanes=o,t}function $l(e,t,n,r){return(e=Bl(7,e,r,t)).lanes=n,e}function Yl(e,t,n,r){return(e=Bl(23,e,r,t)).elementType=z,e.lanes=n,e}function Xl(e,t,n){return(e=Bl(6,e,null,t)).lanes=n,e}function ql(e,t,n){return(t=Bl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ql(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function Kl(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Gl(e,t,n,r){var i=t.current,o=ul(),s=cl(i);e:if(n){t:{if(Qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(mi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var u=n.type;if(mi(u)){n=yi(n,u,l);break e}}n=l}else n=di;return null===t.context?t.context=n:t.pendingContext=n,(t=uo(o,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),co(i,t),dl(i,s,o),s}function Zl(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Jl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function eu(e,t){Jl(e,t),(e=e.alternate)&&Jl(e,t)}function tu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Ql(e,t,null!=n&&!0===n.hydrate),t=Bl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,so(t),e[Jr]=n.current,Dr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var i=(t=r[e])._getVersion;i=i(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,i]:n.mutableSourceEagerHydrationData.push(t,i)}this._internalRoot=n}function nu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ru(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var s=i;i=function(){var e=Zl(a);s.call(e)}}Gl(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var l=i;i=function(){var e=Zl(a);l.call(e)}}vl((function(){Gl(t,a,e,i)}))}return Zl(a)}function iu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nu(t))throw Error(a(200));return Kl(e,t,null,n)}$s=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||hi.current)Na=!0;else{if(0==(n&r)){switch(Na=!1,t.tag){case 3:Ya(t),Xo();break;case 5:Io(t);break;case 1:mi(t.type)&&xi(t);break;case 4:Lo(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var i=t.type._context;ci(Gi,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ga(e,t,n):(ci(zo,1&zo.current),null!==(t=ns(e,t,n))?t.sibling:null);ci(zo,1&zo.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return ts(e,t,n);t.flags|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),ci(zo,zo.current),r)break;return null;case 23:case 24:return t.lanes=0,Ba(e,t,n)}return ns(e,t,n)}Na=0!=(16384&e.flags)}else Na=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=gi(t,fi.current),io(t,n),i=aa(null,t,r,e,i,n),t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,mi(r)){var o=!0;xi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,so(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&mo(t,r,s,e),i.updater=bo,t.stateNode=i,i._reactInternals=t,_o(t,r,e,n),t=$a(null,t,r,!0,o,n)}else t.tag=0,za(null,t,i,n),t=t.child;return t;case 16:i=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=(o=i._init)(i._payload),t.type=i,o=t.tag=function(e){if("function"==typeof e)return Hl(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===A)return 14}return 2}(i),e=Ki(i,e),o){case 0:t=Wa(null,t,i,e,n);break e;case 1:t=Ua(null,t,i,e,n);break e;case 11:t=Fa(null,t,i,e,n);break e;case 14:t=Va(null,t,i,Ki(i.type,e),r,n);break e}throw Error(a(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,Wa(e,t,r,i=t.elementType===r?i:Ki(r,i),n);case 1:return r=t.type,i=t.pendingProps,Ua(e,t,r,i=t.elementType===r?i:Ki(r,i),n);case 3:if(Ya(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,lo(e,t),ho(t,r,null,n),(r=t.memoizedState.element)===i)Xo(),t=ns(e,t,n);else{if((o=(i=t.stateNode).hydrate)&&(jo=Xr(t.stateNode.containerInfo.firstChild),Vo=t,o=Bo=!0),o){if(null!=(e=i.mutableSourceEagerHydrationData))for(i=0;i<e.length;i+=2)(o=e[i])._workInProgressVersionPrimary=e[i+1],qo.push(o);for(n=Co(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else za(e,t,r,n),Xo();t=t.child}return t;case 5:return Io(t),null===e&&Uo(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,s=i.children,Wr(r,i)?s=null:null!==o&&Wr(r,o)&&(t.flags|=16),Ha(e,t),za(e,t,s,n),t.child;case 6:return null===e&&Uo(t),null;case 13:return Ga(e,t,n);case 4:return Lo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Eo(t,null,r,n):za(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Fa(e,t,r,i=t.elementType===r?i:Ki(r,i),n);case 7:return za(e,t,t.pendingProps,n),t.child;case 8:case 12:return za(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,s=t.memoizedProps,o=i.value;var l=t.type._context;if(ci(Gi,l._currentValue),l._currentValue=o,null!==s)if(l=s.value,0==(o=ur(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(s.children===i.children&&!hi.current){t=ns(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){s=l.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===l.tag&&((c=uo(-1,n&-n)).tag=2,co(l,c)),l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),ro(l.return,n),u.lanes|=n;break}c=c.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}za(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,io(t,n),r=r(i=oo(i,o.unstable_observedBits)),t.flags|=1,za(e,t,r,n),t.child;case 14:return o=Ki(i=t.type,t.pendingProps),Va(e,t,i,o=Ki(i.type,o),r,n);case 15:return ja(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Ki(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,mi(r)?(e=!0,xi(t)):e=!1,io(t,n),yo(t,r,i),_o(t,r,i,n),$a(null,t,r,!0,e,n);case 19:return ts(e,t,n);case 23:case 24:return Ba(e,t,n)}throw Error(a(156,t.tag))},tu.prototype.render=function(e){Gl(e,this._internalRoot,null,null)},tu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Gl(null,e,null,(function(){t[Jr]=null}))},et=function(e){13===e.tag&&(dl(e,4,ul()),eu(e,4))},tt=function(e){13===e.tag&&(dl(e,67108864,ul()),eu(e,67108864))},nt=function(e){if(13===e.tag){var t=ul(),n=cl(e);dl(e,n,t),eu(e,n)}},rt=function(e,t){return t()},Ee=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=ii(r);if(!i)throw Error(a(90));G(r),ne(r,i)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Ae=bl,Le=function(e,t,n,r,i){var o=Ps;Ps|=4;try{return $i(98,e.bind(null,t,n,r,i))}finally{0===(Ps=o)&&(Us(),Xi())}},Re=function(){0==(49&Ps)&&(function(){if(null!==tl){var e=tl;tl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,hl(e,Hi())}))}Xi()}(),Al())},Ie=function(e,t){var n=Ps;Ps|=2;try{return e(t)}finally{0===(Ps=n)&&(Us(),Xi())}};var ou={Events:[ni,ri,ii,Te,De,Al,{current:!1}]},au={findFiberByHostInstance:ti,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},su={bundleType:au.bundleType,version:au.version,rendererPackageName:au.rendererPackageName,rendererConfig:au.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:au.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var lu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!lu.isDisabled&&lu.supportsFiber)try{wi=lu.inject(su),ki=lu}catch(ge){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ou,t.createPortal=iu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ps;if(0!=(48&n))return e(t);Ps|=1;try{if(e)return $i(99,e.bind(null,t))}finally{Ps=n,Xi()}},t.hydrate=function(e,t,n){if(!nu(t))throw Error(a(200));return ru(null,e,t,!0,n)},t.render=function(e,t,n){if(!nu(t))throw Error(a(200));return ru(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nu(e))throw Error(a(40));return!!e._reactRootContainer&&(vl((function(){ru(null,null,e,!1,(function(){e._reactRootContainer=null,e[Jr]=null}))})),!0)},t.unstable_batchedUpdates=bl,t.unstable_createPortal=function(e,t){return iu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!nu(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ru(e,t,n,!1,r)},t.version="17.0.2"},935:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t,n)=>{var r=n(418),i=60103,o=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,s=60110,l=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;i=d("react.element"),o=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),a=d("react.provider"),s=d("react.context"),l=d("react.forward_ref"),t.Suspense=d("react.suspense"),u=d("react.memo"),c=d("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function h(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function m(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||p}function b(){}function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||p}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(h(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=m.prototype;var y=v.prototype=new b;y.constructor=v,r(y,m.prototype),y.isPureReactComponent=!0;var x={current:null},_=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,o={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)_.call(t,r)&&!w.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:s,props:o,_owner:x.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var M=/\/+/g;function E(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,n,r,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case i:case o:l=!0}}if(l)return a=a(l=e),e=""===r?"."+E(l,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(M,"$&/")+"/"),C(a,t,n,"",(function(e){return e}))):null!=a&&(S(a)&&(a=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(M,"$&/")+"/")+e)),t.push(a)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+E(s=e[u],u);l+=C(s,t,n,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(s=e.next()).done;)l+=C(s=s.value,t,n,c=r+E(s,u++),a);else if("object"===s)throw t=""+e,Error(h(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function O(e,t,n){if(null==e)return e;var r=[],i=0;return C(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var T={current:null};function D(){var e=T.current;if(null===e)throw Error(h(321));return e}var A={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(h(143));return e}},t.Component=m,t.PureComponent=v,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=A,t.cloneElement=function(e,t,n){if(null==e)throw Error(h(267,e));var o=r({},e.props),a=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=x.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)_.call(t,c)&&!w.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){u=Array(c);for(var d=0;d<c;d++)u[d]=arguments[d+2];o.children=u}return{$$typeof:i,type:e.type,key:a,ref:s,props:o,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return D().useCallback(e,t)},t.useContext=function(e,t){return D().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return D().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return D().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return D().useLayoutEffect(e,t)},t.useMemo=function(e,t){return D().useMemo(e,t)},t.useReducer=function(e,t,n){return D().useReducer(e,t,n)},t.useRef=function(e){return D().useRef(e)},t.useState=function(e){return D().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{e.exports=n(408)},53:(e,t)=>{var n,r,i,o;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,d=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(d,0))},r=function(e,t){c=setTimeout(e,t)},i=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},o=t.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var p=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof p&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var g=!1,m=null,b=-1,v=5,y=0;t.unstable_shouldYield=function(){return t.unstable_now()>=y},o=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):v=0<e?Math.floor(1e3/e):5};var x=new MessageChannel,_=x.port2;x.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();y=e+v;try{m(!0,e)?_.postMessage(null):(g=!1,m=null)}catch(e){throw _.postMessage(null),e}}else g=!1},n=function(e){m=e,g||(g=!0,_.postMessage(null))},r=function(e,n){b=f((function(){e(t.unstable_now())}),n)},i=function(){h(b),b=-1}}function w(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<M(i,t)))break e;e[r]=t,e[n]=i,n=r}}function k(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],s=o+1,l=e[s];if(void 0!==a&&0>M(a,n))void 0!==l&&0>M(l,a)?(e[r]=l,e[s]=n,r=s):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==l&&0>M(l,n)))break e;e[r]=l,e[s]=n,r=s}}}return t}return null}function M(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var E=[],C=[],O=1,P=null,T=3,D=!1,A=!1,L=!1;function R(e){for(var t=k(C);null!==t;){if(null===t.callback)S(C);else{if(!(t.startTime<=e))break;S(C),t.sortIndex=t.expirationTime,w(E,t)}t=k(C)}}function I(e){if(L=!1,R(e),!A)if(null!==k(E))A=!0,n(N);else{var t=k(C);null!==t&&r(I,t.startTime-e)}}function N(e,n){A=!1,L&&(L=!1,i()),D=!0;var o=T;try{for(R(n),P=k(E);null!==P&&(!(P.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=P.callback;if("function"==typeof a){P.callback=null,T=P.priorityLevel;var s=a(P.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?P.callback=s:P===k(E)&&S(E),R(n)}else S(E);P=k(E)}if(null!==P)var l=!0;else{var u=k(C);null!==u&&r(I,u.startTime-n),l=!1}return l}finally{P=null,T=o,D=!1}}var z=o;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){A||D||(A=!0,n(N))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return k(E)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,o,a){var s=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:O++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>s?(e.sortIndex=a,w(C,e),null===k(E)&&e===k(C)&&(L?i():L=!0,r(I,a-s))):(e.sortIndex=l,w(E,e),A||D||(A=!0,n(N))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},840:(e,t,n)=>{e.exports=n(53)},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},a=[],s=0;s<e.length;s++){var l=e[s],u=r.base?l[0]+r.base:l[0],c=o[u]||0,d="".concat(u," ").concat(c);o[u]=c+1;var f=n(d),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)t[f].references++,t[f].updater(h);else{var p=i(h,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=n(o[a]);t[s].references--}for(var l=r(e,i),u=0;u<o.length;u++){var c=n(o[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=l}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},r={};function i(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={id:e,exports:{}};return n[e](o,o.exports,i),o.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);i.r(o);var a={};e=e||[null,t({}),t([]),t(t)];for(var s=2&r&&n;"object"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,i.d(o,a),o},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{var e=i(294),t=i.t(e,2),n=i(935),r=i(379),o=i.n(r),a=i(795),s=i.n(a),l=i(569),u=i.n(l),c=i(565),d=i.n(c),f=i(216),h=i.n(f),p=i(589),g=i.n(p),m=i(921),b={};b.styleTagTransform=g(),b.setAttributes=d(),b.insert=u().bind(null,"head"),b.domAPI=s(),b.insertStyleElement=h(),o()(m.Z,b),m.Z&&m.Z.locals&&m.Z.locals;const v="undefined"==typeof window?function(e){return e()}:window.requestAnimationFrame;function y(e,t,n){const r=n||(e=>Array.prototype.slice.call(e));let i=!1,o=[];return function(...n){o=r(n),i||(i=!0,v.call(window,(()=>{i=!1,e.apply(t,o)})))}}const x=e=>"start"===e?"left":"end"===e?"right":"center",_=(e,t,n)=>"start"===e?t:"end"===e?n:(t+n)/2;function w(){}const k=function(){let e=0;return function(){return e++}}();function S(e){return null==e}function M(e){if(Array.isArray&&Array.isArray(e))return!0;const t=Object.prototype.toString.call(e);return"[object"===t.substr(0,7)&&"Array]"===t.substr(-6)}function E(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)}const C=e=>("number"==typeof e||e instanceof Number)&&isFinite(+e);function O(e,t){return C(e)?e:t}function P(e,t){return void 0===e?t:e}const T=(e,t)=>"string"==typeof e&&e.endsWith("%")?parseFloat(e)/100*t:+e;function D(e,t,n){if(e&&"function"==typeof e.call)return e.apply(n,t)}function A(e,t,n,r){let i,o,a;if(M(e))if(o=e.length,r)for(i=o-1;i>=0;i--)t.call(n,e[i],i);else for(i=0;i<o;i++)t.call(n,e[i],i);else if(E(e))for(a=Object.keys(e),o=a.length,i=0;i<o;i++)t.call(n,e[a[i]],a[i])}function L(e,t){let n,r,i,o;if(!e||!t||e.length!==t.length)return!1;for(n=0,r=e.length;n<r;++n)if(i=e[n],o=t[n],i.datasetIndex!==o.datasetIndex||i.index!==o.index)return!1;return!0}function R(e){if(M(e))return e.map(R);if(E(e)){const t=Object.create(null),n=Object.keys(e),r=n.length;let i=0;for(;i<r;++i)t[n[i]]=R(e[n[i]]);return t}return e}function I(e){return-1===["__proto__","prototype","constructor"].indexOf(e)}function N(e,t,n,r){if(!I(e))return;const i=t[e],o=n[e];E(i)&&E(o)?z(i,o,r):t[e]=R(o)}function z(e,t,n){const r=M(t)?t:[t],i=r.length;if(!E(e))return e;const o=(n=n||{}).merger||N;for(let a=0;a<i;++a){if(t=r[a],!E(t))continue;const i=Object.keys(t);for(let r=0,a=i.length;r<a;++r)o(i[r],e,t,n)}return e}function F(e,t){return z(e,t,{merger:V})}function V(e,t,n){if(!I(e))return;const r=t[e],i=n[e];E(r)&&E(i)?F(r,i):Object.prototype.hasOwnProperty.call(t,e)||(t[e]=R(i))}function j(e,t){const n=e.indexOf(".",t);return-1===n?e.length:n}function B(e,t){if(""===t)return e;let n=0,r=j(t,n);for(;e&&r>n;)e=e[t.substr(n,r-n)],n=r+1,r=j(t,n);return e}function H(e){return e.charAt(0).toUpperCase()+e.slice(1)}const W=e=>void 0!==e,U=e=>"function"==typeof e,$=Math.PI,Y=2*$,X=Y+$,q=Number.POSITIVE_INFINITY,Q=$/180,K=$/2,G=$/4,Z=2*$/3,J=Math.log10,ee=Math.sign;function te(e){const t=Math.round(e);e=re(e,t,e/1e3)?t:e;const n=Math.pow(10,Math.floor(J(e))),r=e/n;return(r<=1?1:r<=2?2:r<=5?5:10)*n}function ne(e){return!isNaN(parseFloat(e))&&isFinite(e)}function re(e,t,n){return Math.abs(e-t)<n}function ie(e,t,n){let r,i,o;for(r=0,i=e.length;r<i;r++)o=e[r][n],isNaN(o)||(t.min=Math.min(t.min,o),t.max=Math.max(t.max,o))}function oe(e){return e*($/180)}function ae(e){return e*(180/$)}function se(e){if(!C(e))return;let t=1,n=0;for(;Math.round(e*t)/t!==e;)t*=10,n++;return n}function le(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function ue(e,t){return(e-t+X)%Y-$}function ce(e){return(e%Y+Y)%Y}function de(e,t,n,r){const i=ce(e),o=ce(t),a=ce(n),s=ce(o-i),l=ce(a-i),u=ce(i-o),c=ce(i-a);return i===o||i===a||r&&o===a||s>l&&u<c}function fe(e,t,n){return Math.max(t,Math.min(n,e))}const he=e=>0===e||1===e,pe=(e,t,n)=>-Math.pow(2,10*(e-=1))*Math.sin((e-t)*Y/n),ge=(e,t,n)=>Math.pow(2,-10*e)*Math.sin((e-t)*Y/n)+1,me={linear:e=>e,easeInQuad:e=>e*e,easeOutQuad:e=>-e*(e-2),easeInOutQuad:e=>(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1),easeInCubic:e=>e*e*e,easeOutCubic:e=>(e-=1)*e*e+1,easeInOutCubic:e=>(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2),easeInQuart:e=>e*e*e*e,easeOutQuart:e=>-((e-=1)*e*e*e-1),easeInOutQuart:e=>(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2),easeInQuint:e=>e*e*e*e*e,easeOutQuint:e=>(e-=1)*e*e*e*e+1,easeInOutQuint:e=>(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2),easeInSine:e=>1-Math.cos(e*K),easeOutSine:e=>Math.sin(e*K),easeInOutSine:e=>-.5*(Math.cos($*e)-1),easeInExpo:e=>0===e?0:Math.pow(2,10*(e-1)),easeOutExpo:e=>1===e?1:1-Math.pow(2,-10*e),easeInOutExpo:e=>he(e)?e:e<.5?.5*Math.pow(2,10*(2*e-1)):.5*(2-Math.pow(2,-10*(2*e-1))),easeInCirc:e=>e>=1?e:-(Math.sqrt(1-e*e)-1),easeOutCirc:e=>Math.sqrt(1-(e-=1)*e),easeInOutCirc:e=>(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1),easeInElastic:e=>he(e)?e:pe(e,.075,.3),easeOutElastic:e=>he(e)?e:ge(e,.075,.3),easeInOutElastic(e){const t=.1125;return he(e)?e:e<.5?.5*pe(2*e,t,.45):.5+.5*ge(2*e-1,t,.45)},easeInBack(e){const t=1.70158;return e*e*((t+1)*e-t)},easeOutBack(e){const t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack(e){let t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:e=>1-me.easeOutBounce(1-e),easeOutBounce(e){const t=7.5625,n=2.75;return e<1/n?t*e*e:e<2/n?t*(e-=1.5/n)*e+.75:e<2.5/n?t*(e-=2.25/n)*e+.9375:t*(e-=2.625/n)*e+.984375},easeInOutBounce:e=>e<.5?.5*me.easeInBounce(2*e):.5*me.easeOutBounce(2*e-1)+.5},be={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},ve="0123456789ABCDEF",ye=e=>ve[15&e],xe=e=>ve[(240&e)>>4]+ve[15&e],_e=e=>(240&e)>>4==(15&e);function we(e){return e+.5|0}const ke=(e,t,n)=>Math.max(Math.min(e,n),t);function Se(e){return ke(we(2.55*e),0,255)}function Me(e){return ke(we(255*e),0,255)}function Ee(e){return ke(we(e/2.55)/100,0,1)}function Ce(e){return ke(we(100*e),0,100)}const Oe=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,Pe=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function Te(e,t,n){const r=t*Math.min(n,1-n),i=(t,i=(t+e/30)%12)=>n-r*Math.max(Math.min(i-3,9-i,1),-1);return[i(0),i(8),i(4)]}function De(e,t,n){const r=(r,i=(r+e/60)%6)=>n-n*t*Math.max(Math.min(i,4-i,1),0);return[r(5),r(3),r(1)]}function Ae(e,t,n){const r=Te(e,1,.5);let i;for(t+n>1&&(i=1/(t+n),t*=i,n*=i),i=0;i<3;i++)r[i]*=1-t-n,r[i]+=t;return r}function Le(e){const t=e.r/255,n=e.g/255,r=e.b/255,i=Math.max(t,n,r),o=Math.min(t,n,r),a=(i+o)/2;let s,l,u;return i!==o&&(u=i-o,l=a>.5?u/(2-i-o):u/(i+o),s=i===t?(n-r)/u+(n<r?6:0):i===n?(r-t)/u+2:(t-n)/u+4,s=60*s+.5),[0|s,l||0,a]}function Re(e,t,n,r){return(Array.isArray(t)?e(t[0],t[1],t[2]):e(t,n,r)).map(Me)}function Ie(e,t,n){return Re(Te,e,t,n)}function Ne(e){return(e%360+360)%360}const ze={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Fe={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Ve;function je(e,t,n){if(e){let r=Le(e);r[t]=Math.max(0,Math.min(r[t]+r[t]*n,0===t?360:1)),r=Ie(r),e.r=r[0],e.g=r[1],e.b=r[2]}}function Be(e,t){return e?Object.assign(t||{},e):e}function He(e){var t={r:0,g:0,b:0,a:255};return Array.isArray(e)?e.length>=3&&(t={r:e[0],g:e[1],b:e[2],a:255},e.length>3&&(t.a=Me(e[3]))):(t=Be(e,{r:0,g:0,b:0,a:1})).a=Me(t.a),t}function We(e){return"r"===e.charAt(0)?function(e){const t=Oe.exec(e);let n,r,i,o=255;if(t){if(t[7]!==n){const e=+t[7];o=255&(t[8]?Se(e):255*e)}return n=+t[1],r=+t[3],i=+t[5],n=255&(t[2]?Se(n):n),r=255&(t[4]?Se(r):r),i=255&(t[6]?Se(i):i),{r:n,g:r,b:i,a:o}}}(e):function(e){const t=Pe.exec(e);let n,r=255;if(!t)return;t[5]!==n&&(r=t[6]?Se(+t[5]):Me(+t[5]));const i=Ne(+t[2]),o=+t[3]/100,a=+t[4]/100;return n="hwb"===t[1]?function(e,t,n){return Re(Ae,e,t,n)}(i,o,a):"hsv"===t[1]?function(e,t,n){return Re(De,e,t,n)}(i,o,a):Ie(i,o,a),{r:n[0],g:n[1],b:n[2],a:r}}(e)}class Ue{constructor(e){if(e instanceof Ue)return e;const t=typeof e;let n;var r,i,o;"object"===t?n=He(e):"string"===t&&(o=(r=e).length,"#"===r[0]&&(4===o||5===o?i={r:255&17*be[r[1]],g:255&17*be[r[2]],b:255&17*be[r[3]],a:5===o?17*be[r[4]]:255}:7!==o&&9!==o||(i={r:be[r[1]]<<4|be[r[2]],g:be[r[3]]<<4|be[r[4]],b:be[r[5]]<<4|be[r[6]],a:9===o?be[r[7]]<<4|be[r[8]]:255})),n=i||function(e){Ve||(Ve=function(){const e={},t=Object.keys(Fe),n=Object.keys(ze);let r,i,o,a,s;for(r=0;r<t.length;r++){for(a=s=t[r],i=0;i<n.length;i++)o=n[i],s=s.replace(o,ze[o]);o=parseInt(Fe[a],16),e[s]=[o>>16&255,o>>8&255,255&o]}return e}(),Ve.transparent=[0,0,0,0]);const t=Ve[e.toLowerCase()];return t&&{r:t[0],g:t[1],b:t[2],a:4===t.length?t[3]:255}}(e)||We(e)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var e=Be(this._rgb);return e&&(e.a=Ee(e.a)),e}set rgb(e){this._rgb=He(e)}rgbString(){return this._valid?(e=this._rgb)&&(e.a<255?`rgba(${e.r}, ${e.g}, ${e.b}, ${Ee(e.a)})`:`rgb(${e.r}, ${e.g}, ${e.b})`):this._rgb;var e}hexString(){return this._valid?(e=this._rgb,t=function(e){return _e(e.r)&&_e(e.g)&&_e(e.b)&&_e(e.a)}(e)?ye:xe,e?"#"+t(e.r)+t(e.g)+t(e.b)+(e.a<255?t(e.a):""):e):this._rgb;var e,t}hslString(){return this._valid?function(e){if(!e)return;const t=Le(e),n=t[0],r=Ce(t[1]),i=Ce(t[2]);return e.a<255?`hsla(${n}, ${r}%, ${i}%, ${Ee(e.a)})`:`hsl(${n}, ${r}%, ${i}%)`}(this._rgb):this._rgb}mix(e,t){const n=this;if(e){const r=n.rgb,i=e.rgb;let o;const a=t===o?.5:t,s=2*a-1,l=r.a-i.a,u=((s*l==-1?s:(s+l)/(1+s*l))+1)/2;o=1-u,r.r=255&u*r.r+o*i.r+.5,r.g=255&u*r.g+o*i.g+.5,r.b=255&u*r.b+o*i.b+.5,r.a=a*r.a+(1-a)*i.a,n.rgb=r}return n}clone(){return new Ue(this.rgb)}alpha(e){return this._rgb.a=Me(e),this}clearer(e){return this._rgb.a*=1-e,this}greyscale(){const e=this._rgb,t=we(.3*e.r+.59*e.g+.11*e.b);return e.r=e.g=e.b=t,this}opaquer(e){return this._rgb.a*=1+e,this}negate(){const e=this._rgb;return e.r=255-e.r,e.g=255-e.g,e.b=255-e.b,this}lighten(e){return je(this._rgb,2,e),this}darken(e){return je(this._rgb,2,-e),this}saturate(e){return je(this._rgb,1,e),this}desaturate(e){return je(this._rgb,1,-e),this}rotate(e){return function(e,t){var n=Le(e);n[0]=Ne(n[0]+t),n=Ie(n),e.r=n[0],e.g=n[1],e.b=n[2]}(this._rgb,e),this}}function $e(e){return new Ue(e)}const Ye=e=>e instanceof CanvasGradient||e instanceof CanvasPattern;function Xe(e){return Ye(e)?e:$e(e)}function qe(e){return Ye(e)?e:$e(e).saturate(.5).darken(.1).hexString()}const Qe=Object.create(null),Ke=Object.create(null);function Ge(e,t){if(!t)return e;const n=t.split(".");for(let t=0,r=n.length;t<r;++t){const r=n[t];e=e[r]||(e[r]=Object.create(null))}return e}function Ze(e,t,n){return"string"==typeof t?z(Ge(e,t),n):z(Ge(e,""),t)}var Je=new class{constructor(e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=e=>e.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(e,t)=>qe(t.backgroundColor),this.hoverBorderColor=(e,t)=>qe(t.borderColor),this.hoverColor=(e,t)=>qe(t.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.describe(e)}set(e,t){return Ze(this,e,t)}get(e){return Ge(this,e)}describe(e,t){return Ze(Ke,e,t)}override(e,t){return Ze(Qe,e,t)}route(e,t,n,r){const i=Ge(this,e),o=Ge(this,n),a="_"+t;Object.defineProperties(i,{[a]:{value:i[t],writable:!0},[t]:{enumerable:!0,get(){const e=this[a],t=o[r];return E(e)?Object.assign({},t,e):P(e,t)},set(e){this[a]=e}}})}}({_scriptable:e=>!e.startsWith("on"),_indexable:e=>"events"!==e,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function et(e,t,n,r,i){let o=t[i];return o||(o=t[i]=e.measureText(i).width,n.push(i)),o>r&&(r=o),r}function tt(e,t,n,r){let i=(r=r||{}).data=r.data||{},o=r.garbageCollect=r.garbageCollect||[];r.font!==t&&(i=r.data={},o=r.garbageCollect=[],r.font=t),e.save(),e.font=t;let a=0;const s=n.length;let l,u,c,d,f;for(l=0;l<s;l++)if(d=n[l],null!=d&&!0!==M(d))a=et(e,i,o,a,d);else if(M(d))for(u=0,c=d.length;u<c;u++)f=d[u],null==f||M(f)||(a=et(e,i,o,a,f));e.restore();const h=o.length/2;if(h>n.length){for(l=0;l<h;l++)delete i[o[l]];o.splice(0,h)}return a}function nt(e,t,n){const r=e.currentDevicePixelRatio,i=0!==n?Math.max(n/2,.5):0;return Math.round((t-i)*r)/r+i}function rt(e,t){(t=t||e.getContext("2d")).save(),t.resetTransform(),t.clearRect(0,0,e.width,e.height),t.restore()}function it(e,t,n,r){let i,o,a,s,l;const u=t.pointStyle,c=t.rotation,d=t.radius;let f=(c||0)*Q;if(u&&"object"==typeof u&&(i=u.toString(),"[object HTMLImageElement]"===i||"[object HTMLCanvasElement]"===i))return e.save(),e.translate(n,r),e.rotate(f),e.drawImage(u,-u.width/2,-u.height/2,u.width,u.height),void e.restore();if(!(isNaN(d)||d<=0)){switch(e.beginPath(),u){default:e.arc(n,r,d,0,Y),e.closePath();break;case"triangle":e.moveTo(n+Math.sin(f)*d,r-Math.cos(f)*d),f+=Z,e.lineTo(n+Math.sin(f)*d,r-Math.cos(f)*d),f+=Z,e.lineTo(n+Math.sin(f)*d,r-Math.cos(f)*d),e.closePath();break;case"rectRounded":l=.516*d,s=d-l,o=Math.cos(f+G)*s,a=Math.sin(f+G)*s,e.arc(n-o,r-a,l,f-$,f-K),e.arc(n+a,r-o,l,f-K,f),e.arc(n+o,r+a,l,f,f+K),e.arc(n-a,r+o,l,f+K,f+$),e.closePath();break;case"rect":if(!c){s=Math.SQRT1_2*d,e.rect(n-s,r-s,2*s,2*s);break}f+=G;case"rectRot":o=Math.cos(f)*d,a=Math.sin(f)*d,e.moveTo(n-o,r-a),e.lineTo(n+a,r-o),e.lineTo(n+o,r+a),e.lineTo(n-a,r+o),e.closePath();break;case"crossRot":f+=G;case"cross":o=Math.cos(f)*d,a=Math.sin(f)*d,e.moveTo(n-o,r-a),e.lineTo(n+o,r+a),e.moveTo(n+a,r-o),e.lineTo(n-a,r+o);break;case"star":o=Math.cos(f)*d,a=Math.sin(f)*d,e.moveTo(n-o,r-a),e.lineTo(n+o,r+a),e.moveTo(n+a,r-o),e.lineTo(n-a,r+o),f+=G,o=Math.cos(f)*d,a=Math.sin(f)*d,e.moveTo(n-o,r-a),e.lineTo(n+o,r+a),e.moveTo(n+a,r-o),e.lineTo(n-a,r+o);break;case"line":o=Math.cos(f)*d,a=Math.sin(f)*d,e.moveTo(n-o,r-a),e.lineTo(n+o,r+a);break;case"dash":e.moveTo(n,r),e.lineTo(n+Math.cos(f)*d,r+Math.sin(f)*d)}e.fill(),t.borderWidth>0&&e.stroke()}}function ot(e,t,n){return n=n||.5,!t||e&&e.x>t.left-n&&e.x<t.right+n&&e.y>t.top-n&&e.y<t.bottom+n}function at(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()}function st(e){e.restore()}function lt(e,t,n,r,i){if(!t)return e.lineTo(n.x,n.y);if("middle"===i){const r=(t.x+n.x)/2;e.lineTo(r,t.y),e.lineTo(r,n.y)}else"after"===i!=!!r?e.lineTo(t.x,n.y):e.lineTo(n.x,t.y);e.lineTo(n.x,n.y)}function ut(e,t,n,r){if(!t)return e.lineTo(n.x,n.y);e.bezierCurveTo(r?t.cp1x:t.cp2x,r?t.cp1y:t.cp2y,r?n.cp2x:n.cp1x,r?n.cp2y:n.cp1y,n.x,n.y)}function ct(e,t,n,r,i,o={}){const a=M(t)?t:[t],s=o.strokeWidth>0&&""!==o.strokeColor;let l,u;for(e.save(),e.font=i.string,function(e,t){t.translation&&e.translate(t.translation[0],t.translation[1]),S(t.rotation)||e.rotate(t.rotation),t.color&&(e.fillStyle=t.color),t.textAlign&&(e.textAlign=t.textAlign),t.textBaseline&&(e.textBaseline=t.textBaseline)}(e,o),l=0;l<a.length;++l)u=a[l],s&&(o.strokeColor&&(e.strokeStyle=o.strokeColor),S(o.strokeWidth)||(e.lineWidth=o.strokeWidth),e.strokeText(u,n,r,o.maxWidth)),e.fillText(u,n,r,o.maxWidth),dt(e,n,r,u,o),r+=i.lineHeight;e.restore()}function dt(e,t,n,r,i){if(i.strikethrough||i.underline){const o=e.measureText(r),a=t-o.actualBoundingBoxLeft,s=t+o.actualBoundingBoxRight,l=n-o.actualBoundingBoxAscent,u=n+o.actualBoundingBoxDescent,c=i.strikethrough?(l+u)/2:u;e.strokeStyle=e.fillStyle,e.beginPath(),e.lineWidth=i.decorationWidth||2,e.moveTo(a,c),e.lineTo(s,c),e.stroke()}}function ft(e,t){const{x:n,y:r,w:i,h:o,radius:a}=t;e.arc(n+a.topLeft,r+a.topLeft,a.topLeft,-K,$,!0),e.lineTo(n,r+o-a.bottomLeft),e.arc(n+a.bottomLeft,r+o-a.bottomLeft,a.bottomLeft,$,K,!0),e.lineTo(n+i-a.bottomRight,r+o),e.arc(n+i-a.bottomRight,r+o-a.bottomRight,a.bottomRight,K,0,!0),e.lineTo(n+i,r+a.topRight),e.arc(n+i-a.topRight,r+a.topRight,a.topRight,0,-K,!0),e.lineTo(n+a.topLeft,r)}const ht=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),pt=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function gt(e,t){const n=(""+e).match(ht);if(!n||"normal"===n[1])return 1.2*t;switch(e=+n[2],n[3]){case"px":return e;case"%":e/=100}return t*e}function mt(e,t){const n={},r=E(t),i=r?Object.keys(t):t,o=E(e)?r?n=>P(e[n],e[t[n]]):t=>e[t]:()=>e;for(const e of i)n[e]=+o(e)||0;return n}function bt(e){return mt(e,{top:"y",right:"x",bottom:"y",left:"x"})}function vt(e){return mt(e,["topLeft","topRight","bottomLeft","bottomRight"])}function yt(e){const t=bt(e);return t.width=t.left+t.right,t.height=t.top+t.bottom,t}function xt(e,t){e=e||{},t=t||Je.font;let n=P(e.size,t.size);"string"==typeof n&&(n=parseInt(n,10));let r=P(e.style,t.style);r&&!(""+r).match(pt)&&(console.warn('Invalid font style specified: "'+r+'"'),r="");const i={family:P(e.family,t.family),lineHeight:gt(P(e.lineHeight,t.lineHeight),n),size:n,style:r,weight:P(e.weight,t.weight),string:""};return i.string=function(e){return!e||S(e.size)||S(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family}(i),i}function _t(e,t,n,r){let i,o,a,s=!0;for(i=0,o=e.length;i<o;++i)if(a=e[i],void 0!==a&&(void 0!==t&&"function"==typeof a&&(a=a(t),s=!1),void 0!==n&&M(a)&&(a=a[n%a.length],s=!1),void 0!==a))return r&&!s&&(r.cacheable=!1),a}function wt(e,t,n){n=n||(n=>e[n]<t);let r,i=e.length-1,o=0;for(;i-o>1;)r=o+i>>1,n(r)?o=r:i=r;return{lo:o,hi:i}}const kt=(e,t,n)=>wt(e,n,(r=>e[r][t]<n)),St=(e,t,n)=>wt(e,n,(r=>e[r][t]>=n)),Mt=["push","pop","shift","splice","unshift"];function Et(e,t){const n=e._chartjs;if(!n)return;const r=n.listeners,i=r.indexOf(t);-1!==i&&r.splice(i,1),r.length>0||(Mt.forEach((t=>{delete e[t]})),delete e._chartjs)}function Ct(e){const t=new Set;let n,r;for(n=0,r=e.length;n<r;++n)t.add(e[n]);return t.size===r?e:Array.from(t)}function Ot(e,t=[""],n=e,r,i=(()=>e[0])){W(r)||(r=Vt("_fallback",e));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:e,_rootScopes:n,_fallback:r,_getTarget:i,override:i=>Ot([i,...e],t,n,r)};return new Proxy(o,{deleteProperty:(t,n)=>(delete t[n],delete t._keys,delete e[0][n],!0),get:(n,r)=>Lt(n,r,(()=>function(e,t,n,r){let i;for(const o of t)if(i=Vt(Dt(o,e),n),W(i))return At(e,i)?zt(n,r,e,i):i}(r,t,e,n))),getOwnPropertyDescriptor:(e,t)=>Reflect.getOwnPropertyDescriptor(e._scopes[0],t),getPrototypeOf:()=>Reflect.getPrototypeOf(e[0]),has:(e,t)=>jt(e).includes(t),ownKeys:e=>jt(e),set:(e,t,n)=>((e._storage||(e._storage=i()))[t]=n,delete e[t],delete e._keys,!0)})}function Pt(e,t,n,r){const i={_cacheable:!1,_proxy:e,_context:t,_subProxy:n,_stack:new Set,_descriptors:Tt(e,r),setContext:t=>Pt(e,t,n,r),override:i=>Pt(e.override(i),t,n,r)};return new Proxy(i,{deleteProperty:(t,n)=>(delete t[n],delete e[n],!0),get:(e,t,n)=>Lt(e,t,(()=>function(e,t,n){const{_proxy:r,_context:i,_subProxy:o,_descriptors:a}=e;let s=r[t];return U(s)&&a.isScriptable(t)&&(s=function(e,t,n,r){const{_proxy:i,_context:o,_subProxy:a,_stack:s}=n;if(s.has(e))throw new Error("Recursion detected: "+Array.from(s).join("->")+"->"+e);return s.add(e),t=t(o,a||r),s.delete(e),E(t)&&(t=zt(i._scopes,i,e,t)),t}(t,s,e,n)),M(s)&&s.length&&(s=function(e,t,n,r){const{_proxy:i,_context:o,_subProxy:a,_descriptors:s}=n;if(W(o.index)&&r(e))t=t[o.index%t.length];else if(E(t[0])){const n=t,r=i._scopes.filter((e=>e!==n));t=[];for(const l of n){const n=zt(r,i,e,l);t.push(Pt(n,o,a&&a[e],s))}}return t}(t,s,e,a.isIndexable)),At(t,s)&&(s=Pt(s,i,o&&o[t],a)),s}(e,t,n))),getOwnPropertyDescriptor:(t,n)=>t._descriptors.allKeys?Reflect.has(e,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(e,n),getPrototypeOf:()=>Reflect.getPrototypeOf(e),has:(t,n)=>Reflect.has(e,n),ownKeys:()=>Reflect.ownKeys(e),set:(t,n,r)=>(e[n]=r,delete t[n],!0)})}function Tt(e,t={scriptable:!0,indexable:!0}){const{_scriptable:n=t.scriptable,_indexable:r=t.indexable,_allKeys:i=t.allKeys}=e;return{allKeys:i,scriptable:n,indexable:r,isScriptable:U(n)?n:()=>n,isIndexable:U(r)?r:()=>r}}const Dt=(e,t)=>e?e+H(t):t,At=(e,t)=>E(t)&&"adapters"!==e;function Lt(e,t,n){let r=e[t];return W(r)||(r=n(),W(r)&&(e[t]=r)),r}function Rt(e,t,n){return U(e)?e(t,n):e}const It=(e,t)=>!0===e?t:"string"==typeof e?B(t,e):void 0;function Nt(e,t,n,r){for(const i of t){const t=It(n,i);if(t){e.add(t);const i=Rt(t._fallback,n,t);if(W(i)&&i!==n&&i!==r)return i}else if(!1===t&&W(r)&&n!==r)return null}return!1}function zt(e,t,n,r){const i=t._rootScopes,o=Rt(t._fallback,n,r),a=[...e,...i],s=new Set;s.add(r);let l=Ft(s,a,n,o||n);return null!==l&&(!W(o)||o===n||(l=Ft(s,a,o,l),null!==l))&&Ot(Array.from(s),[""],i,o,(()=>function(e,t,n){const r=e._getTarget();t in r||(r[t]={});const i=r[t];return M(i)&&E(n)?n:i}(t,n,r)))}function Ft(e,t,n,r){for(;n;)n=Nt(e,t,n,r);return n}function Vt(e,t){for(const n of t){if(!n)continue;const t=n[e];if(W(t))return t}}function jt(e){let t=e._keys;return t||(t=e._keys=function(e){const t=new Set;for(const n of e)for(const e of Object.keys(n).filter((e=>!e.startsWith("_"))))t.add(e);return Array.from(t)}(e._scopes)),t}const Bt=Number.EPSILON||1e-14,Ht=(e,t)=>t<e.length&&!e[t].skip&&e[t],Wt=e=>"x"===e?"y":"x";function Ut(e,t,n,r){const i=e.skip?t:e,o=t,a=n.skip?t:n,s=le(o,i),l=le(a,o);let u=s/(s+l),c=l/(s+l);u=isNaN(u)?0:u,c=isNaN(c)?0:c;const d=r*u,f=r*c;return{previous:{x:o.x-d*(a.x-i.x),y:o.y-d*(a.y-i.y)},next:{x:o.x+f*(a.x-i.x),y:o.y+f*(a.y-i.y)}}}function $t(e,t,n){return Math.max(Math.min(e,n),t)}function Yt(e,t,n,r,i){let o,a,s,l;if(t.spanGaps&&(e=e.filter((e=>!e.skip))),"monotone"===t.cubicInterpolationMode)!function(e,t="x"){const n=Wt(t),r=e.length,i=Array(r).fill(0),o=Array(r);let a,s,l,u=Ht(e,0);for(a=0;a<r;++a)if(s=l,l=u,u=Ht(e,a+1),l){if(u){const e=u[t]-l[t];i[a]=0!==e?(u[n]-l[n])/e:0}o[a]=s?u?ee(i[a-1])!==ee(i[a])?0:(i[a-1]+i[a])/2:i[a-1]:i[a]}!function(e,t,n){const r=e.length;let i,o,a,s,l,u=Ht(e,0);for(let c=0;c<r-1;++c)l=u,u=Ht(e,c+1),l&&u&&(re(t[c],0,Bt)?n[c]=n[c+1]=0:(i=n[c]/t[c],o=n[c+1]/t[c],s=Math.pow(i,2)+Math.pow(o,2),s<=9||(a=3/Math.sqrt(s),n[c]=i*a*t[c],n[c+1]=o*a*t[c])))}(e,i,o),function(e,t,n="x"){const r=Wt(n),i=e.length;let o,a,s,l=Ht(e,0);for(let u=0;u<i;++u){if(a=s,s=l,l=Ht(e,u+1),!s)continue;const i=s[n],c=s[r];a&&(o=(i-a[n])/3,s[`cp1${n}`]=i-o,s[`cp1${r}`]=c-o*t[u]),l&&(o=(l[n]-i)/3,s[`cp2${n}`]=i+o,s[`cp2${r}`]=c+o*t[u])}}(e,o,t)}(e,i);else{let n=r?e[e.length-1]:e[0];for(o=0,a=e.length;o<a;++o)s=e[o],l=Ut(n,s,e[Math.min(o+1,a-(r?0:1))%a],t.tension),s.cp1x=l.previous.x,s.cp1y=l.previous.y,s.cp2x=l.next.x,s.cp2y=l.next.y,n=s}t.capBezierPoints&&function(e,t){let n,r,i,o,a,s=ot(e[0],t);for(n=0,r=e.length;n<r;++n)a=o,o=s,s=n<r-1&&ot(e[n+1],t),o&&(i=e[n],a&&(i.cp1x=$t(i.cp1x,t.left,t.right),i.cp1y=$t(i.cp1y,t.top,t.bottom)),s&&(i.cp2x=$t(i.cp2x,t.left,t.right),i.cp2y=$t(i.cp2y,t.top,t.bottom)))}(e,n)}function Xt(){return"undefined"!=typeof window&&"undefined"!=typeof document}function qt(e){let t=e.parentNode;return t&&"[object ShadowRoot]"===t.toString()&&(t=t.host),t}function Qt(e,t,n){let r;return"string"==typeof e?(r=parseInt(e,10),-1!==e.indexOf("%")&&(r=r/100*t.parentNode[n])):r=e,r}const Kt=e=>window.getComputedStyle(e,null),Gt=["top","right","bottom","left"];function Zt(e,t,n){const r={};n=n?"-"+n:"";for(let i=0;i<4;i++){const o=Gt[i];r[o]=parseFloat(e[t+"-"+o+n])||0}return r.width=r.left+r.right,r.height=r.top+r.bottom,r}function Jt(e,t){const{canvas:n,currentDevicePixelRatio:r}=t,i=Kt(n),o="border-box"===i.boxSizing,a=Zt(i,"padding"),s=Zt(i,"border","width"),{x:l,y:u,box:c}=function(e,t){const n=e.native||e,r=n.touches,i=r&&r.length?r[0]:n,{offsetX:o,offsetY:a}=i;let s,l,u=!1;if(((e,t,n)=>(e>0||t>0)&&(!n||!n.shadowRoot))(o,a,n.target))s=o,l=a;else{const e=t.getBoundingClientRect();s=i.clientX-e.left,l=i.clientY-e.top,u=!0}return{x:s,y:l,box:u}}(e,n),d=a.left+(c&&s.left),f=a.top+(c&&s.top);let{width:h,height:p}=t;return o&&(h-=a.width+s.width,p-=a.height+s.height),{x:Math.round((l-d)/h*n.width/r),y:Math.round((u-f)/p*n.height/r)}}const en=e=>Math.round(10*e)/10;function tn(e,t,n){const r=t||1,i=Math.floor(e.height*r),o=Math.floor(e.width*r);e.height=i/r,e.width=o/r;const a=e.canvas;return a.style&&(n||!a.style.height&&!a.style.width)&&(a.style.height=`${e.height}px`,a.style.width=`${e.width}px`),(e.currentDevicePixelRatio!==r||a.height!==i||a.width!==o)&&(e.currentDevicePixelRatio=r,a.height=i,a.width=o,e.ctx.setTransform(r,0,0,r,0,0),!0)}const nn=function(){let e=!1;try{const t={get passive(){return e=!0,!1}};window.addEventListener("test",null,t),window.removeEventListener("test",null,t)}catch(e){}return e}();function rn(e,t){const n=function(e,t){return Kt(e).getPropertyValue(t)}(e,t),r=n&&n.match(/^(\d+)(\.\d+)?px$/);return r?+r[1]:void 0}function on(e,t,n,r){return{x:e.x+n*(t.x-e.x),y:e.y+n*(t.y-e.y)}}function an(e,t,n,r){return{x:e.x+n*(t.x-e.x),y:"middle"===r?n<.5?e.y:t.y:"after"===r?n<1?e.y:t.y:n>0?t.y:e.y}}function sn(e,t,n,r){const i={x:e.cp2x,y:e.cp2y},o={x:t.cp1x,y:t.cp1y},a=on(e,i,n),s=on(i,o,n),l=on(o,t,n),u=on(a,s,n),c=on(s,l,n);return on(u,c,n)}const ln=new Map;function un(e,t,n){return function(e,t){t=t||{};const n=e+JSON.stringify(t);let r=ln.get(n);return r||(r=new Intl.NumberFormat(e,t),ln.set(n,r)),r}(t,n).format(e)}function cn(e,t,n){return e?function(e,t){return{x:n=>e+e+t-n,setWidth(e){t=e},textAlign:e=>"center"===e?e:"right"===e?"left":"right",xPlus:(e,t)=>e-t,leftForLtr:(e,t)=>e-t}}(t,n):{x:e=>e,setWidth(e){},textAlign:e=>e,xPlus:(e,t)=>e+t,leftForLtr:(e,t)=>e}}function dn(e,t){let n,r;"ltr"!==t&&"rtl"!==t||(n=e.canvas.style,r=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",t,"important"),e.prevTextDirection=r)}function fn(e,t){void 0!==t&&(delete e.prevTextDirection,e.canvas.style.setProperty("direction",t[0],t[1]))}function hn(e){return"angle"===e?{between:de,compare:ue,normalize:ce}:{between:(e,t,n)=>e>=Math.min(t,n)&&e<=Math.max(n,t),compare:(e,t)=>e-t,normalize:e=>e}}function pn({start:e,end:t,count:n,loop:r,style:i}){return{start:e%n,end:t%n,loop:r&&(t-e+1)%n==0,style:i}}function gn(e,t,n){if(!n)return[e];const{property:r,start:i,end:o}=n,a=t.length,{compare:s,between:l,normalize:u}=hn(r),{start:c,end:d,loop:f,style:h}=function(e,t,n){const{property:r,start:i,end:o}=n,{between:a,normalize:s}=hn(r),l=t.length;let u,c,{start:d,end:f,loop:h}=e;if(h){for(d+=l,f+=l,u=0,c=l;u<c&&a(s(t[d%l][r]),i,o);++u)d--,f--;d%=l,f%=l}return f<d&&(f+=l),{start:d,end:f,loop:h,style:e.style}}(e,t,n),p=[];let g,m,b,v=!1,y=null;for(let e=c,n=c;e<=d;++e)m=t[e%a],m.skip||(g=u(m[r]),g!==b&&(v=l(g,i,o),null===y&&(v||l(i,b,g)&&0!==s(i,b))&&(y=0===s(g,i)?e:n),null!==y&&(!v||0===s(o,g)||l(o,b,g))&&(p.push(pn({start:y,end:e,loop:f,count:a,style:h})),y=null),n=e,b=g));return null!==y&&p.push(pn({start:y,end:d,loop:f,count:a,style:h})),p}function mn(e,t){const n=[],r=e.segments;for(let i=0;i<r.length;i++){const o=gn(r[i],e.points,t);o.length&&n.push(...o)}return n}function bn(e){return{backgroundColor:e.backgroundColor,borderCapStyle:e.borderCapStyle,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderJoinStyle:e.borderJoinStyle,borderWidth:e.borderWidth,borderColor:e.borderColor}}function vn(e,t){return t&&JSON.stringify(e)!==JSON.stringify(t)}var yn=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(e,t,n,r){const i=t.listeners[r],o=t.duration;i.forEach((r=>r({chart:e,initial:t.initial,numSteps:o,currentStep:Math.min(n-t.start,o)})))}_refresh(){const e=this;e._request||(e._running=!0,e._request=v.call(window,(()=>{e._update(),e._request=null,e._running&&e._refresh()})))}_update(e=Date.now()){const t=this;let n=0;t._charts.forEach(((r,i)=>{if(!r.running||!r.items.length)return;const o=r.items;let a,s=o.length-1,l=!1;for(;s>=0;--s)a=o[s],a._active?(a._total>r.duration&&(r.duration=a._total),a.tick(e),l=!0):(o[s]=o[o.length-1],o.pop());l&&(i.draw(),t._notify(i,r,e,"progress")),o.length||(r.running=!1,t._notify(i,r,e,"complete"),r.initial=!1),n+=o.length})),t._lastDate=e,0===n&&(t._running=!1)}_getAnims(e){const t=this._charts;let n=t.get(e);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},t.set(e,n)),n}listen(e,t,n){this._getAnims(e).listeners[t].push(n)}add(e,t){t&&t.length&&this._getAnims(e).items.push(...t)}has(e){return this._getAnims(e).items.length>0}start(e){const t=this._charts.get(e);t&&(t.running=!0,t.start=Date.now(),t.duration=t.items.reduce(((e,t)=>Math.max(e,t._duration)),0),this._refresh())}running(e){if(!this._running)return!1;const t=this._charts.get(e);return!!(t&&t.running&&t.items.length)}stop(e){const t=this._charts.get(e);if(!t||!t.items.length)return;const n=t.items;let r=n.length-1;for(;r>=0;--r)n[r].cancel();t.items=[],this._notify(e,t,Date.now(),"complete")}remove(e){return this._charts.delete(e)}};const xn="transparent",_n={boolean:(e,t,n)=>n>.5?t:e,color(e,t,n){const r=Xe(e||xn),i=r.valid&&Xe(t||xn);return i&&i.valid?i.mix(r,n).hexString():t},number:(e,t,n)=>e+(t-e)*n};class wn{constructor(e,t,n,r){const i=t[n];r=_t([e.to,r,i,e.from]);const o=_t([e.from,i,r]);this._active=!0,this._fn=e.fn||_n[e.type||typeof o],this._easing=me[e.easing]||me.linear,this._start=Math.floor(Date.now()+(e.delay||0)),this._duration=this._total=Math.floor(e.duration),this._loop=!!e.loop,this._target=t,this._prop=n,this._from=o,this._to=r,this._promises=void 0}active(){return this._active}update(e,t,n){const r=this;if(r._active){r._notify(!1);const i=r._target[r._prop],o=n-r._start,a=r._duration-o;r._start=n,r._duration=Math.floor(Math.max(a,e.duration)),r._total+=o,r._loop=!!e.loop,r._to=_t([e.to,t,i,e.from]),r._from=_t([e.from,i,t])}}cancel(){const e=this;e._active&&(e.tick(Date.now()),e._active=!1,e._notify(!1))}tick(e){const t=this,n=e-t._start,r=t._duration,i=t._prop,o=t._from,a=t._loop,s=t._to;let l;if(t._active=o!==s&&(a||n<r),!t._active)return t._target[i]=s,void t._notify(!0);n<0?t._target[i]=o:(l=n/r%2,l=a&&l>1?2-l:l,l=t._easing(Math.min(1,Math.max(0,l))),t._target[i]=t._fn(o,s,l))}wait(){const e=this._promises||(this._promises=[]);return new Promise(((t,n)=>{e.push({res:t,rej:n})}))}_notify(e){const t=e?"res":"rej",n=this._promises||[];for(let e=0;e<n.length;e++)n[e][t]()}}Je.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const kn=Object.keys(Je.animation);Je.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:e=>"onProgress"!==e&&"onComplete"!==e&&"fn"!==e}),Je.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),Je.describe("animations",{_fallback:"animation"}),Je.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:e=>0|e}}}});class Sn{constructor(e,t){this._chart=e,this._properties=new Map,this.configure(t)}configure(e){if(!E(e))return;const t=this._properties;Object.getOwnPropertyNames(e).forEach((n=>{const r=e[n];if(!E(r))return;const i={};for(const e of kn)i[e]=r[e];(M(r.properties)&&r.properties||[n]).forEach((e=>{e!==n&&t.has(e)||t.set(e,i)}))}))}_animateOptions(e,t){const n=t.options,r=function(e,t){if(!t)return;let n=e.options;if(n)return n.$shared&&(e.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;e.options=t}(e,n);if(!r)return[];const i=this._createAnimations(r,n);return n.$shared&&function(e,t){const n=[],r=Object.keys(t);for(let t=0;t<r.length;t++){const i=e[r[t]];i&&i.active()&&n.push(i.wait())}return Promise.all(n)}(e.options.$animations,n).then((()=>{e.options=n}),(()=>{})),i}_createAnimations(e,t){const n=this._properties,r=[],i=e.$animations||(e.$animations={}),o=Object.keys(t),a=Date.now();let s;for(s=o.length-1;s>=0;--s){const l=o[s];if("$"===l.charAt(0))continue;if("options"===l){r.push(...this._animateOptions(e,t));continue}const u=t[l];let c=i[l];const d=n.get(l);if(c){if(d&&c.active()){c.update(d,u,a);continue}c.cancel()}d&&d.duration?(i[l]=c=new wn(d,e,l,u),r.push(c)):e[l]=u}return r}update(e,t){if(0===this._properties.size)return void Object.assign(e,t);const n=this._createAnimations(e,t);return n.length?(yn.add(this._chart,n),!0):void 0}}function Mn(e,t){const n=e&&e.options||{},r=n.reverse,i=void 0===n.min?t:0,o=void 0===n.max?t:0;return{start:r?o:i,end:r?i:o}}function En(e,t){const n=[],r=e._getSortedDatasetMetas(t);let i,o;for(i=0,o=r.length;i<o;++i)n.push(r[i].index);return n}function Cn(e,t,n,r){const i=e.keys,o="single"===r.mode;let a,s,l,u;if(null!==t){for(a=0,s=i.length;a<s;++a){if(l=+i[a],l===n){if(r.all)continue;break}u=e.values[l],C(u)&&(o||0===t||ee(t)===ee(u))&&(t+=u)}return t}}function On(e,t){const n=e&&e.options.stacked;return n||void 0===n&&void 0!==t.stack}function Pn(e,t,n){const r=e[t]||(e[t]={});return r[n]||(r[n]={})}function Tn(e,t,n){for(const r of t.getMatchingVisibleMetas("bar").reverse()){const t=e[r.index];if(n&&t>0||!n&&t<0)return r.index}return null}function Dn(e,t){const{chart:n,_cachedMeta:r}=e,i=n._stacks||(n._stacks={}),{iScale:o,vScale:a,index:s}=r,l=o.axis,u=a.axis,c=function(e,t,n){return`${e.id}.${t.id}.${n.stack||n.type}`}(o,a,r),d=t.length;let f;for(let e=0;e<d;++e){const n=t[e],{[l]:r,[u]:o}=n;f=(n._stacks||(n._stacks={}))[u]=Pn(i,c,r),f[s]=o,f._top=Tn(f,a,!0),f._bottom=Tn(f,a,!1)}}function An(e,t){const n=e.scales;return Object.keys(n).filter((e=>n[e].axis===t)).shift()}function Ln(e,t){const n=e.controller.index,r=e.vScale&&e.vScale.axis;if(r){t=t||e._parsed;for(const e of t){const t=e._stacks;if(!t||void 0===t[r]||void 0===t[r][n])return;delete t[r][n]}}}const Rn=e=>"reset"===e||"none"===e,In=(e,t)=>t?e:Object.assign({},e);class Nn{constructor(e,t){this.chart=e,this._ctx=e.ctx,this.index=t,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const e=this,t=e._cachedMeta;e.configure(),e.linkScales(),t._stacked=On(t.vScale,t),e.addElements()}updateIndex(e){this.index!==e&&Ln(this._cachedMeta),this.index=e}linkScales(){const e=this,t=e.chart,n=e._cachedMeta,r=e.getDataset(),i=(e,t,n,r)=>"x"===e?t:"r"===e?r:n,o=n.xAxisID=P(r.xAxisID,An(t,"x")),a=n.yAxisID=P(r.yAxisID,An(t,"y")),s=n.rAxisID=P(r.rAxisID,An(t,"r")),l=n.indexAxis,u=n.iAxisID=i(l,o,a,s),c=n.vAxisID=i(l,a,o,s);n.xScale=e.getScaleForId(o),n.yScale=e.getScaleForId(a),n.rScale=e.getScaleForId(s),n.iScale=e.getScaleForId(u),n.vScale=e.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(e){return this.chart.scales[e]}_getOtherScale(e){const t=this._cachedMeta;return e===t.iScale?t.vScale:t.iScale}reset(){this._update("reset")}_destroy(){const e=this._cachedMeta;this._data&&Et(this._data,this),e._stacked&&Ln(e)}_dataCheck(){const e=this,t=e.getDataset(),n=t.data||(t.data=[]),r=e._data;if(E(n))e._data=function(e){const t=Object.keys(e),n=new Array(t.length);let r,i,o;for(r=0,i=t.length;r<i;++r)o=t[r],n[r]={x:o,y:e[o]};return n}(n);else if(r!==n){if(r){Et(r,e);const t=e._cachedMeta;Ln(t),t._parsed=[]}n&&Object.isExtensible(n)&&function(e,t){e._chartjs?e._chartjs.listeners.push(t):(Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),Mt.forEach((t=>{const n="_onData"+H(t),r=e[t];Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value(...t){const i=r.apply(this,t);return e._chartjs.listeners.forEach((e=>{"function"==typeof e[n]&&e[n](...t)})),i}})})))}(n,e),e._syncList=[],e._data=n}}addElements(){const e=this,t=e._cachedMeta;e._dataCheck(),e.datasetElementType&&(t.dataset=new e.datasetElementType)}buildOrUpdateElements(e){const t=this,n=t._cachedMeta,r=t.getDataset();let i=!1;t._dataCheck();const o=n._stacked;n._stacked=On(n.vScale,n),n.stack!==r.stack&&(i=!0,Ln(n),n.stack=r.stack),t._resyncElements(e),(i||o!==n._stacked)&&Dn(t,n._parsed)}configure(){const e=this,t=e.chart.config,n=t.datasetScopeKeys(e._type),r=t.getOptionScopes(e.getDataset(),n,!0);e.options=t.createResolver(r,e.getContext()),e._parsing=e.options.parsing}parse(e,t){const n=this,{_cachedMeta:r,_data:i}=n,{iScale:o,_stacked:a}=r,s=o.axis;let l,u,c,d=0===e&&t===i.length||r._sorted,f=e>0&&r._parsed[e-1];if(!1===n._parsing)r._parsed=i,r._sorted=!0,c=i;else{c=M(i[e])?n.parseArrayData(r,i,e,t):E(i[e])?n.parseObjectData(r,i,e,t):n.parsePrimitiveData(r,i,e,t);const o=()=>null===u[s]||f&&u[s]<f[s];for(l=0;l<t;++l)r._parsed[l+e]=u=c[l],d&&(o()&&(d=!1),f=u);r._sorted=d}a&&Dn(n,c)}parsePrimitiveData(e,t,n,r){const{iScale:i,vScale:o}=e,a=i.axis,s=o.axis,l=i.getLabels(),u=i===o,c=new Array(r);let d,f,h;for(d=0,f=r;d<f;++d)h=d+n,c[d]={[a]:u||i.parse(l[h],h),[s]:o.parse(t[h],h)};return c}parseArrayData(e,t,n,r){const{xScale:i,yScale:o}=e,a=new Array(r);let s,l,u,c;for(s=0,l=r;s<l;++s)u=s+n,c=t[u],a[s]={x:i.parse(c[0],u),y:o.parse(c[1],u)};return a}parseObjectData(e,t,n,r){const{xScale:i,yScale:o}=e,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l=new Array(r);let u,c,d,f;for(u=0,c=r;u<c;++u)d=u+n,f=t[d],l[u]={x:i.parse(B(f,a),d),y:o.parse(B(f,s),d)};return l}getParsed(e){return this._cachedMeta._parsed[e]}getDataElement(e){return this._cachedMeta.data[e]}applyStack(e,t,n){const r=this.chart,i=this._cachedMeta,o=t[e.axis];return Cn({keys:En(r,!0),values:t._stacks[e.axis]},o,i.index,{mode:n})}updateRangeFromParsed(e,t,n,r){const i=n[t.axis];let o=null===i?NaN:i;const a=r&&n._stacks[t.axis];r&&a&&(r.values=a,e.min=Math.min(e.min,o),e.max=Math.max(e.max,o),o=Cn(r,i,this._cachedMeta.index,{all:!0})),e.min=Math.min(e.min,o),e.max=Math.max(e.max,o)}getMinMax(e,t){const n=this,r=n._cachedMeta,i=r._parsed,o=r._sorted&&e===r.iScale,a=i.length,s=n._getOtherScale(e),l=t&&r._stacked&&{keys:En(n.chart,!0),values:null},u={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:d}=function(e){const{min:t,max:n,minDefined:r,maxDefined:i}=e.getUserBounds();return{min:r?t:Number.NEGATIVE_INFINITY,max:i?n:Number.POSITIVE_INFINITY}}(s);let f,h,p,g;function m(){return p=i[f],h=p[e.axis],g=p[s.axis],!C(h)||c>g||d<g}for(f=0;f<a&&(m()||(n.updateRangeFromParsed(u,e,p,l),!o));++f);if(o)for(f=a-1;f>=0;--f)if(!m()){n.updateRangeFromParsed(u,e,p,l);break}return u}getAllParsedValues(e){const t=this._cachedMeta._parsed,n=[];let r,i,o;for(r=0,i=t.length;r<i;++r)o=t[r][e.axis],C(o)&&n.push(o);return n}getMaxOverflow(){return!1}getLabelAndValue(e){const t=this._cachedMeta,n=t.iScale,r=t.vScale,i=this.getParsed(e);return{label:n?""+n.getLabelForValue(i[n.axis]):"",value:r?""+r.getLabelForValue(i[r.axis]):""}}_update(e){const t=this,n=t._cachedMeta;t.configure(),t._cachedDataOpts={},t.update(e||"default"),n._clip=function(e){let t,n,r,i;return E(e)?(t=e.top,n=e.right,r=e.bottom,i=e.left):t=n=r=i=e,{top:t,right:n,bottom:r,left:i,disabled:!1===e}}(P(t.options.clip,function(e,t,n){if(!1===n)return!1;const r=Mn(e,n),i=Mn(t,n);return{top:i.end,right:r.end,bottom:i.start,left:r.start}}(n.xScale,n.yScale,t.getMaxOverflow())))}update(e){}draw(){const e=this,t=e._ctx,n=e.chart,r=e._cachedMeta,i=r.data||[],o=n.chartArea,a=[],s=e._drawStart||0,l=e._drawCount||i.length-s;let u;for(r.dataset&&r.dataset.draw(t,o,s,l),u=s;u<s+l;++u){const e=i[u];e.hidden||(e.active?a.push(e):e.draw(t,o))}for(u=0;u<a.length;++u)a[u].draw(t,o)}getStyle(e,t){const n=t?"active":"default";return void 0===e&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(e||0,n)}getContext(e,t,n){const r=this,i=r.getDataset();let o;if(e>=0&&e<r._cachedMeta.data.length){const t=r._cachedMeta.data[e];o=t.$context||(t.$context=function(e,t,n){return Object.assign(Object.create(e),{active:!1,dataIndex:t,parsed:void 0,raw:void 0,element:n,index:t,mode:"default",type:"data"})}(r.getContext(),e,t)),o.parsed=r.getParsed(e),o.raw=i.data[e],o.index=o.dataIndex=e}else o=r.$context||(r.$context=function(e,t){return Object.assign(Object.create(e),{active:!1,dataset:void 0,datasetIndex:t,index:t,mode:"default",type:"dataset"})}(r.chart.getContext(),r.index)),o.dataset=i,o.index=o.datasetIndex=r.index;return o.active=!!t,o.mode=n,o}resolveDatasetElementOptions(e){return this._resolveElementOptions(this.datasetElementType.id,e)}resolveDataElementOptions(e,t){return this._resolveElementOptions(this.dataElementType.id,t,e)}_resolveElementOptions(e,t="default",n){const r=this,i="active"===t,o=r._cachedDataOpts,a=e+"-"+t,s=o[a],l=r.enableOptionSharing&&W(n);if(s)return In(s,l);const u=r.chart.config,c=u.datasetElementScopeKeys(r._type,e),d=i?[`${e}Hover`,"hover",e,""]:[e,""],f=u.getOptionScopes(r.getDataset(),c),h=Object.keys(Je.elements[e]),p=u.resolveNamedOptions(f,h,(()=>r.getContext(n,i)),d);return p.$shared&&(p.$shared=l,o[a]=Object.freeze(In(p,l))),p}_resolveAnimations(e,t,n){const r=this,i=r.chart,o=r._cachedDataOpts,a=`animation-${t}`,s=o[a];if(s)return s;let l;if(!1!==i.options.animation){const i=r.chart.config,o=i.datasetAnimationScopeKeys(r._type,t),a=i.getOptionScopes(r.getDataset(),o);l=i.createResolver(a,r.getContext(e,n,t))}const u=new Sn(i,l&&l.animations);return l&&l._cacheable&&(o[a]=Object.freeze(u)),u}getSharedOptions(e){if(e.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},e))}includeOptions(e,t){return!t||Rn(e)||this.chart._animationsDisabled}updateElement(e,t,n,r){Rn(r)?Object.assign(e,n):this._resolveAnimations(t,r).update(e,n)}updateSharedOptions(e,t,n){e&&!Rn(t)&&this._resolveAnimations(void 0,t).update(e,n)}_setStyle(e,t,n,r){e.active=r;const i=this.getStyle(t,r);this._resolveAnimations(t,n,r).update(e,{options:!r&&this.getSharedOptions(i)||i})}removeHoverStyle(e,t,n){this._setStyle(e,n,"active",!1)}setHoverStyle(e,t,n){this._setStyle(e,n,"active",!0)}_removeDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!1)}_setDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!0)}_resyncElements(e){const t=this,n=t._data,r=t._cachedMeta.data;for(const[e,n,r]of t._syncList)t[e](n,r);t._syncList=[];const i=r.length,o=n.length,a=Math.min(o,i);a&&t.parse(0,a),o>i?t._insertElements(i,o-i,e):o<i&&t._removeElements(o,i-o)}_insertElements(e,t,n=!0){const r=this,i=r._cachedMeta,o=i.data,a=e+t;let s;const l=e=>{for(e.length+=t,s=e.length-1;s>=a;s--)e[s]=e[s-t]};for(l(o),s=e;s<a;++s)o[s]=new r.dataElementType;r._parsing&&l(i._parsed),r.parse(e,t),n&&r.updateElements(o,e,t,"reset")}updateElements(e,t,n,r){}_removeElements(e,t){const n=this._cachedMeta;if(this._parsing){const r=n._parsed.splice(e,t);n._stacked&&Ln(n,r)}n.data.splice(e,t)}_sync(e){if(this._parsing)this._syncList.push(e);else{const[t,n,r]=e;this[t](n,r)}}_onDataPush(){const e=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-e,e])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(e,t){this._sync(["_removeElements",e,t]),this._sync(["_insertElements",e,arguments.length-2])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function zn(e){const t=function(e){if(!e._cache.$bar){const t=e.getMatchingVisibleMetas("bar");let n=[];for(let r=0,i=t.length;r<i;r++)n=n.concat(t[r].controller.getAllParsedValues(e));e._cache.$bar=Ct(n.sort(((e,t)=>e-t)))}return e._cache.$bar}(e);let n,r,i,o,a=e._length;const s=()=>{32767!==i&&-32768!==i&&(W(o)&&(a=Math.min(a,Math.abs(i-o)||a)),o=i)};for(n=0,r=t.length;n<r;++n)i=e.getPixelForValue(t[n]),s();for(o=void 0,n=0,r=e.ticks.length;n<r;++n)i=e.getPixelForTick(n),s();return a}function Fn(e,t,n,r){return M(e)?function(e,t,n,r){const i=n.parse(e[0],r),o=n.parse(e[1],r),a=Math.min(i,o),s=Math.max(i,o);let l=a,u=s;Math.abs(a)>Math.abs(s)&&(l=s,u=a),t[n.axis]=u,t._custom={barStart:l,barEnd:u,start:i,end:o,min:a,max:s}}(e,t,n,r):t[n.axis]=n.parse(e,r),t}function Vn(e,t,n,r){const i=e.iScale,o=e.vScale,a=i.getLabels(),s=i===o,l=[];let u,c,d,f;for(u=n,c=n+r;u<c;++u)f=t[u],d={},d[i.axis]=s||i.parse(a[u],u),l.push(Fn(f,d,o,u));return l}function jn(e){return e&&void 0!==e.barStart&&void 0!==e.barEnd}function Bn(e,t,n,r){let i=t.borderSkipped;const o={};if(!i)return void(e.borderSkipped=o);const{start:a,end:s,reverse:l,top:u,bottom:c}=function(e){let t,n,r,i,o;return e.horizontal?(t=e.base>e.x,n="left",r="right"):(t=e.base<e.y,n="bottom",r="top"),t?(i="end",o="start"):(i="start",o="end"),{start:n,end:r,reverse:t,top:i,bottom:o}}(e);"middle"===i&&n&&(e.enableBorderRadius=!0,(n._top||0)===r?i=u:(n._bottom||0)===r?i=c:(o[Hn(c,a,s,l)]=!0,i=u)),o[Hn(i,a,s,l)]=!0,e.borderSkipped=o}function Hn(e,t,n,r){var i,o,a;return r?(a=n,e=Wn(e=(i=e)===(o=t)?a:i===a?o:i,n,t)):e=Wn(e,t,n),e}function Wn(e,t,n){return"start"===e?t:"end"===e?n:e}Nn.defaults={},Nn.prototype.datasetElementType=null,Nn.prototype.dataElementType=null;class Un extends Nn{parsePrimitiveData(e,t,n,r){return Vn(e,t,n,r)}parseArrayData(e,t,n,r){return Vn(e,t,n,r)}parseObjectData(e,t,n,r){const{iScale:i,vScale:o}=e,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l="x"===i.axis?a:s,u="x"===o.axis?a:s,c=[];let d,f,h,p;for(d=n,f=n+r;d<f;++d)p=t[d],h={},h[i.axis]=i.parse(B(p,l),d),c.push(Fn(B(p,u),h,o,d));return c}updateRangeFromParsed(e,t,n,r){super.updateRangeFromParsed(e,t,n,r);const i=n._custom;i&&t===this._cachedMeta.vScale&&(e.min=Math.min(e.min,i.min),e.max=Math.max(e.max,i.max))}getMaxOverflow(){return 0}getLabelAndValue(e){const t=this._cachedMeta,{iScale:n,vScale:r}=t,i=this.getParsed(e),o=i._custom,a=jn(o)?"["+o.start+", "+o.end+"]":""+r.getLabelForValue(i[r.axis]);return{label:""+n.getLabelForValue(i[n.axis]),value:a}}initialize(){const e=this;e.enableOptionSharing=!0,super.initialize(),e._cachedMeta.stack=e.getDataset().stack}update(e){const t=this._cachedMeta;this.updateElements(t.data,0,t.data.length,e)}updateElements(e,t,n,r){const i=this,o="reset"===r,{index:a,_cachedMeta:{vScale:s}}=i,l=s.getBasePixel(),u=s.isHorizontal(),c=i._getRuler(),d=i.resolveDataElementOptions(t,r),f=i.getSharedOptions(d),h=i.includeOptions(r,f);i.updateSharedOptions(f,r,d);for(let d=t;d<t+n;d++){const t=i.getParsed(d),n=o||S(t[s.axis])?{base:l,head:l}:i._calculateBarValuePixels(d),p=i._calculateBarIndexPixels(d,c),g=(t._stacks||{})[s.axis],m={horizontal:u,base:n.base,enableBorderRadius:!g||jn(t._custom)||a===g._top||a===g._bottom,x:u?n.head:p.center,y:u?p.center:n.head,height:u?p.size:Math.abs(n.size),width:u?Math.abs(n.size):p.size};h&&(m.options=f||i.resolveDataElementOptions(d,e[d].active?"active":r)),Bn(m,m.options||e[d].options,g,a),i.updateElement(e[d],d,m,r)}}_getStacks(e,t){const n=this._cachedMeta.iScale,r=n.getMatchingVisibleMetas(this._type),i=n.options.stacked,o=r.length,a=[];let s,l;for(s=0;s<o;++s)if(l=r[s],l.controller.options.grouped){if(void 0!==t){const e=l.controller.getParsed(t)[l.controller._cachedMeta.vScale.axis];if(S(e)||isNaN(e))continue}if((!1===i||-1===a.indexOf(l.stack)||void 0===i&&void 0===l.stack)&&a.push(l.stack),l.index===e)break}return a.length||a.push(void 0),a}_getStackCount(e){return this._getStacks(void 0,e).length}_getStackIndex(e,t,n){const r=this._getStacks(e,n),i=void 0!==t?r.indexOf(t):-1;return-1===i?r.length-1:i}_getRuler(){const e=this,t=e.options,n=e._cachedMeta,r=n.iScale,i=[];let o,a;for(o=0,a=n.data.length;o<a;++o)i.push(r.getPixelForValue(e.getParsed(o)[r.axis],o));const s=t.barThickness;return{min:s||zn(r),pixels:i,start:r._startPixel,end:r._endPixel,stackCount:e._getStackCount(),scale:r,grouped:t.grouped,ratio:s?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(e){const t=this,{_cachedMeta:{vScale:n,_stacked:r},options:{base:i,minBarLength:o}}=t,a=i||0,s=t.getParsed(e),l=s._custom,u=jn(l);let c,d,f=s[n.axis],h=0,p=r?t.applyStack(n,s,r):f;p!==f&&(h=p-f,p=f),u&&(f=l.barStart,p=l.barEnd-l.barStart,0!==f&&ee(f)!==ee(l.barEnd)&&(h=0),h+=f);const g=S(i)||u?h:i;let m=n.getPixelForValue(g);if(c=t.chart.getDataVisibility(e)?n.getPixelForValue(h+p):m,d=c-m,Math.abs(d)<o&&(d=function(e,t,n){return 0!==e?ee(e):(t.isHorizontal()?1:-1)*(t.min>=n?1:-1)}(d,n,a)*o,f===a&&(m-=d/2),c=m+d),m===n.getPixelForValue(a)){const e=ee(d)*n.getLineWidthForValue(a)/2;m+=e,d-=e}return{size:d,base:m,head:c,center:c+d/2}}_calculateBarIndexPixels(e,t){const n=this,r=t.scale,i=n.options,o=i.skipNull,a=P(i.maxBarThickness,1/0);let s,l;if(t.grouped){const r=o?n._getStackCount(e):t.stackCount,u="flex"===i.barThickness?function(e,t,n,r){const i=t.pixels,o=i[e];let a=e>0?i[e-1]:null,s=e<i.length-1?i[e+1]:null;const l=n.categoryPercentage;null===a&&(a=o-(null===s?t.end-t.start:s-o)),null===s&&(s=o+o-a);const u=o-(o-Math.min(a,s))/2*l;return{chunk:Math.abs(s-a)/2*l/r,ratio:n.barPercentage,start:u}}(e,t,i,r):function(e,t,n,r){const i=n.barThickness;let o,a;return S(i)?(o=t.min*n.categoryPercentage,a=n.barPercentage):(o=i*r,a=1),{chunk:o/r,ratio:a,start:t.pixels[e]-o/2}}(e,t,i,r),c=n._getStackIndex(n.index,n._cachedMeta.stack,o?e:void 0);s=u.start+u.chunk*c+u.chunk/2,l=Math.min(a,u.chunk*u.ratio)}else s=r.getPixelForValue(n.getParsed(e)[r.axis],e),l=Math.min(a,t.min*t.ratio);return{base:s-l/2,head:s+l/2,center:s,size:l}}draw(){const e=this,t=e._cachedMeta,n=t.vScale,r=t.data,i=r.length;let o=0;for(;o<i;++o)null!==e.getParsed(o)[n.axis]&&r[o].draw(e._ctx)}}Un.id="bar",Un.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},Un.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class $n extends Nn{initialize(){this.enableOptionSharing=!0,super.initialize()}parseObjectData(e,t,n,r){const{xScale:i,yScale:o}=e,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l=[];let u,c,d;for(u=n,c=n+r;u<c;++u)d=t[u],l.push({x:i.parse(B(d,a),u),y:o.parse(B(d,s),u),_custom:d&&d.r&&+d.r});return l}getMaxOverflow(){const{data:e,_parsed:t}=this._cachedMeta;let n=0;for(let r=e.length-1;r>=0;--r)n=Math.max(n,e[r].size()/2,t[r]._custom);return n>0&&n}getLabelAndValue(e){const t=this._cachedMeta,{xScale:n,yScale:r}=t,i=this.getParsed(e),o=n.getLabelForValue(i.x),a=r.getLabelForValue(i.y),s=i._custom;return{label:t.label,value:"("+o+", "+a+(s?", "+s:"")+")"}}update(e){const t=this._cachedMeta.data;this.updateElements(t,0,t.length,e)}updateElements(e,t,n,r){const i=this,o="reset"===r,{iScale:a,vScale:s}=i._cachedMeta,l=i.resolveDataElementOptions(t,r),u=i.getSharedOptions(l),c=i.includeOptions(r,u),d=a.axis,f=s.axis;for(let l=t;l<t+n;l++){const t=e[l],n=!o&&i.getParsed(l),u={},h=u[d]=o?a.getPixelForDecimal(.5):a.getPixelForValue(n[d]),p=u[f]=o?s.getBasePixel():s.getPixelForValue(n[f]);u.skip=isNaN(h)||isNaN(p),c&&(u.options=i.resolveDataElementOptions(l,t.active?"active":r),o&&(u.options.radius=0)),i.updateElement(t,l,u,r)}i.updateSharedOptions(u,r,l)}resolveDataElementOptions(e,t){const n=this.getParsed(e);let r=super.resolveDataElementOptions(e,t);r.$shared&&(r=Object.assign({},r,{$shared:!1}));const i=r.radius;return"active"!==t&&(r.radius=0),r.radius+=P(n&&n._custom,i),r}}$n.id="bubble",$n.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},$n.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class Yn extends Nn{constructor(e,t){super(e,t),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(e,t){const n=this.getDataset().data,r=this._cachedMeta;let i,o;for(i=e,o=e+t;i<o;++i)r._parsed[i]=+n[i]}_getRotation(){return oe(this.options.rotation-90)}_getCircumference(){return oe(this.options.circumference)}_getRotationExtents(){let e=Y,t=-Y;const n=this;for(let r=0;r<n.chart.data.datasets.length;++r)if(n.chart.isDatasetVisible(r)){const i=n.chart.getDatasetMeta(r).controller,o=i._getRotation(),a=i._getCircumference();e=Math.min(e,o),t=Math.max(t,o+a)}return{rotation:e,circumference:t-e}}update(e){const t=this,n=t.chart,{chartArea:r}=n,i=t._cachedMeta,o=i.data,a=t.getMaxBorderWidth()+t.getMaxOffset(o)+t.options.spacing,s=Math.max((Math.min(r.width,r.height)-a)/2,0),l=Math.min((c=s,"string"==typeof(u=t.options.cutout)&&u.endsWith("%")?parseFloat(u)/100:u/c),1);var u,c;const d=t._getRingWeight(t.index),{circumference:f,rotation:h}=t._getRotationExtents(),{ratioX:p,ratioY:g,offsetX:m,offsetY:b}=function(e,t,n){let r=1,i=1,o=0,a=0;if(t<Y){const s=e,l=s+t,u=Math.cos(s),c=Math.sin(s),d=Math.cos(l),f=Math.sin(l),h=(e,t,r)=>de(e,s,l,!0)?1:Math.max(t,t*n,r,r*n),p=(e,t,r)=>de(e,s,l,!0)?-1:Math.min(t,t*n,r,r*n),g=h(0,u,d),m=h(K,c,f),b=p($,u,d),v=p($+K,c,f);r=(g-b)/2,i=(m-v)/2,o=-(g+b)/2,a=-(m+v)/2}return{ratioX:r,ratioY:i,offsetX:o,offsetY:a}}(h,f,l),v=(r.width-a)/p,y=(r.height-a)/g,x=Math.max(Math.min(v,y)/2,0),_=T(t.options.radius,x),w=(_-Math.max(_*l,0))/t._getVisibleDatasetWeightTotal();t.offsetX=m*_,t.offsetY=b*_,i.total=t.calculateTotal(),t.outerRadius=_-w*t._getRingWeightOffset(t.index),t.innerRadius=Math.max(t.outerRadius-w*d,0),t.updateElements(o,0,o.length,e)}_circumference(e,t){const n=this,r=n.options,i=n._cachedMeta,o=n._getCircumference();return t&&r.animation.animateRotate||!this.chart.getDataVisibility(e)||null===i._parsed[e]||i.data[e].hidden?0:n.calculateCircumference(i._parsed[e]*o/Y)}updateElements(e,t,n,r){const i=this,o="reset"===r,a=i.chart,s=a.chartArea,l=a.options.animation,u=(s.left+s.right)/2,c=(s.top+s.bottom)/2,d=o&&l.animateScale,f=d?0:i.innerRadius,h=d?0:i.outerRadius,p=i.resolveDataElementOptions(t,r),g=i.getSharedOptions(p),m=i.includeOptions(r,g);let b,v=i._getRotation();for(b=0;b<t;++b)v+=i._circumference(b,o);for(b=t;b<t+n;++b){const t=i._circumference(b,o),n=e[b],a={x:u+i.offsetX,y:c+i.offsetY,startAngle:v,endAngle:v+t,circumference:t,outerRadius:h,innerRadius:f};m&&(a.options=g||i.resolveDataElementOptions(b,n.active?"active":r)),v+=t,i.updateElement(n,b,a,r)}i.updateSharedOptions(g,r,p)}calculateTotal(){const e=this._cachedMeta,t=e.data;let n,r=0;for(n=0;n<t.length;n++){const i=e._parsed[n];null===i||isNaN(i)||!this.chart.getDataVisibility(n)||t[n].hidden||(r+=Math.abs(i))}return r}calculateCircumference(e){const t=this._cachedMeta.total;return t>0&&!isNaN(e)?Y*(Math.abs(e)/t):0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,r=n.data.labels||[],i=un(t._parsed[e],n.options.locale);return{label:r[e]||"",value:i}}getMaxBorderWidth(e){const t=this;let n=0;const r=t.chart;let i,o,a,s,l;if(!e)for(i=0,o=r.data.datasets.length;i<o;++i)if(r.isDatasetVisible(i)){a=r.getDatasetMeta(i),e=a.data,s=a.controller,s!==t&&s.configure();break}if(!e)return 0;for(i=0,o=e.length;i<o;++i)l=s.resolveDataElementOptions(i),"inner"!==l.borderAlign&&(n=Math.max(n,l.borderWidth||0,l.hoverBorderWidth||0));return n}getMaxOffset(e){let t=0;for(let n=0,r=e.length;n<r;++n){const e=this.resolveDataElementOptions(n);t=Math.max(t,e.offset||0,e.hoverOffset||0)}return t}_getRingWeightOffset(e){let t=0;for(let n=0;n<e;++n)this.chart.isDatasetVisible(n)&&(t+=this._getRingWeight(n));return t}_getRingWeight(e){return Math.max(P(this.chart.data.datasets[e].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}Yn.id="doughnut",Yn.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},Yn.descriptors={_scriptable:e=>"spacing"!==e,_indexable:e=>"spacing"!==e},Yn.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n}}=e.legend.options;return t.labels.map(((t,r)=>{const i=e.getDatasetMeta(0).controller.getStyle(r);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,pointStyle:n,hidden:!e.getDataVisibility(r),index:r}}))}return[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label(e){let t=e.label;const n=": "+e.formattedValue;return M(t)?(t=t.slice(),t[0]+=n):t+=n,t}}}}};class Xn extends Nn{initialize(){this.enableOptionSharing=!0,super.initialize()}update(e){const t=this,n=t._cachedMeta,{dataset:r,data:i=[],_dataset:o}=n,a=t.chart._animationsDisabled;let{start:s,count:l}=function(e,t,n){const r=t.length;let i=0,o=r;if(e._sorted){const{iScale:a,_parsed:s}=e,l=a.axis,{min:u,max:c,minDefined:d,maxDefined:f}=a.getUserBounds();d&&(i=fe(Math.min(kt(s,a.axis,u).lo,n?r:kt(t,l,a.getPixelForValue(u)).lo),0,r-1)),o=f?fe(Math.max(kt(s,a.axis,c).hi+1,n?0:kt(t,l,a.getPixelForValue(c)).hi+1),i,r)-i:r-i}return{start:i,count:o}}(n,i,a);t._drawStart=s,t._drawCount=l,function(e){const{xScale:t,yScale:n,_scaleRanges:r}=e,i={xmin:t.min,xmax:t.max,ymin:n.min,ymax:n.max};if(!r)return e._scaleRanges=i,!0;const o=r.xmin!==t.min||r.xmax!==t.max||r.ymin!==n.min||r.ymax!==n.max;return Object.assign(r,i),o}(n)&&(s=0,l=i.length),r._datasetIndex=t.index,r._decimated=!!o._decimated,r.points=i;const u=t.resolveDatasetElementOptions(e);t.options.showLine||(u.borderWidth=0),u.segment=t.options.segment,t.updateElement(r,void 0,{animated:!a,options:u},e),t.updateElements(i,s,l,e)}updateElements(e,t,n,r){const i=this,o="reset"===r,{iScale:a,vScale:s,_stacked:l}=i._cachedMeta,u=i.resolveDataElementOptions(t,r),c=i.getSharedOptions(u),d=i.includeOptions(r,c),f=a.axis,h=s.axis,p=i.options.spanGaps,g=ne(p)?p:Number.POSITIVE_INFINITY,m=i.chart._animationsDisabled||o||"none"===r;let b=t>0&&i.getParsed(t-1);for(let u=t;u<t+n;++u){const t=e[u],n=i.getParsed(u),p=m?t:{},v=S(n[h]),y=p[f]=a.getPixelForValue(n[f],u),x=p[h]=o||v?s.getBasePixel():s.getPixelForValue(l?i.applyStack(s,n,l):n[h],u);p.skip=isNaN(y)||isNaN(x)||v,p.stop=u>0&&n[f]-b[f]>g,p.parsed=n,d&&(p.options=c||i.resolveDataElementOptions(u,t.active?"active":r)),m||i.updateElement(t,u,p,r),b=n}i.updateSharedOptions(c,r,u)}getMaxOverflow(){const e=this,t=e._cachedMeta,n=t.dataset,r=n.options&&n.options.borderWidth||0,i=t.data||[];if(!i.length)return r;const o=i[0].size(e.resolveDataElementOptions(0)),a=i[i.length-1].size(e.resolveDataElementOptions(i.length-1));return Math.max(r,o,a)/2}draw(){const e=this._cachedMeta;e.dataset.updateControlPoints(this.chart.chartArea,e.iScale.axis),super.draw()}}Xn.id="line",Xn.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},Xn.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class qn extends Nn{constructor(e,t){super(e,t),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,r=n.data.labels||[],i=un(t._parsed[e].r,n.options.locale);return{label:r[e]||"",value:i}}update(e){const t=this._cachedMeta.data;this._updateRadius(),this.updateElements(t,0,t.length,e)}_updateRadius(){const e=this,t=e.chart,n=t.chartArea,r=t.options,i=Math.min(n.right-n.left,n.bottom-n.top),o=Math.max(i/2,0),a=(o-Math.max(r.cutoutPercentage?o/100*r.cutoutPercentage:1,0))/t.getVisibleDatasetCount();e.outerRadius=o-a*e.index,e.innerRadius=e.outerRadius-a}updateElements(e,t,n,r){const i=this,o="reset"===r,a=i.chart,s=i.getDataset(),l=a.options.animation,u=i._cachedMeta.rScale,c=u.xCenter,d=u.yCenter,f=u.getIndexAngle(0)-.5*$;let h,p=f;const g=360/i.countVisibleElements();for(h=0;h<t;++h)p+=i._computeAngle(h,r,g);for(h=t;h<t+n;h++){const t=e[h];let n=p,m=p+i._computeAngle(h,r,g),b=a.getDataVisibility(h)?u.getDistanceFromCenterForValue(s.data[h]):0;p=m,o&&(l.animateScale&&(b=0),l.animateRotate&&(n=m=f));const v={x:c,y:d,innerRadius:0,outerRadius:b,startAngle:n,endAngle:m,options:i.resolveDataElementOptions(h,t.active?"active":r)};i.updateElement(t,h,v,r)}}countVisibleElements(){const e=this.getDataset(),t=this._cachedMeta;let n=0;return t.data.forEach(((t,r)=>{!isNaN(e.data[r])&&this.chart.getDataVisibility(r)&&n++})),n}_computeAngle(e,t,n){return this.chart.getDataVisibility(e)?oe(this.resolveDataElementOptions(e,t).angle||n):0}}qn.id="polarArea",qn.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},qn.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n}}=e.legend.options;return t.labels.map(((t,r)=>{const i=e.getDatasetMeta(0).controller.getStyle(r);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,pointStyle:n,hidden:!e.getDataVisibility(r),index:r}}))}return[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label:e=>e.chart.data.labels[e.dataIndex]+": "+e.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class Qn extends Yn{}Qn.id="pie",Qn.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class Kn extends Nn{getLabelAndValue(e){const t=this._cachedMeta.vScale,n=this.getParsed(e);return{label:t.getLabels()[e],value:""+t.getLabelForValue(n[t.axis])}}update(e){const t=this,n=t._cachedMeta,r=n.dataset,i=n.data||[],o=n.iScale.getLabels();if(r.points=i,"resize"!==e){const n=t.resolveDatasetElementOptions(e);t.options.showLine||(n.borderWidth=0);const a={_loop:!0,_fullLoop:o.length===i.length,options:n};t.updateElement(r,void 0,a,e)}t.updateElements(i,0,i.length,e)}updateElements(e,t,n,r){const i=this,o=i.getDataset(),a=i._cachedMeta.rScale,s="reset"===r;for(let l=t;l<t+n;l++){const t=e[l],n=i.resolveDataElementOptions(l,t.active?"active":r),u=a.getPointPositionForValue(l,o.data[l]),c=s?a.xCenter:u.x,d=s?a.yCenter:u.y,f={x:c,y:d,angle:u.angle,skip:isNaN(c)||isNaN(d),options:n};i.updateElement(t,l,f,r)}}}Kn.id="radar",Kn.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},Kn.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class Gn extends Xn{}Gn.id="scatter",Gn.defaults={showLine:!1,fill:!1},Gn.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:e=>"("+e.label+", "+e.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var Zn=Object.freeze({__proto__:null,BarController:Un,BubbleController:$n,DoughnutController:Yn,LineController:Xn,PolarAreaController:qn,PieController:Qn,RadarController:Kn,ScatterController:Gn});function Jn(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class er{constructor(e){this.options=e||{}}formats(){return Jn()}parse(e,t){return Jn()}format(e,t){return Jn()}add(e,t,n){return Jn()}diff(e,t,n){return Jn()}startOf(e,t,n){return Jn()}endOf(e,t){return Jn()}}er.override=function(e){Object.assign(er.prototype,e)};var tr={_date:er};function nr(e,t){return"native"in e?{x:e.x,y:e.y}:Jt(e,t)}function rr(e,t,n,r){const{controller:i,data:o,_sorted:a}=e,s=i._cachedMeta.iScale;if(s&&t===s.axis&&a&&o.length){const e=s._reversePixels?St:kt;if(!r)return e(o,t,n);if(i._sharedOptions){const r=o[0],i="function"==typeof r.getRange&&r.getRange(t);if(i){const r=e(o,t,n-i),a=e(o,t,n+i);return{lo:r.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function ir(e,t,n,r,i){const o=e.getSortedVisibleDatasetMetas(),a=n[t];for(let e=0,n=o.length;e<n;++e){const{index:n,data:s}=o[e],{lo:l,hi:u}=rr(o[e],t,a,i);for(let e=l;e<=u;++e){const t=s[e];t.skip||r(t,n,e)}}}function or(e,t,n,r){const i=[];return ot(t,e.chartArea,e._minPadding)?(ir(e,n,t,(function(e,n,o){e.inRange(t.x,t.y,r)&&i.push({element:e,datasetIndex:n,index:o})}),!0),i):i}function ar(e,t,n,r,i){const o=function(e){const t=-1!==e.indexOf("x"),n=-1!==e.indexOf("y");return function(e,r){const i=t?Math.abs(e.x-r.x):0,o=n?Math.abs(e.y-r.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(o,2))}}(n);let a=Number.POSITIVE_INFINITY,s=[];return ot(t,e.chartArea,e._minPadding)?(ir(e,n,t,(function(n,l,u){if(r&&!n.inRange(t.x,t.y,i))return;const c=n.getCenterPoint(i);if(!ot(c,e.chartArea,e._minPadding)&&!n.inRange(t.x,t.y,i))return;const d=o(t,c);d<a?(s=[{element:n,datasetIndex:l,index:u}],a=d):d===a&&s.push({element:n,datasetIndex:l,index:u})})),s):s}function sr(e,t,n,r){const i=nr(t,e),o=[],a=n.axis,s="x"===a?"inXRange":"inYRange";let l=!1;return function(e,t){const n=e.getSortedVisibleDatasetMetas();let r,i,o;for(let e=0,a=n.length;e<a;++e){({index:r,data:i}=n[e]);for(let e=0,n=i.length;e<n;++e)o=i[e],o.skip||t(o,r,e)}}(e,((e,t,n)=>{e[s](i[a],r)&&o.push({element:e,datasetIndex:t,index:n}),e.inRange(i.x,i.y,r)&&(l=!0)})),n.intersect&&!l?[]:o}var lr={modes:{index(e,t,n,r){const i=nr(t,e),o=n.axis||"x",a=n.intersect?or(e,i,o,r):ar(e,i,o,!1,r),s=[];return a.length?(e.getSortedVisibleDatasetMetas().forEach((e=>{const t=a[0].index,n=e.data[t];n&&!n.skip&&s.push({element:n,datasetIndex:e.index,index:t})})),s):[]},dataset(e,t,n,r){const i=nr(t,e),o=n.axis||"xy";let a=n.intersect?or(e,i,o,r):ar(e,i,o,!1,r);if(a.length>0){const t=a[0].datasetIndex,n=e.getDatasetMeta(t).data;a=[];for(let e=0;e<n.length;++e)a.push({element:n[e],datasetIndex:t,index:e})}return a},point:(e,t,n,r)=>or(e,nr(t,e),n.axis||"xy",r),nearest:(e,t,n,r)=>ar(e,nr(t,e),n.axis||"xy",n.intersect,r),x:(e,t,n,r)=>(n.axis="x",sr(e,t,n,r)),y:(e,t,n,r)=>(n.axis="y",sr(e,t,n,r))}};const ur=["left","top","right","bottom"];function cr(e,t){return e.filter((e=>e.pos===t))}function dr(e,t){return e.filter((e=>-1===ur.indexOf(e.pos)&&e.box.axis===t))}function fr(e,t){return e.sort(((e,n)=>{const r=t?n:e,i=t?e:n;return r.weight===i.weight?r.index-i.index:r.weight-i.weight}))}function hr(e,t,n,r){return Math.max(e[n],t[n])+Math.max(e[r],t[r])}function pr(e,t){e.top=Math.max(e.top,t.top),e.left=Math.max(e.left,t.left),e.bottom=Math.max(e.bottom,t.bottom),e.right=Math.max(e.right,t.right)}function gr(e,t,n,r){const{pos:i,box:o}=n,a=e.maxPadding;if(!E(i)){n.size&&(e[i]-=n.size);const t=r[n.stack]||{size:0,count:1};t.size=Math.max(t.size,n.horizontal?o.height:o.width),n.size=t.size/t.count,e[i]+=n.size}o.getPadding&&pr(a,o.getPadding());const s=Math.max(0,t.outerWidth-hr(a,e,"left","right")),l=Math.max(0,t.outerHeight-hr(a,e,"top","bottom")),u=s!==e.w,c=l!==e.h;return e.w=s,e.h=l,n.horizontal?{same:u,other:c}:{same:c,other:u}}function mr(e,t){const n=t.maxPadding;return function(e){const r={left:0,top:0,right:0,bottom:0};return e.forEach((e=>{r[e]=Math.max(t[e],n[e])})),r}(e?["left","right"]:["top","bottom"])}function br(e,t,n,r){const i=[];let o,a,s,l,u,c;for(o=0,a=e.length,u=0;o<a;++o){s=e[o],l=s.box,l.update(s.width||t.w,s.height||t.h,mr(s.horizontal,t));const{same:a,other:d}=gr(t,n,s,r);u|=a&&i.length,c=c||d,l.fullSize||i.push(s)}return u&&br(i,t,n,r)||c}function vr(e,t,n,r,i){e.top=n,e.left=t,e.right=t+r,e.bottom=n+i,e.width=r,e.height=i}function yr(e,t,n,r){const i=n.padding;let{x:o,y:a}=t;for(const s of e){const e=s.box,l=r[s.stack]||{count:1,placed:0,weight:1},u=s.stackWeight/l.weight||1;if(s.horizontal){const r=t.w*u,o=l.size||e.height;W(l.start)&&(a=l.start),e.fullSize?vr(e,i.left,a,n.outerWidth-i.right-i.left,o):vr(e,t.left+l.placed,a,r,o),l.start=a,l.placed+=r,a=e.bottom}else{const r=t.h*u,a=l.size||e.width;W(l.start)&&(o=l.start),e.fullSize?vr(e,o,i.top,a,n.outerHeight-i.bottom-i.top):vr(e,o,t.top+l.placed,a,r),l.start=o,l.placed+=r,o=e.right}}t.x=o,t.y=a}Je.set("layout",{padding:{top:0,right:0,bottom:0,left:0}});var xr={addBox(e,t){e.boxes||(e.boxes=[]),t.fullSize=t.fullSize||!1,t.position=t.position||"top",t.weight=t.weight||0,t._layers=t._layers||function(){return[{z:0,draw(e){t.draw(e)}}]},e.boxes.push(t)},removeBox(e,t){const n=e.boxes?e.boxes.indexOf(t):-1;-1!==n&&e.boxes.splice(n,1)},configure(e,t,n){t.fullSize=n.fullSize,t.position=n.position,t.weight=n.weight},update(e,t,n,r){if(!e)return;const i=yt(e.options.layout.padding),o=Math.max(t-i.width,0),a=Math.max(n-i.height,0),s=function(e){const t=function(e){const t=[];let n,r,i,o,a,s;for(n=0,r=(e||[]).length;n<r;++n)i=e[n],({position:o,options:{stack:a,stackWeight:s=1}}=i),t.push({index:n,box:i,pos:o,horizontal:i.isHorizontal(),weight:i.weight,stack:a&&o+a,stackWeight:s});return t}(e),n=fr(t.filter((e=>e.box.fullSize)),!0),r=fr(cr(t,"left"),!0),i=fr(cr(t,"right")),o=fr(cr(t,"top"),!0),a=fr(cr(t,"bottom")),s=dr(t,"x"),l=dr(t,"y");return{fullSize:n,leftAndTop:r.concat(o),rightAndBottom:i.concat(l).concat(a).concat(s),chartArea:cr(t,"chartArea"),vertical:r.concat(i).concat(l),horizontal:o.concat(a).concat(s)}}(e.boxes),l=s.vertical,u=s.horizontal;A(e.boxes,(e=>{"function"==typeof e.beforeLayout&&e.beforeLayout()}));const c=l.reduce(((e,t)=>t.box.options&&!1===t.box.options.display?e:e+1),0)||1,d=Object.freeze({outerWidth:t,outerHeight:n,padding:i,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/c,hBoxMaxHeight:a/2}),f=Object.assign({},i);pr(f,yt(r));const h=Object.assign({maxPadding:f,w:o,h:a,x:i.left,y:i.top},i),p=function(e,t){const n=function(e){const t={};for(const n of e){const{stack:e,pos:r,stackWeight:i}=n;if(!e||!ur.includes(r))continue;const o=t[e]||(t[e]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=i}return t}(e),{vBoxMaxWidth:r,hBoxMaxHeight:i}=t;let o,a,s;for(o=0,a=e.length;o<a;++o){s=e[o];const{fullSize:a}=s.box,l=n[s.stack],u=l&&s.stackWeight/l.weight;s.horizontal?(s.width=u?u*r:a&&t.availableWidth,s.height=i):(s.width=r,s.height=u?u*i:a&&t.availableHeight)}return n}(l.concat(u),d);br(s.fullSize,h,d,p),br(l,h,d,p),br(u,h,d,p)&&br(l,h,d,p),function(e){const t=e.maxPadding;function n(n){const r=Math.max(t[n]-e[n],0);return e[n]+=r,r}e.y+=n("top"),e.x+=n("left"),n("right"),n("bottom")}(h),yr(s.leftAndTop,h,d,p),h.x+=h.w,h.y+=h.h,yr(s.rightAndBottom,h,d,p),e.chartArea={left:h.left,top:h.top,right:h.left+h.w,bottom:h.top+h.h,height:h.h,width:h.w},A(s.chartArea,(t=>{const n=t.box;Object.assign(n,e.chartArea),n.update(h.w,h.h)}))}};class _r{acquireContext(e,t){}releaseContext(e){return!1}addEventListener(e,t,n){}removeEventListener(e,t,n){}getDevicePixelRatio(){return 1}getMaximumSize(e,t,n,r){return t=Math.max(0,t||e.width),n=n||e.height,{width:t,height:Math.max(0,r?Math.floor(t/r):n)}}isAttached(e){return!0}}class wr extends _r{acquireContext(e){return e&&e.getContext&&e.getContext("2d")||null}}const kr={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},Sr=e=>null===e||""===e,Mr=!!nn&&{passive:!0};function Er(e,t,n){e.canvas.removeEventListener(t,n,Mr)}function Cr(e,t,n){const r=e.canvas,i=r&&qt(r)||r,o=new MutationObserver((e=>{const t=qt(i);e.forEach((e=>{for(let r=0;r<e.addedNodes.length;r++){const o=e.addedNodes[r];o!==i&&o!==t||n(e.target)}}))}));return o.observe(document,{childList:!0,subtree:!0}),o}function Or(e,t,n){const r=e.canvas,i=r&&qt(r);if(!i)return;const o=new MutationObserver((e=>{e.forEach((e=>{for(let t=0;t<e.removedNodes.length;t++)if(e.removedNodes[t]===r){n();break}}))}));return o.observe(i,{childList:!0}),o}const Pr=new Map;let Tr=0;function Dr(){const e=window.devicePixelRatio;e!==Tr&&(Tr=e,Pr.forEach(((t,n)=>{n.currentDevicePixelRatio!==e&&t()})))}function Ar(e,t,n){const r=e.canvas,i=r&&qt(r);if(!i)return;const o=y(((e,t)=>{const r=i.clientWidth;n(e,t),r<i.clientWidth&&n()}),window),a=new ResizeObserver((e=>{const t=e[0],n=t.contentRect.width,r=t.contentRect.height;0===n&&0===r||o(n,r)}));return a.observe(i),function(e,t){Pr.size||window.addEventListener("resize",Dr),Pr.set(e,t)}(e,o),a}function Lr(e,t,n){n&&n.disconnect(),"resize"===t&&function(e){Pr.delete(e),Pr.size||window.removeEventListener("resize",Dr)}(e)}function Rr(e,t,n){const r=e.canvas,i=y((t=>{null!==e.ctx&&n(function(e,t){const n=kr[e.type]||e.type,{x:r,y:i}=Jt(e,t);return{type:n,chart:t,native:e,x:void 0!==r?r:null,y:void 0!==i?i:null}}(t,e))}),e,(e=>{const t=e[0];return[t,t.offsetX,t.offsetY]}));return function(e,t,n){e.addEventListener(t,n,Mr)}(r,t,i),i}class Ir extends _r{acquireContext(e,t){const n=e&&e.getContext&&e.getContext("2d");return n&&n.canvas===e?(function(e,t){const n=e.style,r=e.getAttribute("height"),i=e.getAttribute("width");if(e.$chartjs={initial:{height:r,width:i,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",Sr(i)){const t=rn(e,"width");void 0!==t&&(e.width=t)}if(Sr(r))if(""===e.style.height)e.height=e.width/(t||2);else{const t=rn(e,"height");void 0!==t&&(e.height=t)}}(e,t),n):null}releaseContext(e){const t=e.canvas;if(!t.$chartjs)return!1;const n=t.$chartjs.initial;["height","width"].forEach((e=>{const r=n[e];S(r)?t.removeAttribute(e):t.setAttribute(e,r)}));const r=n.style||{};return Object.keys(r).forEach((e=>{t.style[e]=r[e]})),t.width=t.width,delete t.$chartjs,!0}addEventListener(e,t,n){this.removeEventListener(e,t);const r=e.$proxies||(e.$proxies={}),i={attach:Cr,detach:Or,resize:Ar}[t]||Rr;r[t]=i(e,t,n)}removeEventListener(e,t){const n=e.$proxies||(e.$proxies={}),r=n[t];r&&(({attach:Lr,detach:Lr,resize:Lr}[t]||Er)(e,t,r),n[t]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(e,t,n,r){return function(e,t,n,r){const i=Kt(e),o=Zt(i,"margin"),a=Qt(i.maxWidth,e,"clientWidth")||q,s=Qt(i.maxHeight,e,"clientHeight")||q,l=function(e,t,n){let r,i;if(void 0===t||void 0===n){const o=qt(e);if(o){const e=o.getBoundingClientRect(),a=Kt(o),s=Zt(a,"border","width"),l=Zt(a,"padding");t=e.width-l.width-s.width,n=e.height-l.height-s.height,r=Qt(a.maxWidth,o,"clientWidth"),i=Qt(a.maxHeight,o,"clientHeight")}else t=e.clientWidth,n=e.clientHeight}return{width:t,height:n,maxWidth:r||q,maxHeight:i||q}}(e,t,n);let{width:u,height:c}=l;if("content-box"===i.boxSizing){const e=Zt(i,"border","width"),t=Zt(i,"padding");u-=t.width+e.width,c-=t.height+e.height}return u=Math.max(0,u-o.width),c=Math.max(0,r?Math.floor(u/r):c-o.height),u=en(Math.min(u,a,l.maxWidth)),c=en(Math.min(c,s,l.maxHeight)),u&&!c&&(c=en(u/2)),{width:u,height:c}}(e,t,n,r)}isAttached(e){const t=qt(e);return!(!t||!t.isConnected)}}class Nr{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}hasValue(){return ne(this.x)&&ne(this.y)}getProps(e,t){const n=this,r=this.$animations;if(!t||!r)return n;const i={};return e.forEach((e=>{i[e]=r[e]&&r[e].active()?r[e]._to:n[e]})),i}}Nr.defaults={},Nr.defaultRoutes=void 0;const zr={values:e=>M(e)?e:""+e,numeric(e,t,n){if(0===e)return"0";const r=this.chart.options.locale;let i,o=e;if(n.length>1){const t=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(t<1e-4||t>1e15)&&(i="scientific"),o=function(e,t){let n=t.length>3?t[2].value-t[1].value:t[1].value-t[0].value;return Math.abs(n)>=1&&e!==Math.floor(e)&&(n=e-Math.floor(e)),n}(e,n)}const a=J(Math.abs(o)),s=Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:i,minimumFractionDigits:s,maximumFractionDigits:s};return Object.assign(l,this.options.ticks.format),un(e,r,l)},logarithmic(e,t,n){if(0===e)return"0";const r=e/Math.pow(10,Math.floor(J(e)));return 1===r||2===r||5===r?zr.numeric.call(this,e,t,n):""}};var Fr={formatters:zr};function Vr(e,t,n,r,i){const o=P(r,0),a=Math.min(P(i,e.length),e.length);let s,l,u,c=0;for(n=Math.ceil(n),i&&(s=i-r,n=s/Math.floor(s/n)),u=o;u<0;)c++,u=Math.round(o+c*n);for(l=Math.max(o,0);l<a;l++)l===u&&(t.push(e[l]),c++,u=Math.round(o+c*n))}Je.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(e,t)=>t.lineWidth,tickColor:(e,t)=>t.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Fr.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),Je.route("scale.ticks","color","","color"),Je.route("scale.grid","color","","borderColor"),Je.route("scale.grid","borderColor","","borderColor"),Je.route("scale.title","color","","color"),Je.describe("scale",{_fallback:!1,_scriptable:e=>!e.startsWith("before")&&!e.startsWith("after")&&"callback"!==e&&"parser"!==e,_indexable:e=>"borderDash"!==e&&"tickBorderDash"!==e}),Je.describe("scales",{_fallback:"scale"}),Je.describe("scale.ticks",{_scriptable:e=>"backdropPadding"!==e&&"callback"!==e,_indexable:e=>"backdropPadding"!==e});const jr=(e,t,n)=>"top"===t||"left"===t?e[t]+n:e[t]-n;function Br(e,t){const n=[],r=e.length/t,i=e.length;let o=0;for(;o<i;o+=r)n.push(e[Math.floor(o)]);return n}function Hr(e,t,n){const r=e.ticks.length,i=Math.min(t,r-1),o=e._startPixel,a=e._endPixel,s=1e-6;let l,u=e.getPixelForTick(i);if(!(n&&(l=1===r?Math.max(u-o,a-u):0===t?(e.getPixelForTick(1)-u)/2:(u-e.getPixelForTick(i-1))/2,u+=i<t?l:-l,u<o-s||u>a+s)))return u}function Wr(e){return e.drawTicks?e.tickLength:0}function Ur(e,t){if(!e.display)return 0;const n=xt(e.font,t),r=yt(e.padding);return(M(e.text)?e.text.length:1)*n.lineHeight+r.height}function $r(e,t,n){let r=x(e);return(n&&"right"!==t||!n&&"right"===t)&&(r=(e=>"left"===e?"right":"right"===e?"left":e)(r)),r}class Yr extends Nr{constructor(e){super(),this.id=e.id,this.type=e.type,this.options=void 0,this.ctx=e.ctx,this.chart=e.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(e){const t=this;t.options=e.setContext(t.getContext()),t.axis=e.axis,t._userMin=t.parse(e.min),t._userMax=t.parse(e.max),t._suggestedMin=t.parse(e.suggestedMin),t._suggestedMax=t.parse(e.suggestedMax)}parse(e,t){return e}getUserBounds(){let{_userMin:e,_userMax:t,_suggestedMin:n,_suggestedMax:r}=this;return e=O(e,Number.POSITIVE_INFINITY),t=O(t,Number.NEGATIVE_INFINITY),n=O(n,Number.POSITIVE_INFINITY),r=O(r,Number.NEGATIVE_INFINITY),{min:O(e,n),max:O(t,r),minDefined:C(e),maxDefined:C(t)}}getMinMax(e){const t=this;let n,{min:r,max:i,minDefined:o,maxDefined:a}=t.getUserBounds();if(o&&a)return{min:r,max:i};const s=t.getMatchingVisibleMetas();for(let l=0,u=s.length;l<u;++l)n=s[l].controller.getMinMax(t,e),o||(r=Math.min(r,n.min)),a||(i=Math.max(i,n.max));return{min:O(r,O(i,r)),max:O(i,O(r,i))}}getPadding(){const e=this;return{left:e.paddingLeft||0,top:e.paddingTop||0,right:e.paddingRight||0,bottom:e.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){D(this.options.beforeUpdate,[this])}update(e,t,n){const r=this,i=r.options.ticks,o=i.sampleSize;r.beforeUpdate(),r.maxWidth=e,r.maxHeight=t,r._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),r.ticks=null,r._labelSizes=null,r._gridLineItems=null,r._labelItems=null,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r._maxLength=r.isHorizontal()?r.width+n.left+n.right:r.height+n.top+n.bottom,r._dataLimitsCached||(r.beforeDataLimits(),r.determineDataLimits(),r.afterDataLimits(),r._range=function(e,t){const{min:n,max:r}=e;return{min:n-Math.abs(T(t,n)),max:r+T(t,r)}}(r,r.options.grace),r._dataLimitsCached=!0),r.beforeBuildTicks(),r.ticks=r.buildTicks()||[],r.afterBuildTicks();const a=o<r.ticks.length;r._convertTicksToLabels(a?Br(r.ticks,o):r.ticks),r.configure(),r.beforeCalculateLabelRotation(),r.calculateLabelRotation(),r.afterCalculateLabelRotation(),i.display&&(i.autoSkip||"auto"===i.source)&&(r.ticks=function(e,t){const n=e.options.ticks,r=n.maxTicksLimit||function(e){const t=e.options.offset,n=e._tickSize(),r=e._length/n+(t?0:1),i=e._maxLength/n;return Math.floor(Math.min(r,i))}(e),i=n.major.enabled?function(e){const t=[];let n,r;for(n=0,r=e.length;n<r;n++)e[n].major&&t.push(n);return t}(t):[],o=i.length,a=i[0],s=i[o-1],l=[];if(o>r)return function(e,t,n,r){let i,o=0,a=n[0];for(r=Math.ceil(r),i=0;i<e.length;i++)i===a&&(t.push(e[i]),o++,a=n[o*r])}(t,l,i,o/r),l;const u=function(e,t,n){const r=function(e){const t=e.length;let n,r;if(t<2)return!1;for(r=e[0],n=1;n<t;++n)if(e[n]-e[n-1]!==r)return!1;return r}(e),i=t.length/n;if(!r)return Math.max(i,1);const o=function(e){const t=[],n=Math.sqrt(e);let r;for(r=1;r<n;r++)e%r==0&&(t.push(r),t.push(e/r));return n===(0|n)&&t.push(n),t.sort(((e,t)=>e-t)).pop(),t}(r);for(let e=0,t=o.length-1;e<t;e++){const t=o[e];if(t>i)return t}return Math.max(i,1)}(i,t,r);if(o>0){let e,n;const r=o>1?Math.round((s-a)/(o-1)):null;for(Vr(t,l,u,S(r)?0:a-r,a),e=0,n=o-1;e<n;e++)Vr(t,l,u,i[e],i[e+1]);return Vr(t,l,u,s,S(r)?t.length:s+r),l}return Vr(t,l,u),l}(r,r.ticks),r._labelSizes=null),a&&r._convertTicksToLabels(r.ticks),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate()}configure(){const e=this;let t,n,r=e.options.reverse;e.isHorizontal()?(t=e.left,n=e.right):(t=e.top,n=e.bottom,r=!r),e._startPixel=t,e._endPixel=n,e._reversePixels=r,e._length=n-t,e._alignToPixels=e.options.alignToPixels}afterUpdate(){D(this.options.afterUpdate,[this])}beforeSetDimensions(){D(this.options.beforeSetDimensions,[this])}setDimensions(){const e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0}afterSetDimensions(){D(this.options.afterSetDimensions,[this])}_callHooks(e){const t=this;t.chart.notifyPlugins(e,t.getContext()),D(t.options[e],[t])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){D(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(e){const t=this,n=t.options.ticks;let r,i,o;for(r=0,i=e.length;r<i;r++)o=e[r],o.label=D(n.callback,[o.value,r,e],t)}afterTickToLabelConversion(){D(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){D(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const e=this,t=e.options,n=t.ticks,r=e.ticks.length,i=n.minRotation||0,o=n.maxRotation;let a,s,l,u=i;if(!e._isVisible()||!n.display||i>=o||r<=1||!e.isHorizontal())return void(e.labelRotation=i);const c=e._getLabelSizes(),d=c.widest.width,f=c.highest.height,h=fe(e.chart.width-d,0,e.maxWidth);a=t.offset?e.maxWidth/r:h/(r-1),d+6>a&&(a=h/(r-(t.offset?.5:1)),s=e.maxHeight-Wr(t.grid)-n.padding-Ur(t.title,e.chart.options.font),l=Math.sqrt(d*d+f*f),u=ae(Math.min(Math.asin(fe((c.highest.height+6)/a,-1,1)),Math.asin(fe(s/l,-1,1))-Math.asin(fe(f/l,-1,1)))),u=Math.max(i,Math.min(o,u))),e.labelRotation=u}afterCalculateLabelRotation(){D(this.options.afterCalculateLabelRotation,[this])}beforeFit(){D(this.options.beforeFit,[this])}fit(){const e=this,t={width:0,height:0},{chart:n,options:{ticks:r,title:i,grid:o}}=e,a=e._isVisible(),s=e.isHorizontal();if(a){const a=Ur(i,n.options.font);if(s?(t.width=e.maxWidth,t.height=Wr(o)+a):(t.height=e.maxHeight,t.width=Wr(o)+a),r.display&&e.ticks.length){const{first:n,last:i,widest:o,highest:a}=e._getLabelSizes(),l=2*r.padding,u=oe(e.labelRotation),c=Math.cos(u),d=Math.sin(u);if(s){const n=r.mirror?0:d*o.width+c*a.height;t.height=Math.min(e.maxHeight,t.height+n+l)}else{const n=r.mirror?0:c*o.width+d*a.height;t.width=Math.min(e.maxWidth,t.width+n+l)}e._calculatePadding(n,i,d,c)}}e._handleMargins(),s?(e.width=e._length=n.width-e._margins.left-e._margins.right,e.height=t.height):(e.width=t.width,e.height=e._length=n.height-e._margins.top-e._margins.bottom)}_calculatePadding(e,t,n,r){const i=this,{ticks:{align:o,padding:a},position:s}=i.options,l=0!==i.labelRotation,u="top"!==s&&"x"===i.axis;if(i.isHorizontal()){const s=i.getPixelForTick(0)-i.left,c=i.right-i.getPixelForTick(i.ticks.length-1);let d=0,f=0;l?u?(d=r*e.width,f=n*t.height):(d=n*e.height,f=r*t.width):"start"===o?f=t.width:"end"===o?d=e.width:(d=e.width/2,f=t.width/2),i.paddingLeft=Math.max((d-s+a)*i.width/(i.width-s),0),i.paddingRight=Math.max((f-c+a)*i.width/(i.width-c),0)}else{let n=t.height/2,r=e.height/2;"start"===o?(n=0,r=e.height):"end"===o&&(n=t.height,r=0),i.paddingTop=n+a,i.paddingBottom=r+a}}_handleMargins(){const e=this;e._margins&&(e._margins.left=Math.max(e.paddingLeft,e._margins.left),e._margins.top=Math.max(e.paddingTop,e._margins.top),e._margins.right=Math.max(e.paddingRight,e._margins.right),e._margins.bottom=Math.max(e.paddingBottom,e._margins.bottom))}afterFit(){D(this.options.afterFit,[this])}isHorizontal(){const{axis:e,position:t}=this.options;return"top"===t||"bottom"===t||"x"===e}isFullSize(){return this.options.fullSize}_convertTicksToLabels(e){const t=this;let n,r;for(t.beforeTickToLabelConversion(),t.generateTickLabels(e),n=0,r=e.length;n<r;n++)S(e[n].label)&&(e.splice(n,1),r--,n--);t.afterTickToLabelConversion()}_getLabelSizes(){const e=this;let t=e._labelSizes;if(!t){const n=e.options.ticks.sampleSize;let r=e.ticks;n<r.length&&(r=Br(r,n)),e._labelSizes=t=e._computeLabelSizes(r,r.length)}return t}_computeLabelSizes(e,t){const{ctx:n,_longestTextCache:r}=this,i=[],o=[];let a,s,l,u,c,d,f,h,p,g,m,b=0,v=0;for(a=0;a<t;++a){if(u=e[a].label,c=this._resolveTickFontOptions(a),n.font=d=c.string,f=r[d]=r[d]||{data:{},gc:[]},h=c.lineHeight,p=g=0,S(u)||M(u)){if(M(u))for(s=0,l=u.length;s<l;++s)m=u[s],S(m)||M(m)||(p=et(n,f.data,f.gc,p,m),g+=h)}else p=et(n,f.data,f.gc,p,u),g=h;i.push(p),o.push(g),b=Math.max(p,b),v=Math.max(g,v)}!function(e,t){A(e,(e=>{const n=e.gc,r=n.length/2;let i;if(r>t){for(i=0;i<r;++i)delete e.data[n[i]];n.splice(0,r)}}))}(r,t);const y=i.indexOf(b),x=o.indexOf(v),_=e=>({width:i[e]||0,height:o[e]||0});return{first:_(0),last:_(t-1),widest:_(y),highest:_(x),widths:i,heights:o}}getLabelForValue(e){return e}getPixelForValue(e,t){return NaN}getValueForPixel(e){}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getPixelForDecimal(e){const t=this;t._reversePixels&&(e=1-e);const n=t._startPixel+e*t._length;return fe(t._alignToPixels?nt(t.chart,n,0):n,-32768,32767)}getDecimalForPixel(e){const t=(e-this._startPixel)/this._length;return this._reversePixels?1-t:t}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:e,max:t}=this;return e<0&&t<0?t:e>0&&t>0?e:0}getContext(e){const t=this,n=t.ticks||[];if(e>=0&&e<n.length){const r=n[e];return r.$context||(r.$context=function(e,t,n){return Object.assign(Object.create(e),{tick:n,index:t,type:"tick"})}(t.getContext(),e,r))}return t.$context||(t.$context=(r=t.chart.getContext(),i=t,Object.assign(Object.create(r),{scale:i,type:"scale"})));var r,i}_tickSize(){const e=this,t=e.options.ticks,n=oe(e.labelRotation),r=Math.abs(Math.cos(n)),i=Math.abs(Math.sin(n)),o=e._getLabelSizes(),a=t.autoSkipPadding||0,s=o?o.widest.width+a:0,l=o?o.highest.height+a:0;return e.isHorizontal()?l*r>s*i?s/r:l/i:l*i<s*r?l/r:s/i}_isVisible(){const e=this.options.display;return"auto"!==e?!!e:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(e){const t=this,n=t.axis,r=t.chart,i=t.options,{grid:o,position:a}=i,s=o.offset,l=t.isHorizontal(),u=t.ticks.length+(s?1:0),c=Wr(o),d=[],f=o.setContext(t.getContext()),h=f.drawBorder?f.borderWidth:0,p=h/2,g=function(e){return nt(r,e,h)};let m,b,v,y,x,_,w,k,S,M,C,O;if("top"===a)m=g(t.bottom),_=t.bottom-c,k=m-p,M=g(e.top)+p,O=e.bottom;else if("bottom"===a)m=g(t.top),M=e.top,O=g(e.bottom)-p,_=m+p,k=t.top+c;else if("left"===a)m=g(t.right),x=t.right-c,w=m-p,S=g(e.left)+p,C=e.right;else if("right"===a)m=g(t.left),S=e.left,C=g(e.right)-p,x=m+p,w=t.left+c;else if("x"===n){if("center"===a)m=g((e.top+e.bottom)/2+.5);else if(E(a)){const e=Object.keys(a)[0],n=a[e];m=g(t.chart.scales[e].getPixelForValue(n))}M=e.top,O=e.bottom,_=m+p,k=_+c}else if("y"===n){if("center"===a)m=g((e.left+e.right)/2);else if(E(a)){const e=Object.keys(a)[0],n=a[e];m=g(t.chart.scales[e].getPixelForValue(n))}x=m-p,w=x-c,S=e.left,C=e.right}const T=P(i.ticks.maxTicksLimit,u),D=Math.max(1,Math.ceil(u/T));for(b=0;b<u;b+=D){const e=o.setContext(t.getContext(b)),n=e.lineWidth,i=e.color,a=o.borderDash||[],u=e.borderDashOffset,c=e.tickWidth,f=e.tickColor,h=e.tickBorderDash||[],p=e.tickBorderDashOffset;v=Hr(t,b,s),void 0!==v&&(y=nt(r,v,n),l?x=w=S=C=y:_=k=M=O=y,d.push({tx1:x,ty1:_,tx2:w,ty2:k,x1:S,y1:M,x2:C,y2:O,width:n,color:i,borderDash:a,borderDashOffset:u,tickWidth:c,tickColor:f,tickBorderDash:h,tickBorderDashOffset:p}))}return t._ticksLength=u,t._borderValue=m,d}_computeLabelItems(e){const t=this,n=t.axis,r=t.options,{position:i,ticks:o}=r,a=t.isHorizontal(),s=t.ticks,{align:l,crossAlign:u,padding:c,mirror:d}=o,f=Wr(r.grid),h=f+c,p=d?-c:h,g=-oe(t.labelRotation),m=[];let b,v,y,x,_,w,k,S,C,O,P,T,D="middle";if("top"===i)w=t.bottom-p,k=t._getXAxisLabelAlignment();else if("bottom"===i)w=t.top+p,k=t._getXAxisLabelAlignment();else if("left"===i){const e=t._getYAxisLabelAlignment(f);k=e.textAlign,_=e.x}else if("right"===i){const e=t._getYAxisLabelAlignment(f);k=e.textAlign,_=e.x}else if("x"===n){if("center"===i)w=(e.top+e.bottom)/2+h;else if(E(i)){const e=Object.keys(i)[0],n=i[e];w=t.chart.scales[e].getPixelForValue(n)+h}k=t._getXAxisLabelAlignment()}else if("y"===n){if("center"===i)_=(e.left+e.right)/2-h;else if(E(i)){const e=Object.keys(i)[0],n=i[e];_=t.chart.scales[e].getPixelForValue(n)}k=t._getYAxisLabelAlignment(f).textAlign}"y"===n&&("start"===l?D="top":"end"===l&&(D="bottom"));const A=t._getLabelSizes();for(b=0,v=s.length;b<v;++b){y=s[b],x=y.label;const e=o.setContext(t.getContext(b));S=t.getPixelForTick(b)+o.labelOffset,C=t._resolveTickFontOptions(b),O=C.lineHeight,P=M(x)?x.length:1;const n=P/2,r=e.color,l=e.textStrokeColor,c=e.textStrokeWidth;let f;if(a?(_=S,T="top"===i?"near"===u||0!==g?-P*O+O/2:"center"===u?-A.highest.height/2-n*O+O:-A.highest.height+O/2:"near"===u||0!==g?O/2:"center"===u?A.highest.height/2-n*O:A.highest.height-P*O,d&&(T*=-1)):(w=S,T=(1-P)*O/2),e.showLabelBackdrop){const t=yt(e.backdropPadding),n=A.heights[b],r=A.widths[b];let i=w+T-t.top,o=_-t.left;switch(D){case"middle":i-=n/2;break;case"bottom":i-=n}switch(k){case"center":o-=r/2;break;case"right":o-=r}f={left:o,top:i,width:r+t.width,height:n+t.height,color:e.backdropColor}}m.push({rotation:g,label:x,font:C,color:r,strokeColor:l,strokeWidth:c,textOffset:T,textAlign:k,textBaseline:D,translation:[_,w],backdrop:f})}return m}_getXAxisLabelAlignment(){const{position:e,ticks:t}=this.options;if(-oe(this.labelRotation))return"top"===e?"left":"right";let n="center";return"start"===t.align?n="left":"end"===t.align&&(n="right"),n}_getYAxisLabelAlignment(e){const t=this,{position:n,ticks:{crossAlign:r,mirror:i,padding:o}}=t.options,a=e+o,s=t._getLabelSizes().widest.width;let l,u;return"left"===n?i?(u=t.right+o,"near"===r?l="left":"center"===r?(l="center",u+=s/2):(l="right",u+=s)):(u=t.right-a,"near"===r?l="right":"center"===r?(l="center",u-=s/2):(l="left",u=t.left)):"right"===n?i?(u=t.left+o,"near"===r?l="right":"center"===r?(l="center",u-=s/2):(l="left",u-=s)):(u=t.left+a,"near"===r?l="left":"center"===r?(l="center",u+=s/2):(l="right",u=t.right)):l="right",{textAlign:l,x:u}}_computeLabelArea(){const e=this;if(e.options.ticks.mirror)return;const t=e.chart,n=e.options.position;return"left"===n||"right"===n?{top:0,left:e.left,bottom:t.height,right:e.right}:"top"===n||"bottom"===n?{top:e.top,left:0,bottom:e.bottom,right:t.width}:void 0}drawBackground(){const{ctx:e,options:{backgroundColor:t},left:n,top:r,width:i,height:o}=this;t&&(e.save(),e.fillStyle=t,e.fillRect(n,r,i,o),e.restore())}getLineWidthForValue(e){const t=this,n=t.options.grid;if(!t._isVisible()||!n.display)return 0;const r=t.ticks.findIndex((t=>t.value===e));return r>=0?n.setContext(t.getContext(r)).lineWidth:0}drawGrid(e){const t=this,n=t.options.grid,r=t.ctx,i=t._gridLineItems||(t._gridLineItems=t._computeGridLineItems(e));let o,a;const s=(e,t,n)=>{n.width&&n.color&&(r.save(),r.lineWidth=n.width,r.strokeStyle=n.color,r.setLineDash(n.borderDash||[]),r.lineDashOffset=n.borderDashOffset,r.beginPath(),r.moveTo(e.x,e.y),r.lineTo(t.x,t.y),r.stroke(),r.restore())};if(n.display)for(o=0,a=i.length;o<a;++o){const e=i[o];n.drawOnChartArea&&s({x:e.x1,y:e.y1},{x:e.x2,y:e.y2},e),n.drawTicks&&s({x:e.tx1,y:e.ty1},{x:e.tx2,y:e.ty2},{color:e.tickColor,width:e.tickWidth,borderDash:e.tickBorderDash,borderDashOffset:e.tickBorderDashOffset})}}drawBorder(){const e=this,{chart:t,ctx:n,options:{grid:r}}=e,i=r.setContext(e.getContext()),o=r.drawBorder?i.borderWidth:0;if(!o)return;const a=r.setContext(e.getContext(0)).lineWidth,s=e._borderValue;let l,u,c,d;e.isHorizontal()?(l=nt(t,e.left,o)-o/2,u=nt(t,e.right,a)+a/2,c=d=s):(c=nt(t,e.top,o)-o/2,d=nt(t,e.bottom,a)+a/2,l=u=s),n.save(),n.lineWidth=i.borderWidth,n.strokeStyle=i.borderColor,n.beginPath(),n.moveTo(l,c),n.lineTo(u,d),n.stroke(),n.restore()}drawLabels(e){const t=this;if(!t.options.ticks.display)return;const n=t.ctx,r=t._computeLabelArea();r&&at(n,r);const i=t._labelItems||(t._labelItems=t._computeLabelItems(e));let o,a;for(o=0,a=i.length;o<a;++o){const e=i[o],t=e.font,r=e.label;e.backdrop&&(n.fillStyle=e.backdrop.color,n.fillRect(e.backdrop.left,e.backdrop.top,e.backdrop.width,e.backdrop.height)),ct(n,r,0,e.textOffset,t,e)}r&&st(n)}drawTitle(){const{ctx:e,options:{position:t,title:n,reverse:r}}=this;if(!n.display)return;const i=xt(n.font),o=yt(n.padding),a=n.align;let s=i.lineHeight/2;"bottom"===t||"center"===t||E(t)?(s+=o.bottom,M(n.text)&&(s+=i.lineHeight*(n.text.length-1))):s+=o.top;const{titleX:l,titleY:u,maxWidth:c,rotation:d}=function(e,t,n,r){const{top:i,left:o,bottom:a,right:s,chart:l}=e,{chartArea:u,scales:c}=l;let d,f,h,p=0;const g=a-i,m=s-o;if(e.isHorizontal()){if(f=_(r,o,s),E(n)){const e=Object.keys(n)[0],r=n[e];h=c[e].getPixelForValue(r)+g-t}else h="center"===n?(u.bottom+u.top)/2+g-t:jr(e,n,t);d=s-o}else{if(E(n)){const e=Object.keys(n)[0],r=n[e];f=c[e].getPixelForValue(r)-m+t}else f="center"===n?(u.left+u.right)/2-m+t:jr(e,n,t);h=_(r,a,i),p="left"===n?-K:K}return{titleX:f,titleY:h,maxWidth:d,rotation:p}}(this,s,t,a);ct(e,n.text,0,0,i,{color:n.color,maxWidth:c,rotation:d,textAlign:$r(a,t,r),textBaseline:"middle",translation:[l,u]})}draw(e){const t=this;t._isVisible()&&(t.drawBackground(),t.drawGrid(e),t.drawBorder(),t.drawTitle(),t.drawLabels(e))}_layers(){const e=this,t=e.options,n=t.ticks&&t.ticks.z||0,r=P(t.grid&&t.grid.z,-1);return e._isVisible()&&e.draw===Yr.prototype.draw?[{z:r,draw(t){e.drawBackground(),e.drawGrid(t),e.drawTitle()}},{z:r+1,draw(){e.drawBorder()}},{z:n,draw(t){e.drawLabels(t)}}]:[{z:n,draw(t){e.draw(t)}}]}getMatchingVisibleMetas(e){const t=this,n=t.chart.getSortedVisibleDatasetMetas(),r=t.axis+"AxisID",i=[];let o,a;for(o=0,a=n.length;o<a;++o){const a=n[o];a[r]!==t.id||e&&a.type!==e||i.push(a)}return i}_resolveTickFontOptions(e){return xt(this.options.ticks.setContext(this.getContext(e)).font)}_maxDigits(){const e=this,t=e._resolveTickFontOptions(0).lineHeight;return(e.isHorizontal()?e.width:e.height)/t}}class Xr{constructor(e,t,n){this.type=e,this.scope=t,this.override=n,this.items=Object.create(null)}isForType(e){return Object.prototype.isPrototypeOf.call(this.type.prototype,e.prototype)}register(e){const t=this,n=Object.getPrototypeOf(e);let r;(function(e){return"id"in e&&"defaults"in e})(n)&&(r=t.register(n));const i=t.items,o=e.id,a=t.scope+"."+o;if(!o)throw new Error("class does not have id: "+e);return o in i||(i[o]=e,function(e,t,n){const r=z(Object.create(null),[n?Je.get(n):{},Je.get(t),e.defaults]);Je.set(t,r),e.defaultRoutes&&function(e,t){Object.keys(t).forEach((n=>{const r=n.split("."),i=r.pop(),o=[e].concat(r).join("."),a=t[n].split("."),s=a.pop(),l=a.join(".");Je.route(o,i,l,s)}))}(t,e.defaultRoutes),e.descriptors&&Je.describe(t,e.descriptors)}(e,a,r),t.override&&Je.override(e.id,e.overrides)),a}get(e){return this.items[e]}unregister(e){const t=this.items,n=e.id,r=this.scope;n in t&&delete t[n],r&&n in Je[r]&&(delete Je[r][n],this.override&&delete Qe[n])}}var qr=new class{constructor(){this.controllers=new Xr(Nn,"datasets",!0),this.elements=new Xr(Nr,"elements"),this.plugins=new Xr(Object,"plugins"),this.scales=new Xr(Yr,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...e){this._each("register",e)}remove(...e){this._each("unregister",e)}addControllers(...e){this._each("register",e,this.controllers)}addElements(...e){this._each("register",e,this.elements)}addPlugins(...e){this._each("register",e,this.plugins)}addScales(...e){this._each("register",e,this.scales)}getController(e){return this._get(e,this.controllers,"controller")}getElement(e){return this._get(e,this.elements,"element")}getPlugin(e){return this._get(e,this.plugins,"plugin")}getScale(e){return this._get(e,this.scales,"scale")}removeControllers(...e){this._each("unregister",e,this.controllers)}removeElements(...e){this._each("unregister",e,this.elements)}removePlugins(...e){this._each("unregister",e,this.plugins)}removeScales(...e){this._each("unregister",e,this.scales)}_each(e,t,n){const r=this;[...t].forEach((t=>{const i=n||r._getRegistryForType(t);n||i.isForType(t)||i===r.plugins&&t.id?r._exec(e,i,t):A(t,(t=>{const i=n||r._getRegistryForType(t);r._exec(e,i,t)}))}))}_exec(e,t,n){const r=H(e);D(n["before"+r],[],n),t[e](n),D(n["after"+r],[],n)}_getRegistryForType(e){for(let t=0;t<this._typedRegistries.length;t++){const n=this._typedRegistries[t];if(n.isForType(e))return n}return this.plugins}_get(e,t,n){const r=t.get(e);if(void 0===r)throw new Error('"'+e+'" is not a registered '+n+".");return r}};class Qr{constructor(){this._init=[]}notify(e,t,n,r){const i=this;"beforeInit"===t&&(i._init=i._createDescriptors(e,!0),i._notify(i._init,e,"install"));const o=r?i._descriptors(e).filter(r):i._descriptors(e),a=i._notify(o,e,t,n);return"destroy"===t&&(i._notify(o,e,"stop"),i._notify(i._init,e,"uninstall")),a}_notify(e,t,n,r){r=r||{};for(const i of e){const e=i.plugin;if(!1===D(e[n],[t,r,i.options],e)&&r.cancelable)return!1}return!0}invalidate(){S(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(e){if(this._cache)return this._cache;const t=this._cache=this._createDescriptors(e);return this._notifyStateChanges(e),t}_createDescriptors(e,t){const n=e&&e.config,r=P(n.options&&n.options.plugins,{}),i=function(e){const t=[],n=Object.keys(qr.plugins.items);for(let e=0;e<n.length;e++)t.push(qr.getPlugin(n[e]));const r=e.plugins||[];for(let e=0;e<r.length;e++){const n=r[e];-1===t.indexOf(n)&&t.push(n)}return t}(n);return!1!==r||t?function(e,t,n,r){const i=[],o=e.getContext();for(let a=0;a<t.length;a++){const s=t[a],l=Kr(n[s.id],r);null!==l&&i.push({plugin:s,options:Gr(e.config,s,l,o)})}return i}(e,i,r,t):[]}_notifyStateChanges(e){const t=this._oldCache||[],n=this._cache,r=(e,t)=>e.filter((e=>!t.some((t=>e.plugin.id===t.plugin.id))));this._notify(r(t,n),e,"stop"),this._notify(r(n,t),e,"start")}}function Kr(e,t){return t||!1!==e?!0===e?{}:e:null}function Gr(e,t,n,r){const i=e.pluginScopeKeys(t),o=e.getOptionScopes(n,i);return e.createResolver(o,r,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Zr(e,t){const n=Je.datasets[e]||{};return((t.datasets||{})[e]||{}).indexAxis||t.indexAxis||n.indexAxis||"x"}function Jr(e,t){return"x"===e||"y"===e?e:t.axis||function(e){return"top"===e||"bottom"===e?"x":"left"===e||"right"===e?"y":void 0}(t.position)||e.charAt(0).toLowerCase()}function ei(e){const t=e.options||(e.options={});t.plugins=P(t.plugins,{}),t.scales=function(e,t){const n=Qe[e.type]||{scales:{}},r=t.scales||{},i=Zr(e.type,t),o=Object.create(null),a=Object.create(null);return Object.keys(r).forEach((e=>{const t=r[e],s=Jr(e,t),l=function(e,t){return e===t?"_index_":"_value_"}(s,i),u=n.scales||{};o[s]=o[s]||e,a[e]=F(Object.create(null),[{axis:s},t,u[s],u[l]])})),e.data.datasets.forEach((n=>{const i=n.type||e.type,s=n.indexAxis||Zr(i,t),l=(Qe[i]||{}).scales||{};Object.keys(l).forEach((e=>{const t=function(e,t){let n=e;return"_index_"===e?n=t:"_value_"===e&&(n="x"===t?"y":"x"),n}(e,s),i=n[t+"AxisID"]||o[t]||t;a[i]=a[i]||Object.create(null),F(a[i],[{axis:t},r[i],l[e]])}))})),Object.keys(a).forEach((e=>{const t=a[e];F(t,[Je.scales[t.type],Je.scale])})),a}(e,t)}function ti(e){return(e=e||{}).datasets=e.datasets||[],e.labels=e.labels||[],e}const ni=new Map,ri=new Set;function ii(e,t){let n=ni.get(e);return n||(n=t(),ni.set(e,n),ri.add(n)),n}const oi=(e,t,n)=>{const r=B(t,n);void 0!==r&&e.add(r)};class ai{constructor(e){this._config=function(e){return(e=e||{}).data=ti(e.data),ei(e),e}(e),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(e){this._config.type=e}get data(){return this._config.data}set data(e){this._config.data=ti(e)}get options(){return this._config.options}set options(e){this._config.options=e}get plugins(){return this._config.plugins}update(){const e=this._config;this.clearCache(),ei(e)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(e){return ii(e,(()=>[[`datasets.${e}`,""]]))}datasetAnimationScopeKeys(e,t){return ii(`${e}.transition.${t}`,(()=>[[`datasets.${e}.transitions.${t}`,`transitions.${t}`],[`datasets.${e}`,""]]))}datasetElementScopeKeys(e,t){return ii(`${e}-${t}`,(()=>[[`datasets.${e}.elements.${t}`,`datasets.${e}`,`elements.${t}`,""]]))}pluginScopeKeys(e){const t=e.id;return ii(`${this.type}-plugin-${t}`,(()=>[[`plugins.${t}`,...e.additionalOptionScopes||[]]]))}_cachedScopes(e,t){const n=this._scopeCache;let r=n.get(e);return r&&!t||(r=new Map,n.set(e,r)),r}getOptionScopes(e,t,n){const{options:r,type:i}=this,o=this._cachedScopes(e,n),a=o.get(t);if(a)return a;const s=new Set;t.forEach((t=>{e&&(s.add(e),t.forEach((t=>oi(s,e,t)))),t.forEach((e=>oi(s,r,e))),t.forEach((e=>oi(s,Qe[i]||{},e))),t.forEach((e=>oi(s,Je,e))),t.forEach((e=>oi(s,Ke,e)))}));const l=Array.from(s);return 0===l.length&&l.push(Object.create(null)),ri.has(t)&&o.set(t,l),l}chartOptionScopes(){const{options:e,type:t}=this;return[e,Qe[t]||{},Je.datasets[t]||{},{type:t},Je,Ke]}resolveNamedOptions(e,t,n,r=[""]){const i={$shared:!0},{resolver:o,subPrefixes:a}=si(this._resolverCache,e,r);let s=o;(function(e,t){const{isScriptable:n,isIndexable:r}=Tt(e);for(const i of t)if(n(i)&&U(e[i])||r(i)&&M(e[i]))return!0;return!1})(o,t)&&(i.$shared=!1,s=Pt(o,n=U(n)?n():n,this.createResolver(e,n,a)));for(const e of t)i[e]=s[e];return i}createResolver(e,t,n=[""],r){const{resolver:i}=si(this._resolverCache,e,n);return E(t)?Pt(i,t,void 0,r):i}}function si(e,t,n){let r=e.get(t);r||(r=new Map,e.set(t,r));const i=n.join();let o=r.get(i);return o||(o={resolver:Ot(t,n),subPrefixes:n.filter((e=>!e.toLowerCase().includes("hover")))},r.set(i,o)),o}const li=["top","bottom","left","right","chartArea"];function ui(e,t){return"top"===e||"bottom"===e||-1===li.indexOf(e)&&"x"===t}function ci(e,t){return function(n,r){return n[e]===r[e]?n[t]-r[t]:n[e]-r[e]}}function di(e){const t=e.chart,n=t.options.animation;t.notifyPlugins("afterRender"),D(n&&n.onComplete,[e],t)}function fi(e){const t=e.chart,n=t.options.animation;D(n&&n.onProgress,[e],t)}function hi(e){return Xt()&&"string"==typeof e?e=document.getElementById(e):e&&e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas),e}const pi={},gi=e=>{const t=hi(e);return Object.values(pi).filter((e=>e.canvas===t)).pop()};class mi{constructor(e,t){const n=this,r=this.config=new ai(t),i=hi(e),o=gi(i);if(o)throw new Error("Canvas is already in use. Chart with ID '"+o.id+"' must be destroyed before the canvas can be reused.");const a=r.createResolver(r.chartOptionScopes(),n.getContext());this.platform=new(r.platform||function(e){return!Xt()||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas?wr:Ir}(i));const s=n.platform.acquireContext(i,a.aspectRatio),l=s&&s.canvas,u=l&&l.height,c=l&&l.width;this.id=k(),this.ctx=s,this.canvas=l,this.width=c,this.height=u,this._options=a,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Qr,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(e,t){let n;return function(){return t?(clearTimeout(n),n=setTimeout(e,t)):e(),t}}((()=>this.update("resize")),a.resizeDelay||0),pi[n.id]=n,s&&l?(yn.listen(n,"complete",di),yn.listen(n,"progress",fi),n._initialize(),n.attached&&n.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:e,maintainAspectRatio:t},width:n,height:r,_aspectRatio:i}=this;return S(e)?t&&i?i:r?n/r:null:e}get data(){return this.config.data}set data(e){this.config.data=e}get options(){return this._options}set options(e){this.config.options=e}_initialize(){const e=this;return e.notifyPlugins("beforeInit"),e.options.responsive?e.resize():tn(e,e.options.devicePixelRatio),e.bindEvents(),e.notifyPlugins("afterInit"),e}clear(){return rt(this.canvas,this.ctx),this}stop(){return yn.stop(this),this}resize(e,t){yn.running(this)?this._resizeBeforeDraw={width:e,height:t}:this._resize(e,t)}_resize(e,t){const n=this,r=n.options,i=n.canvas,o=r.maintainAspectRatio&&n.aspectRatio,a=n.platform.getMaximumSize(i,e,t,o),s=r.devicePixelRatio||n.platform.getDevicePixelRatio();n.width=a.width,n.height=a.height,n._aspectRatio=n.aspectRatio,tn(n,s,!0)&&(n.notifyPlugins("resize",{size:a}),D(r.onResize,[n,a],n),n.attached&&n._doResize()&&n.render())}ensureScalesHaveIDs(){A(this.options.scales||{},((e,t)=>{e.id=t}))}buildOrUpdateScales(){const e=this,t=e.options,n=t.scales,r=e.scales,i=Object.keys(r).reduce(((e,t)=>(e[t]=!1,e)),{});let o=[];n&&(o=o.concat(Object.keys(n).map((e=>{const t=n[e],r=Jr(e,t),i="r"===r,o="x"===r;return{options:t,dposition:i?"chartArea":o?"bottom":"left",dtype:i?"radialLinear":o?"category":"linear"}})))),A(o,(n=>{const o=n.options,a=o.id,s=Jr(a,o),l=P(o.type,n.dtype);void 0!==o.position&&ui(o.position,s)===ui(n.dposition)||(o.position=n.dposition),i[a]=!0;let u=null;a in r&&r[a].type===l?u=r[a]:(u=new(qr.getScale(l))({id:a,type:l,ctx:e.ctx,chart:e}),r[u.id]=u),u.init(o,t)})),A(i,((e,t)=>{e||delete r[t]})),A(r,(t=>{xr.configure(e,t,t.options),xr.addBox(e,t)}))}_updateMetasets(){const e=this,t=e._metasets,n=e.data.datasets.length,r=t.length;if(t.sort(((e,t)=>e.index-t.index)),r>n){for(let t=n;t<r;++t)e._destroyDatasetMeta(t);t.splice(n,r-n)}e._sortedMetasets=t.slice(0).sort(ci("order","index"))}_removeUnreferencedMetasets(){const e=this,{_metasets:t,data:{datasets:n}}=e;t.length>n.length&&delete e._stacks,t.forEach(((t,r)=>{0===n.filter((e=>e===t._dataset)).length&&e._destroyDatasetMeta(r)}))}buildOrUpdateControllers(){const e=this,t=[],n=e.data.datasets;let r,i;for(e._removeUnreferencedMetasets(),r=0,i=n.length;r<i;r++){const i=n[r];let o=e.getDatasetMeta(r);const a=i.type||e.config.type;if(o.type&&o.type!==a&&(e._destroyDatasetMeta(r),o=e.getDatasetMeta(r)),o.type=a,o.indexAxis=i.indexAxis||Zr(a,e.options),o.order=i.order||0,o.index=r,o.label=""+i.label,o.visible=e.isDatasetVisible(r),o.controller)o.controller.updateIndex(r),o.controller.linkScales();else{const n=qr.getController(a),{datasetElementType:i,dataElementType:s}=Je.datasets[a];Object.assign(n.prototype,{dataElementType:qr.getElement(s),datasetElementType:i&&qr.getElement(i)}),o.controller=new n(e,r),t.push(o.controller)}}return e._updateMetasets(),t}_resetElements(){const e=this;A(e.data.datasets,((t,n)=>{e.getDatasetMeta(n).controller.reset()}),e)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(e){const t=this,n=t.config;n.update(),t._options=n.createResolver(n.chartOptionScopes(),t.getContext()),A(t.scales,(e=>{xr.removeBox(t,e)}));const r=t._animationsDisabled=!t.options.animation;if(t.ensureScalesHaveIDs(),t.buildOrUpdateScales(),((e,t)=>{if(e.size!==t.size)return!1;for(const n of e)if(!t.has(n))return!1;return!0})(new Set(Object.keys(t._listeners)),new Set(t.options.events))&&!!this._responsiveListeners===t.options.responsive||(t.unbindEvents(),t.bindEvents()),t._plugins.invalidate(),!1===t.notifyPlugins("beforeUpdate",{mode:e,cancelable:!0}))return;const i=t.buildOrUpdateControllers();t.notifyPlugins("beforeElementsUpdate");let o=0;for(let e=0,n=t.data.datasets.length;e<n;e++){const{controller:n}=t.getDatasetMeta(e),a=!r&&-1===i.indexOf(n);n.buildOrUpdateElements(a),o=Math.max(+n.getMaxOverflow(),o)}t._minPadding=o,t._updateLayout(o),r||A(i,(e=>{e.reset()})),t._updateDatasets(e),t.notifyPlugins("afterUpdate",{mode:e}),t._layers.sort(ci("z","_idx")),t._lastEvent&&t._eventHandler(t._lastEvent,!0),t.render()}_updateLayout(e){const t=this;if(!1===t.notifyPlugins("beforeLayout",{cancelable:!0}))return;xr.update(t,t.width,t.height,e);const n=t.chartArea,r=n.width<=0||n.height<=0;t._layers=[],A(t.boxes,(e=>{r&&"chartArea"===e.position||(e.configure&&e.configure(),t._layers.push(...e._layers()))}),t),t._layers.forEach(((e,t)=>{e._idx=t})),t.notifyPlugins("afterLayout")}_updateDatasets(e){const t=this,n="function"==typeof e;if(!1!==t.notifyPlugins("beforeDatasetsUpdate",{mode:e,cancelable:!0})){for(let r=0,i=t.data.datasets.length;r<i;++r)t._updateDataset(r,n?e({datasetIndex:r}):e);t.notifyPlugins("afterDatasetsUpdate",{mode:e})}}_updateDataset(e,t){const n=this,r=n.getDatasetMeta(e),i={meta:r,index:e,mode:t,cancelable:!0};!1!==n.notifyPlugins("beforeDatasetUpdate",i)&&(r.controller._update(t),i.cancelable=!1,n.notifyPlugins("afterDatasetUpdate",i))}render(){const e=this;!1!==e.notifyPlugins("beforeRender",{cancelable:!0})&&(yn.has(e)?e.attached&&!yn.running(e)&&yn.start(e):(e.draw(),di({chart:e})))}draw(){const e=this;let t;if(e._resizeBeforeDraw){const{width:t,height:n}=e._resizeBeforeDraw;e._resize(t,n),e._resizeBeforeDraw=null}if(e.clear(),e.width<=0||e.height<=0)return;if(!1===e.notifyPlugins("beforeDraw",{cancelable:!0}))return;const n=e._layers;for(t=0;t<n.length&&n[t].z<=0;++t)n[t].draw(e.chartArea);for(e._drawDatasets();t<n.length;++t)n[t].draw(e.chartArea);e.notifyPlugins("afterDraw")}_getSortedDatasetMetas(e){const t=this._sortedMetasets,n=[];let r,i;for(r=0,i=t.length;r<i;++r){const i=t[r];e&&!i.visible||n.push(i)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){const e=this;if(!1===e.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=e.getSortedVisibleDatasetMetas();for(let n=t.length-1;n>=0;--n)e._drawDataset(t[n]);e.notifyPlugins("afterDatasetsDraw")}_drawDataset(e){const t=this,n=t.ctx,r=e._clip,i=!r.disabled,o=t.chartArea,a={meta:e,index:e.index,cancelable:!0};!1!==t.notifyPlugins("beforeDatasetDraw",a)&&(i&&at(n,{left:!1===r.left?0:o.left-r.left,right:!1===r.right?t.width:o.right+r.right,top:!1===r.top?0:o.top-r.top,bottom:!1===r.bottom?t.height:o.bottom+r.bottom}),e.controller.draw(),i&&st(n),a.cancelable=!1,t.notifyPlugins("afterDatasetDraw",a))}getElementsAtEventForMode(e,t,n,r){const i=lr.modes[t];return"function"==typeof i?i(this,e,n,r):[]}getDatasetMeta(e){const t=this.data.datasets[e],n=this._metasets;let r=n.filter((e=>e&&e._dataset===t)).pop();return r||(r={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:t&&t.order||0,index:e,_dataset:t,_parsed:[],_sorted:!1},n.push(r)),r}getContext(){return this.$context||(this.$context={chart:this,type:"chart"})}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(e){const t=this.data.datasets[e];if(!t)return!1;const n=this.getDatasetMeta(e);return"boolean"==typeof n.hidden?!n.hidden:!t.hidden}setDatasetVisibility(e,t){this.getDatasetMeta(e).hidden=!t}toggleDataVisibility(e){this._hiddenIndices[e]=!this._hiddenIndices[e]}getDataVisibility(e){return!this._hiddenIndices[e]}_updateVisibility(e,t,n){const r=this,i=n?"show":"hide",o=r.getDatasetMeta(e),a=o.controller._resolveAnimations(void 0,i);W(t)?(o.data[t].hidden=!n,r.update()):(r.setDatasetVisibility(e,n),a.update(o,{visible:n}),r.update((t=>t.datasetIndex===e?i:void 0)))}hide(e,t){this._updateVisibility(e,t,!1)}show(e,t){this._updateVisibility(e,t,!0)}_destroyDatasetMeta(e){const t=this,n=t._metasets&&t._metasets[e];n&&n.controller&&(n.controller._destroy(),delete t._metasets[e])}destroy(){const e=this,{canvas:t,ctx:n}=e;let r,i;for(e.stop(),yn.remove(e),r=0,i=e.data.datasets.length;r<i;++r)e._destroyDatasetMeta(r);e.config.clearCache(),t&&(e.unbindEvents(),rt(t,n),e.platform.releaseContext(n),e.canvas=null,e.ctx=null),e.notifyPlugins("destroy"),delete pi[e.id]}toBase64Image(...e){return this.canvas.toDataURL(...e)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const e=this,t=e._listeners,n=e.platform,r=function(t,n,r){t.offsetX=n,t.offsetY=r,e._eventHandler(t)};A(e.options.events,(i=>((r,i)=>{n.addEventListener(e,r,i),t[r]=i})(i,r)))}bindResponsiveEvents(){const e=this;e._responsiveListeners||(e._responsiveListeners={});const t=e._responsiveListeners,n=e.platform,r=(r,i)=>{n.addEventListener(e,r,i),t[r]=i},i=(r,i)=>{t[r]&&(n.removeEventListener(e,r,i),delete t[r])},o=(t,n)=>{e.canvas&&e.resize(t,n)};let a;const s=()=>{i("attach",s),e.attached=!0,e.resize(),r("resize",o),r("detach",a)};a=()=>{e.attached=!1,i("resize",o),r("attach",s)},n.isAttached(e.canvas)?s():a()}unbindEvents(){const e=this;A(e._listeners,((t,n)=>{e.platform.removeEventListener(e,n,t)})),e._listeners={},A(e._responsiveListeners,((t,n)=>{e.platform.removeEventListener(e,n,t)})),e._responsiveListeners=void 0}updateHoverStyle(e,t,n){const r=n?"set":"remove";let i,o,a,s;for("dataset"===t&&(i=this.getDatasetMeta(e[0].datasetIndex),i.controller["_"+r+"DatasetHoverStyle"]()),a=0,s=e.length;a<s;++a){o=e[a];const t=o&&this.getDatasetMeta(o.datasetIndex).controller;t&&t[r+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(e){const t=this,n=t._active||[],r=e.map((({datasetIndex:e,index:n})=>{const r=t.getDatasetMeta(e);if(!r)throw new Error("No dataset found at index "+e);return{datasetIndex:e,element:r.data[n],index:n}}));!L(r,n)&&(t._active=r,t._updateHoverStyles(r,n))}notifyPlugins(e,t,n){return this._plugins.notify(this,e,t,n)}_updateHoverStyles(e,t,n){const r=this,i=r.options.hover,o=(e,t)=>e.filter((e=>!t.some((t=>e.datasetIndex===t.datasetIndex&&e.index===t.index)))),a=o(t,e),s=n?e:o(e,t);a.length&&r.updateHoverStyle(a,i.mode,!1),s.length&&i.mode&&r.updateHoverStyle(s,i.mode,!0)}_eventHandler(e,t){const n=this,r={event:e,replay:t,cancelable:!0},i=t=>(t.options.events||this.options.events).includes(e.type);if(!1===n.notifyPlugins("beforeEvent",r,i))return;const o=n._handleEvent(e,t);return r.cancelable=!1,n.notifyPlugins("afterEvent",r,i),(o||r.changed)&&n.render(),n}_handleEvent(e,t){const n=this,{_active:r=[],options:i}=n,o=i.hover,a=t;let s=[],l=!1,u=null;return"mouseout"!==e.type&&(s=n.getElementsAtEventForMode(e,o.mode,o,a),u="click"===e.type?n._lastEvent:e),n._lastEvent=null,ot(e,n.chartArea,n._minPadding)&&(D(i.onHover,[e,s,n],n),"mouseup"!==e.type&&"click"!==e.type&&"contextmenu"!==e.type||D(i.onClick,[e,s,n],n)),l=!L(s,r),(l||t)&&(n._active=s,n._updateHoverStyles(s,r,t)),n._lastEvent=u,l}}const bi=()=>A(mi.instances,(e=>e._plugins.invalidate())),vi=!0;function yi(e,t,n){const{startAngle:r,pixelMargin:i,x:o,y:a,outerRadius:s,innerRadius:l}=t;let u=i/s;e.beginPath(),e.arc(o,a,s,r-u,n+u),l>i?(u=i/l,e.arc(o,a,l,n+u,r-u,!0)):e.arc(o,a,i,n+K,r-K),e.closePath(),e.clip()}function xi(e,t,n,r){return{x:n+e*Math.cos(t),y:r+e*Math.sin(t)}}function _i(e,t,n,r,i){const{x:o,y:a,startAngle:s,pixelMargin:l,innerRadius:u}=t,c=Math.max(t.outerRadius+r+n-l,0),d=u>0?u+r+n+l:0;let f=0;const h=i-s;if(r){const e=((u>0?u-r:0)+(c>0?c-r:0))/2;f=(h-(0!==e?h*e/(e+r):h))/2}const p=(h-Math.max(.001,h*c-n/$)/c)/2,g=s+p+f,m=i-p-f,{outerStart:b,outerEnd:v,innerStart:y,innerEnd:x}=function(e,t,n,r){const i=mt(e.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(n-t)/2,a=Math.min(o,r*t/2),s=e=>{const t=(n-Math.min(o,e))*r/2;return fe(e,0,Math.min(o,t))};return{outerStart:s(i.outerStart),outerEnd:s(i.outerEnd),innerStart:fe(i.innerStart,0,a),innerEnd:fe(i.innerEnd,0,a)}}(t,d,c,m-g),_=c-b,w=c-v,k=g+b/_,S=m-v/w,M=d+y,E=d+x,C=g+y/M,O=m-x/E;if(e.beginPath(),e.arc(o,a,c,k,S),v>0){const t=xi(w,S,o,a);e.arc(t.x,t.y,v,S,m+K)}const P=xi(E,m,o,a);if(e.lineTo(P.x,P.y),x>0){const t=xi(E,O,o,a);e.arc(t.x,t.y,x,m+K,O+Math.PI)}if(e.arc(o,a,d,m-x/d,g+y/d,!0),y>0){const t=xi(M,C,o,a);e.arc(t.x,t.y,y,C+Math.PI,g-K)}const T=xi(_,g,o,a);if(e.lineTo(T.x,T.y),b>0){const t=xi(_,k,o,a);e.arc(t.x,t.y,b,g-K,k)}e.closePath()}Object.defineProperties(mi,{defaults:{enumerable:vi,value:Je},instances:{enumerable:vi,value:pi},overrides:{enumerable:vi,value:Qe},registry:{enumerable:vi,value:qr},version:{enumerable:vi,value:"3.5.1"},getChart:{enumerable:vi,value:gi},register:{enumerable:vi,value:(...e)=>{qr.add(...e),bi()}},unregister:{enumerable:vi,value:(...e)=>{qr.remove(...e),bi()}}});class wi extends Nr{constructor(e){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,e&&Object.assign(this,e)}inRange(e,t,n){const r=this.getProps(["x","y"],n),{angle:i,distance:o}=function(e,t){const n=t.x-e.x,r=t.y-e.y,i=Math.sqrt(n*n+r*r);let o=Math.atan2(r,n);return o<-.5*$&&(o+=Y),{angle:o,distance:i}}(r,{x:e,y:t}),{startAngle:a,endAngle:s,innerRadius:l,outerRadius:u,circumference:c}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),d=this.options.spacing/2;return(c>=Y||de(i,a,s))&&o>=l+d&&o<=u+d}getCenterPoint(e){const{x:t,y:n,startAngle:r,endAngle:i,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],e),{offset:s,spacing:l}=this.options,u=(r+i)/2,c=(o+a+l+s)/2;return{x:t+Math.cos(u)*c,y:n+Math.sin(u)*c}}tooltipPosition(e){return this.getCenterPoint(e)}draw(e){const t=this,{options:n,circumference:r}=t,i=(n.offset||0)/2,o=(n.spacing||0)/2;if(t.pixelMargin="inner"===n.borderAlign?.33:0,t.fullCircles=r>Y?Math.floor(r/Y):0,0===r||t.innerRadius<0||t.outerRadius<0)return;e.save();let a=0;if(i){a=i/2;const n=(t.startAngle+t.endAngle)/2;e.translate(Math.cos(n)*a,Math.sin(n)*a),t.circumference>=$&&(a=i)}e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor;const s=function(e,t,n,r){const{fullCircles:i,startAngle:o,circumference:a}=t;let s=t.endAngle;if(i){_i(e,t,n,r,o+Y);for(let t=0;t<i;++t)e.fill();isNaN(a)||(s=o+a%Y,a%Y==0&&(s+=Y))}return _i(e,t,n,r,s),e.fill(),s}(e,t,a,o);(function(e,t,n,r,i){const{options:o}=t,a="inner"===o.borderAlign;o.borderWidth&&(a?(e.lineWidth=2*o.borderWidth,e.lineJoin="round"):(e.lineWidth=o.borderWidth,e.lineJoin="bevel"),t.fullCircles&&function(e,t,n){const{x:r,y:i,startAngle:o,pixelMargin:a,fullCircles:s}=t,l=Math.max(t.outerRadius-a,0),u=t.innerRadius+a;let c;for(n&&yi(e,t,o+Y),e.beginPath(),e.arc(r,i,u,o+Y,o,!0),c=0;c<s;++c)e.stroke();for(e.beginPath(),e.arc(r,i,l,o,o+Y),c=0;c<s;++c)e.stroke()}(e,t,a),a&&yi(e,t,i),_i(e,t,n,r,i),e.stroke())})(e,t,a,o,s),e.restore()}}function ki(e,t,n=t){e.lineCap=P(n.borderCapStyle,t.borderCapStyle),e.setLineDash(P(n.borderDash,t.borderDash)),e.lineDashOffset=P(n.borderDashOffset,t.borderDashOffset),e.lineJoin=P(n.borderJoinStyle,t.borderJoinStyle),e.lineWidth=P(n.borderWidth,t.borderWidth),e.strokeStyle=P(n.borderColor,t.borderColor)}function Si(e,t,n){e.lineTo(n.x,n.y)}function Mi(e,t,n={}){const r=e.length,{start:i=0,end:o=r-1}=n,{start:a,end:s}=t,l=Math.max(i,a),u=Math.min(o,s),c=i<a&&o<a||i>s&&o>s;return{count:r,start:l,loop:t.loop,ilen:u<l&&!c?r+u-l:u-l}}function Ei(e,t,n,r){const{points:i,options:o}=t,{count:a,start:s,loop:l,ilen:u}=Mi(i,n,r),c=function(e){return e.stepped?lt:e.tension||"monotone"===e.cubicInterpolationMode?ut:Si}(o);let d,f,h,{move:p=!0,reverse:g}=r||{};for(d=0;d<=u;++d)f=i[(s+(g?u-d:d))%a],f.skip||(p?(e.moveTo(f.x,f.y),p=!1):c(e,h,f,g,o.stepped),h=f);return l&&(f=i[(s+(g?u:0))%a],c(e,h,f,g,o.stepped)),!!l}function Ci(e,t,n,r){const i=t.points,{count:o,start:a,ilen:s}=Mi(i,n,r),{move:l=!0,reverse:u}=r||{};let c,d,f,h,p,g,m=0,b=0;const v=e=>(a+(u?s-e:e))%o,y=()=>{h!==p&&(e.lineTo(m,p),e.lineTo(m,h),e.lineTo(m,g))};for(l&&(d=i[v(0)],e.moveTo(d.x,d.y)),c=0;c<=s;++c){if(d=i[v(c)],d.skip)continue;const t=d.x,n=d.y,r=0|t;r===f?(n<h?h=n:n>p&&(p=n),m=(b*m+t)/++b):(y(),e.lineTo(t,n),f=r,b=0,h=p=n),g=n}y()}function Oi(e){const t=e.options,n=t.borderDash&&t.borderDash.length;return e._decimated||e._loop||t.tension||"monotone"===t.cubicInterpolationMode||t.stepped||n?Ei:Ci}wi.id="arc",wi.defaults={borderAlign:"center",borderColor:"#fff",borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},wi.defaultRoutes={backgroundColor:"backgroundColor"};const Pi="function"==typeof Path2D;class Ti extends Nr{constructor(e){super(),this.animated=!0,this.options=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,e&&Object.assign(this,e)}updateControlPoints(e,t){const n=this,r=n.options;if((r.tension||"monotone"===r.cubicInterpolationMode)&&!r.stepped&&!n._pointsUpdated){const i=r.spanGaps?n._loop:n._fullLoop;Yt(n._points,r,e,i,t),n._pointsUpdated=!0}}set points(e){const t=this;t._points=e,delete t._segments,delete t._path,t._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(e,t){const n=e.points,r=e.options.spanGaps,i=n.length;if(!i)return[];const o=!!e._loop,{start:a,end:s}=function(e,t,n,r){let i=0,o=t-1;if(n&&!r)for(;i<t&&!e[i].skip;)i++;for(;i<t&&e[i].skip;)i++;for(i%=t,n&&(o+=i);o>i&&e[o%t].skip;)o--;return o%=t,{start:i,end:o}}(n,i,o,r);return function(e,t,n,r){return r&&r.setContext&&n?function(e,t,n,r){const i=bn(e.options),o=n.length,a=[];let s=t[0].start,l=s;for(const u of t){let t,c=i,d=n[s%o];for(l=s+1;l<=u.end;l++){const i=n[l%o];t=bn(r.setContext({type:"segment",p0:d,p1:i,p0DataIndex:(l-1)%o,p1DataIndex:l%o,datasetIndex:e._datasetIndex})),vn(t,c)&&(a.push({start:s,end:l-1,loop:u.loop,style:c}),c=t,s=l-1),d=i,c=t}s<l-1&&(a.push({start:s,end:l-1,loop:u.loop,style:t}),s=l-1)}return a}(e,t,n,r):t}(e,!0===r?[{start:a,end:s,loop:o}]:function(e,t,n,r){const i=e.length,o=[];let a,s=t,l=e[t];for(a=t+1;a<=n;++a){const n=e[a%i];n.skip||n.stop?l.skip||(r=!1,o.push({start:t%i,end:(a-1)%i,loop:r}),t=s=n.stop?a:null):(s=a,l.skip&&(t=a)),l=n}return null!==s&&o.push({start:t%i,end:s%i,loop:r}),o}(n,a,s<a?s+i:s,!!e._fullLoop&&0===a&&s===i-1),n,t)}(this,this.options.segment))}first(){const e=this.segments,t=this.points;return e.length&&t[e[0].start]}last(){const e=this.segments,t=this.points,n=e.length;return n&&t[e[n-1].end]}interpolate(e,t){const n=this,r=n.options,i=e[t],o=n.points,a=mn(n,{property:t,start:i,end:i});if(!a.length)return;const s=[],l=function(e){return e.stepped?an:e.tension||"monotone"===e.cubicInterpolationMode?sn:on}(r);let u,c;for(u=0,c=a.length;u<c;++u){const{start:n,end:c}=a[u],d=o[n],f=o[c];if(d===f){s.push(d);continue}const h=l(d,f,Math.abs((i-d[t])/(f[t]-d[t])),r.stepped);h[t]=e[t],s.push(h)}return 1===s.length?s[0]:s}pathSegment(e,t,n){return Oi(this)(e,this,t,n)}path(e,t,n){const r=this,i=r.segments,o=Oi(r);let a=r._loop;t=t||0,n=n||r.points.length-t;for(const s of i)a&=o(e,r,s,{start:t,end:t+n-1});return!!a}draw(e,t,n,r){const i=this,o=i.options||{};(i.points||[]).length&&o.borderWidth&&(e.save(),function(e,t,n,r){Pi&&1===t.segments.length?function(e,t,n,r){let i=t._path;i||(i=t._path=new Path2D,t.path(i,n,r)&&i.closePath()),ki(e,t.options),e.stroke(i)}(e,t,n,r):function(e,t,n,r){const{segments:i,options:o}=t,a=Oi(t);for(const s of i)ki(e,o,s.style),e.beginPath(),a(e,t,s,{start:n,end:n+r-1})&&e.closePath(),e.stroke()}(e,t,n,r)}(e,i,n,r),e.restore(),i.animated&&(i._pointsUpdated=!1,i._path=void 0))}}function Di(e,t,n,r){const i=e.options,{[n]:o}=e.getProps([n],r);return Math.abs(t-o)<i.radius+i.hitRadius}Ti.id="line",Ti.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},Ti.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},Ti.descriptors={_scriptable:!0,_indexable:e=>"borderDash"!==e&&"fill"!==e};class Ai extends Nr{constructor(e){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,e&&Object.assign(this,e)}inRange(e,t,n){const r=this.options,{x:i,y:o}=this.getProps(["x","y"],n);return Math.pow(e-i,2)+Math.pow(t-o,2)<Math.pow(r.hitRadius+r.radius,2)}inXRange(e,t){return Di(this,e,"x",t)}inYRange(e,t){return Di(this,e,"y",t)}getCenterPoint(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}size(e){let t=(e=e||this.options||{}).radius||0;return t=Math.max(t,t&&e.hoverRadius||0),2*(t+(t&&e.borderWidth||0))}draw(e,t){const n=this,r=n.options;n.skip||r.radius<.1||!ot(n,t,n.size(r)/2)||(e.strokeStyle=r.borderColor,e.lineWidth=r.borderWidth,e.fillStyle=r.backgroundColor,it(e,r,n.x,n.y))}getRange(){const e=this.options||{};return e.radius+e.hitRadius}}function Li(e,t){const{x:n,y:r,base:i,width:o,height:a}=e.getProps(["x","y","base","width","height"],t);let s,l,u,c,d;return e.horizontal?(d=a/2,s=Math.min(n,i),l=Math.max(n,i),u=r-d,c=r+d):(d=o/2,s=n-d,l=n+d,u=Math.min(r,i),c=Math.max(r,i)),{left:s,top:u,right:l,bottom:c}}function Ri(e,t,n,r){return e?0:fe(t,n,r)}function Ii(e,t,n,r){const i=null===t,o=null===n,a=e&&!(i&&o)&&Li(e,r);return a&&(i||t>=a.left&&t<=a.right)&&(o||n>=a.top&&n<=a.bottom)}function Ni(e,t){e.rect(t.x,t.y,t.w,t.h)}function zi(e,t,n={}){const r=e.x!==n.x?-t:0,i=e.y!==n.y?-t:0,o=(e.x+e.w!==n.x+n.w?t:0)-r,a=(e.y+e.h!==n.y+n.h?t:0)-i;return{x:e.x+r,y:e.y+i,w:e.w+o,h:e.h+a,radius:e.radius}}Ai.id="point",Ai.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},Ai.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Fi extends Nr{constructor(e){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,e&&Object.assign(this,e)}draw(e){const t=this.options,{inner:n,outer:r}=function(e){const t=Li(e),n=t.right-t.left,r=t.bottom-t.top,i=function(e,t,n){const r=e.options.borderWidth,i=e.borderSkipped,o=bt(r);return{t:Ri(i.top,o.top,0,n),r:Ri(i.right,o.right,0,t),b:Ri(i.bottom,o.bottom,0,n),l:Ri(i.left,o.left,0,t)}}(e,n/2,r/2),o=function(e,t,n){const{enableBorderRadius:r}=e.getProps(["enableBorderRadius"]),i=e.options.borderRadius,o=vt(i),a=Math.min(t,n),s=e.borderSkipped,l=r||E(i);return{topLeft:Ri(!l||s.top||s.left,o.topLeft,0,a),topRight:Ri(!l||s.top||s.right,o.topRight,0,a),bottomLeft:Ri(!l||s.bottom||s.left,o.bottomLeft,0,a),bottomRight:Ri(!l||s.bottom||s.right,o.bottomRight,0,a)}}(e,n/2,r/2);return{outer:{x:t.left,y:t.top,w:n,h:r,radius:o},inner:{x:t.left+i.l,y:t.top+i.t,w:n-i.l-i.r,h:r-i.t-i.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(i.t,i.l)),topRight:Math.max(0,o.topRight-Math.max(i.t,i.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(i.b,i.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(i.b,i.r))}}}}(this),i=(o=r.radius).topLeft||o.topRight||o.bottomLeft||o.bottomRight?ft:Ni;var o;e.save(),r.w===n.w&&r.h===n.h||(e.beginPath(),i(e,zi(r,.33,n)),e.clip(),i(e,zi(n,-.33,r)),e.fillStyle=t.borderColor,e.fill("evenodd")),e.beginPath(),i(e,zi(n,.33,r)),e.fillStyle=t.backgroundColor,e.fill(),e.restore()}inRange(e,t,n){return Ii(this,e,t,n)}inXRange(e,t){return Ii(this,e,null,t)}inYRange(e,t){return Ii(this,null,e,t)}getCenterPoint(e){const{x:t,y:n,base:r,horizontal:i}=this.getProps(["x","y","base","horizontal"],e);return{x:i?(t+r)/2:t,y:i?n:(n+r)/2}}getRange(e){return"x"===e?this.width/2:this.height/2}}Fi.id="bar",Fi.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,enableBorderRadius:!0,pointStyle:void 0},Fi.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var Vi=Object.freeze({__proto__:null,ArcElement:wi,LineElement:Ti,PointElement:Ai,BarElement:Fi});function ji(e){if(e._decimated){const t=e._data;delete e._decimated,delete e._data,Object.defineProperty(e,"data",{value:t})}}function Bi(e){e.data.datasets.forEach((e=>{ji(e)}))}var Hi={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(e,t,n)=>{if(!n.enabled)return void Bi(e);const r=e.width;e.data.datasets.forEach(((t,i)=>{const{_data:o,indexAxis:a}=t,s=e.getDatasetMeta(i),l=o||t.data;if("y"===_t([a,e.options.indexAxis]))return;if("line"!==s.type)return;const u=e.scales[s.xAxisID];if("linear"!==u.type&&"time"!==u.type)return;if(e.options.parsing)return;let c,{start:d,count:f}=function(e,t){const n=t.length;let r,i=0;const{iScale:o}=e,{min:a,max:s,minDefined:l,maxDefined:u}=o.getUserBounds();return l&&(i=fe(kt(t,o.axis,a).lo,0,n-1)),r=u?fe(kt(t,o.axis,s).hi+1,i,n)-i:n-i,{start:i,count:r}}(s,l);if(f<=(n.threshold||4*r))ji(t);else{switch(S(o)&&(t._data=l,delete t.data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(e){this._data=e}})),n.algorithm){case"lttb":c=function(e,t,n,r,i){const o=i.samples||r;if(o>=n)return e.slice(t,t+n);const a=[],s=(n-2)/(o-2);let l=0;const u=t+n-1;let c,d,f,h,p,g=t;for(a[l++]=e[g],c=0;c<o-2;c++){let r,i=0,o=0;const u=Math.floor((c+1)*s)+1+t,m=Math.min(Math.floor((c+2)*s)+1,n)+t,b=m-u;for(r=u;r<m;r++)i+=e[r].x,o+=e[r].y;i/=b,o/=b;const v=Math.floor(c*s)+1+t,y=Math.min(Math.floor((c+1)*s)+1,n)+t,{x,y:_}=e[g];for(f=h=-1,r=v;r<y;r++)h=.5*Math.abs((x-i)*(e[r].y-_)-(x-e[r].x)*(o-_)),h>f&&(f=h,d=e[r],p=r);a[l++]=d,g=p}return a[l++]=e[u],a}(l,d,f,r,n);break;case"min-max":c=function(e,t,n,r){let i,o,a,s,l,u,c,d,f,h,p=0,g=0;const m=[],b=t+n-1,v=e[t].x,y=e[b].x-v;for(i=t;i<t+n;++i){o=e[i],a=(o.x-v)/y*r,s=o.y;const t=0|a;if(t===l)s<f?(f=s,u=i):s>h&&(h=s,c=i),p=(g*p+o.x)/++g;else{const n=i-1;if(!S(u)&&!S(c)){const t=Math.min(u,c),r=Math.max(u,c);t!==d&&t!==n&&m.push({...e[t],x:p}),r!==d&&r!==n&&m.push({...e[r],x:p})}i>0&&n!==d&&m.push(e[n]),m.push(o),l=t,g=0,f=h=s,u=c=d=i}}return m}(l,d,f,r);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}t._decimated=c}}))},destroy(e){Bi(e)}};function Wi(e,t,n){const r=function(e){const t=e.options,n=t.fill;let r=P(n&&n.target,n);return void 0===r&&(r=!!t.backgroundColor),!1!==r&&null!==r&&(!0===r?"origin":r)}(e);if(E(r))return!isNaN(r.value)&&r;let i=parseFloat(r);return C(i)&&Math.floor(i)===i?("-"!==r[0]&&"+"!==r[0]||(i=t+i),!(i===t||i<0||i>=n)&&i):["origin","start","end","stack","shape"].indexOf(r)>=0&&r}class Ui{constructor(e){this.x=e.x,this.y=e.y,this.radius=e.radius}pathSegment(e,t,n){const{x:r,y:i,radius:o}=this;return t=t||{start:0,end:Y},e.arc(r,i,o,t.end,t.start,!0),!n.bounds}interpolate(e){const{x:t,y:n,radius:r}=this,i=e.angle;return{x:t+Math.cos(i)*r,y:n+Math.sin(i)*r,angle:i}}}function $i(e,t,n){for(;t>e;t--){const e=n[t];if(!isNaN(e.x)&&!isNaN(e.y))break}return t}const Yi=e=>"line"===e.type&&!e.hidden;function Xi(e,t,n){const r=[];for(let i=0;i<n.length;i++){const o=n[i],{first:a,last:s,point:l}=qi(o,t,"x");if(!(!l||a&&s))if(a)r.unshift(l);else if(e.push(l),!s)break}e.push(...r)}function qi(e,t,n){const r=e.interpolate(t,n);if(!r)return{};const i=r[n],o=e.segments,a=e.points;let s=!1,l=!1;for(let e=0;e<o.length;e++){const t=o[e],r=a[t.start][n],u=a[t.end][n];if(i>=r&&i<=u){s=i===r,l=i===u;break}}return{first:s,last:l,point:r}}function Qi(e,t){let n=[],r=!1;return M(e)?(r=!0,n=e):n=function(e,t){const{x:n=null,y:r=null}=e||{},i=t.points,o=[];return t.segments.forEach((({start:e,end:t})=>{t=$i(e,t,i);const a=i[e],s=i[t];null!==r?(o.push({x:a.x,y:r}),o.push({x:s.x,y:r})):null!==n&&(o.push({x:n,y:a.y}),o.push({x:n,y:s.y}))})),o}(e,t),n.length?new Ti({points:n,options:{tension:0},_loop:r,_fullLoop:r}):null}function Ki(e,t,n){let r=e[t].fill;const i=[t];let o;if(!n)return r;for(;!1!==r&&-1===i.indexOf(r);){if(!C(r))return r;if(o=e[r],!o)return!1;if(o.visible)return r;i.push(r),r=o.fill}return!1}function Gi(e,t,n){e.beginPath(),t.path(e),e.lineTo(t.last().x,n),e.lineTo(t.first().x,n),e.closePath(),e.clip()}function Zi(e,t,n,r){if(r)return;let i=t[e],o=n[e];return"angle"===e&&(i=ce(i),o=ce(o)),{property:e,start:i,end:o}}function Ji(e,t,n,r){return e&&t?r(e[n],t[n]):e?e[n]:t?t[n]:0}function eo(e,t,n){const{top:r,bottom:i}=t.chart.chartArea,{property:o,start:a,end:s}=n||{};"x"===o&&(e.beginPath(),e.rect(a,r,s-a,i-r),e.clip())}function to(e,t,n,r){const i=t.interpolate(n,r);i&&e.lineTo(i.x,i.y)}function no(e,t){const{line:n,target:r,property:i,color:o,scale:a}=t,s=function(e,t,n){const r=e.segments,i=e.points,o=t.points,a=[];for(const e of r){let{start:r,end:s}=e;s=$i(r,s,i);const l=Zi(n,i[r],i[s],e.loop);if(!t.segments){a.push({source:e,target:l,start:i[r],end:i[s]});continue}const u=mn(t,l);for(const t of u){const r=Zi(n,o[t.start],o[t.end],t.loop),s=gn(e,i,r);for(const e of s)a.push({source:e,target:t,start:{[n]:Ji(l,r,"start",Math.max)},end:{[n]:Ji(l,r,"end",Math.min)}})}}return a}(n,r,i);for(const{source:t,target:l,start:u,end:c}of s){const{style:{backgroundColor:s=o}={}}=t,d=!0!==r;e.save(),e.fillStyle=s,eo(e,a,d&&Zi(i,u,c)),e.beginPath();const f=!!n.pathSegment(e,t);let h;if(d){f?e.closePath():to(e,r,c,i);const t=!!r.pathSegment(e,l,{move:f,reverse:!0});h=f&&t,h||to(e,r,u,i)}e.closePath(),e.fill(h?"evenodd":"nonzero"),e.restore()}}function ro(e,t,n){const r=function(e){const{chart:t,fill:n,line:r}=e;if(C(n))return function(e,t){const n=e.getDatasetMeta(t);return n&&e.isDatasetVisible(t)?n.dataset:null}(t,n);if("stack"===n)return function(e){const{chart:t,scale:n,index:r,line:i}=e,o=[],a=i.segments,s=i.points,l=function(e,t){const n=[],r=e.getSortedVisibleDatasetMetas();for(let e=0;e<r.length;e++){const i=r[e];if(i.index===t)break;Yi(i)&&n.unshift(i.dataset)}return n}(t,r);l.push(Qi({x:null,y:n.bottom},i));for(let e=0;e<a.length;e++){const t=a[e];for(let e=t.start;e<=t.end;e++)Xi(o,s[e],l)}return new Ti({points:o,options:{}})}(e);if("shape"===n)return!0;const i=function(e){return(e.scale||{}).getPointPositionForValue?function(e){const{scale:t,fill:n}=e,r=t.options,i=t.getLabels().length,o=[],a=r.reverse?t.max:t.min,s=r.reverse?t.min:t.max;let l,u,c;if(c="start"===n?a:"end"===n?s:E(n)?n.value:t.getBaseValue(),r.grid.circular)return u=t.getPointPositionForValue(0,a),new Ui({x:u.x,y:u.y,radius:t.getDistanceFromCenterForValue(c)});for(l=0;l<i;++l)o.push(t.getPointPositionForValue(l,c));return o}(e):function(e){const{scale:t={},fill:n}=e;let r,i=null;return"start"===n?i=t.bottom:"end"===n?i=t.top:E(n)?i=t.getPixelForValue(n.value):t.getBasePixel&&(i=t.getBasePixel()),C(i)?(r=t.isHorizontal(),{x:r?i:null,y:r?null:i}):null}(e)}(e);return i instanceof Ui?i:Qi(i,r)}(t),{line:i,scale:o,axis:a}=t,s=i.options,l=s.fill,u=s.backgroundColor,{above:c=u,below:d=u}=l||{};r&&i.points.length&&(at(e,n),function(e,t){const{line:n,target:r,above:i,below:o,area:a,scale:s}=t,l=n._loop?"angle":t.axis;e.save(),"x"===l&&o!==i&&(Gi(e,r,a.top),no(e,{line:n,target:r,color:i,scale:s,property:l}),e.restore(),e.save(),Gi(e,r,a.bottom)),no(e,{line:n,target:r,color:o,scale:s,property:l}),e.restore()}(e,{line:i,target:r,above:c,below:d,area:n,scale:o,axis:a}),st(e))}var io={id:"filler",afterDatasetsUpdate(e,t,n){const r=(e.data.datasets||[]).length,i=[];let o,a,s,l;for(a=0;a<r;++a)o=e.getDatasetMeta(a),s=o.dataset,l=null,s&&s.options&&s instanceof Ti&&(l={visible:e.isDatasetVisible(a),index:a,fill:Wi(s,a,r),chart:e,axis:o.controller.options.indexAxis,scale:o.vScale,line:s}),o.$filler=l,i.push(l);for(a=0;a<r;++a)l=i[a],l&&!1!==l.fill&&(l.fill=Ki(i,a,n.propagate))},beforeDraw(e,t,n){const r="beforeDraw"===n.drawTime,i=e.getSortedVisibleDatasetMetas(),o=e.chartArea;for(let t=i.length-1;t>=0;--t){const n=i[t].$filler;n&&(n.line.updateControlPoints(o,n.axis),r&&ro(e.ctx,n,o))}},beforeDatasetsDraw(e,t,n){if("beforeDatasetsDraw"!==n.drawTime)return;const r=e.getSortedVisibleDatasetMetas();for(let t=r.length-1;t>=0;--t){const n=r[t].$filler;n&&ro(e.ctx,n,e.chartArea)}},beforeDatasetDraw(e,t,n){const r=t.meta.$filler;r&&!1!==r.fill&&"beforeDatasetDraw"===n.drawTime&&ro(e.ctx,r,e.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const oo=(e,t)=>{let{boxHeight:n=t,boxWidth:r=t}=e;return e.usePointStyle&&(n=Math.min(n,t),r=Math.min(r,t)),{boxWidth:r,boxHeight:n,itemHeight:Math.max(t,n)}};class ao extends Nr{constructor(e){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t,n){const r=this;r.maxWidth=e,r.maxHeight=t,r._margins=n,r.setDimensions(),r.buildLabels(),r.fit()}setDimensions(){const e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=e._margins.left,e.right=e.width):(e.height=e.maxHeight,e.top=e._margins.top,e.bottom=e.height)}buildLabels(){const e=this,t=e.options.labels||{};let n=D(t.generateLabels,[e.chart],e)||[];t.filter&&(n=n.filter((n=>t.filter(n,e.chart.data)))),t.sort&&(n=n.sort(((n,r)=>t.sort(n,r,e.chart.data)))),e.options.reverse&&n.reverse(),e.legendItems=n}fit(){const e=this,{options:t,ctx:n}=e;if(!t.display)return void(e.width=e.height=0);const r=t.labels,i=xt(r.font),o=i.size,a=e._computeTitleHeight(),{boxWidth:s,itemHeight:l}=oo(r,o);let u,c;n.font=i.string,e.isHorizontal()?(u=e.maxWidth,c=e._fitRows(a,o,s,l)+10):(c=e.maxHeight,u=e._fitCols(a,o,s,l)+10),e.width=Math.min(u,t.maxWidth||e.maxWidth),e.height=Math.min(c,t.maxHeight||e.maxHeight)}_fitRows(e,t,n,r){const i=this,{ctx:o,maxWidth:a,options:{labels:{padding:s}}}=i,l=i.legendHitBoxes=[],u=i.lineWidths=[0],c=r+s;let d=e;o.textAlign="left",o.textBaseline="middle";let f=-1,h=-c;return i.legendItems.forEach(((e,i)=>{const p=n+t/2+o.measureText(e.text).width;(0===i||u[u.length-1]+p+2*s>a)&&(d+=c,u[u.length-(i>0?0:1)]=0,h+=c,f++),l[i]={left:0,top:h,row:f,width:p,height:r},u[u.length-1]+=p+s})),d}_fitCols(e,t,n,r){const i=this,{ctx:o,maxHeight:a,options:{labels:{padding:s}}}=i,l=i.legendHitBoxes=[],u=i.columnSizes=[],c=a-e;let d=s,f=0,h=0,p=0,g=0;return i.legendItems.forEach(((e,i)=>{const a=n+t/2+o.measureText(e.text).width;i>0&&h+r+2*s>c&&(d+=f+s,u.push({width:f,height:h}),p+=f+s,g++,f=h=0),l[i]={left:p,top:h,col:g,width:a,height:r},f=Math.max(f,a),h+=r+s})),d+=f,u.push({width:f,height:h}),d}adjustHitBoxes(){const e=this;if(!e.options.display)return;const t=e._computeTitleHeight(),{legendHitBoxes:n,options:{align:r,labels:{padding:i},rtl:o}}=e,a=cn(o,e.left,e.width);if(this.isHorizontal()){let o=0,s=_(r,e.left+i,e.right-e.lineWidths[o]);for(const l of n)o!==l.row&&(o=l.row,s=_(r,e.left+i,e.right-e.lineWidths[o])),l.top+=e.top+t+i,l.left=a.leftForLtr(a.x(s),l.width),s+=l.width+i}else{let o=0,s=_(r,e.top+t+i,e.bottom-e.columnSizes[o].height);for(const l of n)l.col!==o&&(o=l.col,s=_(r,e.top+t+i,e.bottom-e.columnSizes[o].height)),l.top=s,l.left+=e.left+i,l.left=a.leftForLtr(a.x(l.left),l.width),s+=l.height+i}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){const e=this;if(e.options.display){const t=e.ctx;at(t,e),e._draw(),st(t)}}_draw(){const e=this,{options:t,columnSizes:n,lineWidths:r,ctx:i}=e,{align:o,labels:a}=t,s=Je.color,l=cn(t.rtl,e.left,e.width),u=xt(a.font),{color:c,padding:d}=a,f=u.size,h=f/2;let p;e.drawTitle(),i.textAlign=l.textAlign("left"),i.textBaseline="middle",i.lineWidth=.5,i.font=u.string;const{boxWidth:g,boxHeight:m,itemHeight:b}=oo(a,f),v=e.isHorizontal(),y=this._computeTitleHeight();p=v?{x:_(o,e.left+d,e.right-r[0]),y:e.top+d+y,line:0}:{x:e.left+d,y:_(o,e.top+y+d,e.bottom-n[0].height),line:0},dn(e.ctx,t.textDirection);const x=b+d;e.legendItems.forEach(((w,k)=>{i.strokeStyle=w.fontColor||c,i.fillStyle=w.fontColor||c;const S=i.measureText(w.text).width,M=l.textAlign(w.textAlign||(w.textAlign=a.textAlign)),E=g+h+S;let C=p.x,O=p.y;l.setWidth(e.width),v?k>0&&C+E+d>e.right&&(O=p.y+=x,p.line++,C=p.x=_(o,e.left+d,e.right-r[p.line])):k>0&&O+x>e.bottom&&(C=p.x=C+n[p.line].width+d,p.line++,O=p.y=_(o,e.top+y+d,e.bottom-n[p.line].height)),function(e,t,n){if(isNaN(g)||g<=0||isNaN(m)||m<0)return;i.save();const r=P(n.lineWidth,1);if(i.fillStyle=P(n.fillStyle,s),i.lineCap=P(n.lineCap,"butt"),i.lineDashOffset=P(n.lineDashOffset,0),i.lineJoin=P(n.lineJoin,"miter"),i.lineWidth=r,i.strokeStyle=P(n.strokeStyle,s),i.setLineDash(P(n.lineDash,[])),a.usePointStyle){const o={radius:g*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:r},a=l.xPlus(e,g/2);it(i,o,a,t+h)}else{const o=t+Math.max((f-m)/2,0),a=l.leftForLtr(e,g),s=vt(n.borderRadius);i.beginPath(),Object.values(s).some((e=>0!==e))?ft(i,{x:a,y:o,w:g,h:m,radius:s}):i.rect(a,o,g,m),i.fill(),0!==r&&i.stroke()}i.restore()}(l.x(C),O,w),C=((e,t,n,r)=>e===(r?"left":"right")?n:"center"===e?(t+n)/2:t)(M,C+g+h,v?C+E:e.right,t.rtl),function(e,t,n){ct(i,n.text,e,t+b/2,u,{strikethrough:n.hidden,textAlign:l.textAlign(n.textAlign)})}(l.x(C),O,w),v?p.x+=E+d:p.y+=x})),fn(e.ctx,t.textDirection)}drawTitle(){const e=this,t=e.options,n=t.title,r=xt(n.font),i=yt(n.padding);if(!n.display)return;const o=cn(t.rtl,e.left,e.width),a=e.ctx,s=n.position,l=r.size/2,u=i.top+l;let c,d=e.left,f=e.width;if(this.isHorizontal())f=Math.max(...e.lineWidths),c=e.top+u,d=_(t.align,d,e.right-f);else{const n=e.columnSizes.reduce(((e,t)=>Math.max(e,t.height)),0);c=u+_(t.align,e.top,e.bottom-n-t.labels.padding-e._computeTitleHeight())}const h=_(s,d,d+f);a.textAlign=o.textAlign(x(s)),a.textBaseline="middle",a.strokeStyle=n.color,a.fillStyle=n.color,a.font=r.string,ct(a,n.text,h,c,r)}_computeTitleHeight(){const e=this.options.title,t=xt(e.font),n=yt(e.padding);return e.display?t.lineHeight+n.height:0}_getLegendItemAt(e,t){const n=this;let r,i,o;if(e>=n.left&&e<=n.right&&t>=n.top&&t<=n.bottom)for(o=n.legendHitBoxes,r=0;r<o.length;++r)if(i=o[r],e>=i.left&&e<=i.left+i.width&&t>=i.top&&t<=i.top+i.height)return n.legendItems[r];return null}handleEvent(e){const t=this,n=t.options;if(!function(e,t){return!("mousemove"!==e||!t.onHover&&!t.onLeave)||!(!t.onClick||"click"!==e&&"mouseup"!==e)}(e.type,n))return;const r=t._getLegendItemAt(e.x,e.y);if("mousemove"===e.type){const a=t._hoveredItem,s=(o=r,null!==(i=a)&&null!==o&&i.datasetIndex===o.datasetIndex&&i.index===o.index);a&&!s&&D(n.onLeave,[e,a,t],t),t._hoveredItem=r,r&&!s&&D(n.onHover,[e,r,t],t)}else r&&D(n.onClick,[e,r,t],t);var i,o}}var so={id:"legend",_element:ao,start(e,t,n){const r=e.legend=new ao({ctx:e.ctx,options:n,chart:e});xr.configure(e,r,n),xr.addBox(e,r)},stop(e){xr.removeBox(e,e.legend),delete e.legend},beforeUpdate(e,t,n){const r=e.legend;xr.configure(e,r,n),r.options=n},afterUpdate(e){const t=e.legend;t.buildLabels(),t.adjustHitBoxes()},afterEvent(e,t){t.replay||e.legend.handleEvent(t.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(e,t,n){const r=t.datasetIndex,i=n.chart;i.isDatasetVisible(r)?(i.hide(r),t.hidden=!0):(i.show(r),t.hidden=!1)},onHover:null,onLeave:null,labels:{color:e=>e.chart.options.color,boxWidth:40,padding:10,generateLabels(e){const t=e.data.datasets,{labels:{usePointStyle:n,pointStyle:r,textAlign:i,color:o}}=e.legend.options;return e._getSortedDatasetMetas().map((e=>{const a=e.controller.getStyle(n?0:void 0),s=yt(a.borderWidth);return{text:t[e.index].label,fillStyle:a.backgroundColor,fontColor:o,hidden:!e.visible,lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:(s.width+s.height)/4,strokeStyle:a.borderColor,pointStyle:r||a.pointStyle,rotation:a.rotation,textAlign:i||a.textAlign,borderRadius:0,datasetIndex:e.index}}),this)}},title:{color:e=>e.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:e=>!e.startsWith("on"),labels:{_scriptable:e=>!["generateLabels","filter","sort"].includes(e)}}};class lo extends Nr{constructor(e){super(),this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t){const n=this,r=n.options;if(n.left=0,n.top=0,!r.display)return void(n.width=n.height=n.right=n.bottom=0);n.width=n.right=e,n.height=n.bottom=t;const i=M(r.text)?r.text.length:1;n._padding=yt(r.padding);const o=i*xt(r.font).lineHeight+n._padding.height;n.isHorizontal()?n.height=o:n.width=o}isHorizontal(){const e=this.options.position;return"top"===e||"bottom"===e}_drawArgs(e){const{top:t,left:n,bottom:r,right:i,options:o}=this,a=o.align;let s,l,u,c=0;return this.isHorizontal()?(l=_(a,n,i),u=t+e,s=i-n):("left"===o.position?(l=n+e,u=_(a,r,t),c=-.5*$):(l=i-e,u=_(a,t,r),c=.5*$),s=r-t),{titleX:l,titleY:u,maxWidth:s,rotation:c}}draw(){const e=this,t=e.ctx,n=e.options;if(!n.display)return;const r=xt(n.font),i=r.lineHeight/2+e._padding.top,{titleX:o,titleY:a,maxWidth:s,rotation:l}=e._drawArgs(i);ct(t,n.text,0,0,r,{color:n.color,maxWidth:s,rotation:l,textAlign:x(n.align),textBaseline:"middle",translation:[o,a]})}}var uo={id:"title",_element:lo,start(e,t,n){!function(e,t){const n=new lo({ctx:e.ctx,options:t,chart:e});xr.configure(e,n,t),xr.addBox(e,n),e.titleBlock=n}(e,n)},stop(e){const t=e.titleBlock;xr.removeBox(e,t),delete e.titleBlock},beforeUpdate(e,t,n){const r=e.titleBlock;xr.configure(e,r,n),r.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const co=new WeakMap;var fo={id:"subtitle",start(e,t,n){const r=new lo({ctx:e.ctx,options:n,chart:e});xr.configure(e,r,n),xr.addBox(e,r),co.set(e,r)},stop(e){xr.removeBox(e,co.get(e)),co.delete(e)},beforeUpdate(e,t,n){const r=co.get(e);xr.configure(e,r,n),r.options=n},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const ho={average(e){if(!e.length)return!1;let t,n,r=0,i=0,o=0;for(t=0,n=e.length;t<n;++t){const n=e[t].element;if(n&&n.hasValue()){const e=n.tooltipPosition();r+=e.x,i+=e.y,++o}}return{x:r/o,y:i/o}},nearest(e,t){if(!e.length)return!1;let n,r,i,o=t.x,a=t.y,s=Number.POSITIVE_INFINITY;for(n=0,r=e.length;n<r;++n){const r=e[n].element;if(r&&r.hasValue()){const e=le(t,r.getCenterPoint());e<s&&(s=e,i=r)}}if(i){const e=i.tooltipPosition();o=e.x,a=e.y}return{x:o,y:a}}};function po(e,t){return t&&(M(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function go(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function mo(e,t){const{element:n,datasetIndex:r,index:i}=t,o=e.getDatasetMeta(r).controller,{label:a,value:s}=o.getLabelAndValue(i);return{chart:e,label:a,parsed:o.getParsed(i),raw:e.data.datasets[r].data[i],formattedValue:s,dataset:o.getDataset(),dataIndex:i,datasetIndex:r,element:n}}function bo(e,t){const n=e._chart.ctx,{body:r,footer:i,title:o}=e,{boxWidth:a,boxHeight:s}=t,l=xt(t.bodyFont),u=xt(t.titleFont),c=xt(t.footerFont),d=o.length,f=i.length,h=r.length,p=yt(t.padding);let g=p.height,m=0,b=r.reduce(((e,t)=>e+t.before.length+t.lines.length+t.after.length),0);b+=e.beforeBody.length+e.afterBody.length,d&&(g+=d*u.lineHeight+(d-1)*t.titleSpacing+t.titleMarginBottom),b&&(g+=h*(t.displayColors?Math.max(s,l.lineHeight):l.lineHeight)+(b-h)*l.lineHeight+(b-1)*t.bodySpacing),f&&(g+=t.footerMarginTop+f*c.lineHeight+(f-1)*t.footerSpacing);let v=0;const y=function(e){m=Math.max(m,n.measureText(e).width+v)};return n.save(),n.font=u.string,A(e.title,y),n.font=l.string,A(e.beforeBody.concat(e.afterBody),y),v=t.displayColors?a+2:0,A(r,(e=>{A(e.before,y),A(e.lines,y),A(e.after,y)})),v=0,n.font=c.string,A(e.footer,y),n.restore(),m+=p.width,{width:m,height:g}}function vo(e,t,n,r){const{x:i,width:o}=n,{width:a,chartArea:{left:s,right:l}}=e;let u="center";return"center"===r?u=i<=(s+l)/2?"left":"right":i<=o/2?u="left":i>=a-o/2&&(u="right"),function(e,t,n,r){const{x:i,width:o}=r,a=n.caretSize+n.caretPadding;return"left"===e&&i+o+a>t.width||"right"===e&&i-o-a<0||void 0}(u,e,t,n)&&(u="center"),u}function yo(e,t,n){const r=t.yAlign||function(e,t){const{y:n,height:r}=t;return n<r/2?"top":n>e.height-r/2?"bottom":"center"}(e,n);return{xAlign:t.xAlign||vo(e,t,n,r),yAlign:r}}function xo(e,t,n,r){const{caretSize:i,caretPadding:o,cornerRadius:a}=e,{xAlign:s,yAlign:l}=n,u=i+o,c=a+o;let d=function(e,t){let{x:n,width:r}=e;return"right"===t?n-=r:"center"===t&&(n-=r/2),n}(t,s);const f=function(e,t,n){let{y:r,height:i}=e;return"top"===t?r+=n:r-="bottom"===t?i+n:i/2,r}(t,l,u);return"center"===l?"left"===s?d+=u:"right"===s&&(d-=u):"left"===s?d-=c:"right"===s&&(d+=c),{x:fe(d,0,r.width-t.width),y:fe(f,0,r.height-t.height)}}function _o(e,t,n){const r=yt(n.padding);return"center"===t?e.x+e.width/2:"right"===t?e.x+e.width-r.right:e.x+r.left}function wo(e){return po([],go(e))}function ko(e,t){const n=t&&t.dataset&&t.dataset.tooltip&&t.dataset.tooltip.callbacks;return n?e.override(n):e}class So extends Nr{constructor(e){super(),this.opacity=0,this._active=[],this._chart=e._chart,this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.options=e.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(e){this.options=e,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const e=this,t=e._cachedAnimations;if(t)return t;const n=e._chart,r=e.options.setContext(e.getContext()),i=r.enabled&&n.options.animation&&r.animations,o=new Sn(e._chart,i);return i._cacheable&&(e._cachedAnimations=Object.freeze(o)),o}getContext(){const e=this;return e.$context||(e.$context=(t=e._chart.getContext(),n=e,r=e._tooltipItems,Object.assign(Object.create(t),{tooltip:n,tooltipItems:r,type:"tooltip"})));var t,n,r}getTitle(e,t){const n=this,{callbacks:r}=t,i=r.beforeTitle.apply(n,[e]),o=r.title.apply(n,[e]),a=r.afterTitle.apply(n,[e]);let s=[];return s=po(s,go(i)),s=po(s,go(o)),s=po(s,go(a)),s}getBeforeBody(e,t){return wo(t.callbacks.beforeBody.apply(this,[e]))}getBody(e,t){const n=this,{callbacks:r}=t,i=[];return A(e,(e=>{const t={before:[],lines:[],after:[]},o=ko(r,e);po(t.before,go(o.beforeLabel.call(n,e))),po(t.lines,o.label.call(n,e)),po(t.after,go(o.afterLabel.call(n,e))),i.push(t)})),i}getAfterBody(e,t){return wo(t.callbacks.afterBody.apply(this,[e]))}getFooter(e,t){const n=this,{callbacks:r}=t,i=r.beforeFooter.apply(n,[e]),o=r.footer.apply(n,[e]),a=r.afterFooter.apply(n,[e]);let s=[];return s=po(s,go(i)),s=po(s,go(o)),s=po(s,go(a)),s}_createItems(e){const t=this,n=t._active,r=t._chart.data,i=[],o=[],a=[];let s,l,u=[];for(s=0,l=n.length;s<l;++s)u.push(mo(t._chart,n[s]));return e.filter&&(u=u.filter(((t,n,i)=>e.filter(t,n,i,r)))),e.itemSort&&(u=u.sort(((t,n)=>e.itemSort(t,n,r)))),A(u,(n=>{const r=ko(e.callbacks,n);i.push(r.labelColor.call(t,n)),o.push(r.labelPointStyle.call(t,n)),a.push(r.labelTextColor.call(t,n))})),t.labelColors=i,t.labelPointStyles=o,t.labelTextColors=a,t.dataPoints=u,u}update(e,t){const n=this,r=n.options.setContext(n.getContext()),i=n._active;let o,a=[];if(i.length){const e=ho[r.position].call(n,i,n._eventPosition);a=n._createItems(r),n.title=n.getTitle(a,r),n.beforeBody=n.getBeforeBody(a,r),n.body=n.getBody(a,r),n.afterBody=n.getAfterBody(a,r),n.footer=n.getFooter(a,r);const t=n._size=bo(n,r),s=Object.assign({},e,t),l=yo(n._chart,r,s),u=xo(r,s,l,n._chart);n.xAlign=l.xAlign,n.yAlign=l.yAlign,o={opacity:1,x:u.x,y:u.y,width:t.width,height:t.height,caretX:e.x,caretY:e.y}}else 0!==n.opacity&&(o={opacity:0});n._tooltipItems=a,n.$context=void 0,o&&n._resolveAnimations().update(n,o),e&&r.external&&r.external.call(n,{chart:n._chart,tooltip:n,replay:t})}drawCaret(e,t,n,r){const i=this.getCaretPosition(e,n,r);t.lineTo(i.x1,i.y1),t.lineTo(i.x2,i.y2),t.lineTo(i.x3,i.y3)}getCaretPosition(e,t,n){const{xAlign:r,yAlign:i}=this,{cornerRadius:o,caretSize:a}=n,{x:s,y:l}=e,{width:u,height:c}=t;let d,f,h,p,g,m;return"center"===i?(g=l+c/2,"left"===r?(d=s,f=d-a,p=g+a,m=g-a):(d=s+u,f=d+a,p=g-a,m=g+a),h=d):(f="left"===r?s+o+a:"right"===r?s+u-o-a:this.caretX,"top"===i?(p=l,g=p-a,d=f-a,h=f+a):(p=l+c,g=p+a,d=f+a,h=f-a),m=p),{x1:d,x2:f,x3:h,y1:p,y2:g,y3:m}}drawTitle(e,t,n){const r=this,i=r.title,o=i.length;let a,s,l;if(o){const u=cn(n.rtl,r.x,r.width);for(e.x=_o(r,n.titleAlign,n),t.textAlign=u.textAlign(n.titleAlign),t.textBaseline="middle",a=xt(n.titleFont),s=n.titleSpacing,t.fillStyle=n.titleColor,t.font=a.string,l=0;l<o;++l)t.fillText(i[l],u.x(e.x),e.y+a.lineHeight/2),e.y+=a.lineHeight+s,l+1===o&&(e.y+=n.titleMarginBottom-s)}}_drawColorBox(e,t,n,r,i){const o=this,a=o.labelColors[n],s=o.labelPointStyles[n],{boxHeight:l,boxWidth:u}=i,c=xt(i.bodyFont),d=_o(o,"left",i),f=r.x(d),h=l<c.lineHeight?(c.lineHeight-l)/2:0,p=t.y+h;if(i.usePointStyle){const t={radius:Math.min(u,l)/2,pointStyle:s.pointStyle,rotation:s.rotation,borderWidth:1},n=r.leftForLtr(f,u)+u/2,o=p+l/2;e.strokeStyle=i.multiKeyBackground,e.fillStyle=i.multiKeyBackground,it(e,t,n,o),e.strokeStyle=a.borderColor,e.fillStyle=a.backgroundColor,it(e,t,n,o)}else{e.lineWidth=a.borderWidth||1,e.strokeStyle=a.borderColor,e.setLineDash(a.borderDash||[]),e.lineDashOffset=a.borderDashOffset||0;const t=r.leftForLtr(f,u),n=r.leftForLtr(r.xPlus(f,1),u-2),o=vt(a.borderRadius);Object.values(o).some((e=>0!==e))?(e.beginPath(),e.fillStyle=i.multiKeyBackground,ft(e,{x:t,y:p,w:u,h:l,radius:o}),e.fill(),e.stroke(),e.fillStyle=a.backgroundColor,e.beginPath(),ft(e,{x:n,y:p+1,w:u-2,h:l-2,radius:o}),e.fill()):(e.fillStyle=i.multiKeyBackground,e.fillRect(t,p,u,l),e.strokeRect(t,p,u,l),e.fillStyle=a.backgroundColor,e.fillRect(n,p+1,u-2,l-2))}e.fillStyle=o.labelTextColors[n]}drawBody(e,t,n){const r=this,{body:i}=r,{bodySpacing:o,bodyAlign:a,displayColors:s,boxHeight:l,boxWidth:u}=n,c=xt(n.bodyFont);let d=c.lineHeight,f=0;const h=cn(n.rtl,r.x,r.width),p=function(n){t.fillText(n,h.x(e.x+f),e.y+d/2),e.y+=d+o},g=h.textAlign(a);let m,b,v,y,x,_,w;for(t.textAlign=a,t.textBaseline="middle",t.font=c.string,e.x=_o(r,g,n),t.fillStyle=n.bodyColor,A(r.beforeBody,p),f=s&&"right"!==g?"center"===a?u/2+1:u+2:0,y=0,_=i.length;y<_;++y){for(m=i[y],b=r.labelTextColors[y],t.fillStyle=b,A(m.before,p),v=m.lines,s&&v.length&&(r._drawColorBox(t,e,y,h,n),d=Math.max(c.lineHeight,l)),x=0,w=v.length;x<w;++x)p(v[x]),d=c.lineHeight;A(m.after,p)}f=0,d=c.lineHeight,A(r.afterBody,p),e.y-=o}drawFooter(e,t,n){const r=this,i=r.footer,o=i.length;let a,s;if(o){const l=cn(n.rtl,r.x,r.width);for(e.x=_o(r,n.footerAlign,n),e.y+=n.footerMarginTop,t.textAlign=l.textAlign(n.footerAlign),t.textBaseline="middle",a=xt(n.footerFont),t.fillStyle=n.footerColor,t.font=a.string,s=0;s<o;++s)t.fillText(i[s],l.x(e.x),e.y+a.lineHeight/2),e.y+=a.lineHeight+n.footerSpacing}}drawBackground(e,t,n,r){const{xAlign:i,yAlign:o}=this,{x:a,y:s}=e,{width:l,height:u}=n,c=r.cornerRadius;t.fillStyle=r.backgroundColor,t.strokeStyle=r.borderColor,t.lineWidth=r.borderWidth,t.beginPath(),t.moveTo(a+c,s),"top"===o&&this.drawCaret(e,t,n,r),t.lineTo(a+l-c,s),t.quadraticCurveTo(a+l,s,a+l,s+c),"center"===o&&"right"===i&&this.drawCaret(e,t,n,r),t.lineTo(a+l,s+u-c),t.quadraticCurveTo(a+l,s+u,a+l-c,s+u),"bottom"===o&&this.drawCaret(e,t,n,r),t.lineTo(a+c,s+u),t.quadraticCurveTo(a,s+u,a,s+u-c),"center"===o&&"left"===i&&this.drawCaret(e,t,n,r),t.lineTo(a,s+c),t.quadraticCurveTo(a,s,a+c,s),t.closePath(),t.fill(),r.borderWidth>0&&t.stroke()}_updateAnimationTarget(e){const t=this,n=t._chart,r=t.$animations,i=r&&r.x,o=r&&r.y;if(i||o){const r=ho[e.position].call(t,t._active,t._eventPosition);if(!r)return;const a=t._size=bo(t,e),s=Object.assign({},r,t._size),l=yo(n,e,s),u=xo(e,s,l,n);i._to===u.x&&o._to===u.y||(t.xAlign=l.xAlign,t.yAlign=l.yAlign,t.width=a.width,t.height=a.height,t.caretX=r.x,t.caretY=r.y,t._resolveAnimations().update(t,u))}}draw(e){const t=this,n=t.options.setContext(t.getContext());let r=t.opacity;if(!r)return;t._updateAnimationTarget(n);const i={width:t.width,height:t.height},o={x:t.x,y:t.y};r=Math.abs(r)<.001?0:r;const a=yt(n.padding),s=t.title.length||t.beforeBody.length||t.body.length||t.afterBody.length||t.footer.length;n.enabled&&s&&(e.save(),e.globalAlpha=r,t.drawBackground(o,e,i,n),dn(e,n.textDirection),o.y+=a.top,t.drawTitle(o,e,n),t.drawBody(o,e,n),t.drawFooter(o,e,n),fn(e,n.textDirection),e.restore())}getActiveElements(){return this._active||[]}setActiveElements(e,t){const n=this,r=n._active,i=e.map((({datasetIndex:e,index:t})=>{const r=n._chart.getDatasetMeta(e);if(!r)throw new Error("Cannot find a dataset at index "+e);return{datasetIndex:e,element:r.data[t],index:t}})),o=!L(r,i),a=n._positionChanged(i,t);(o||a)&&(n._active=i,n._eventPosition=t,n.update(!0))}handleEvent(e,t){const n=this,r=n.options,i=n._active||[];let o=!1,a=[];"mouseout"!==e.type&&(a=n._chart.getElementsAtEventForMode(e,r.mode,r,t),r.reverse&&a.reverse());const s=n._positionChanged(a,e);return o=t||!L(a,i)||s,o&&(n._active=a,(r.enabled||r.external)&&(n._eventPosition={x:e.x,y:e.y},n.update(!0,t))),o}_positionChanged(e,t){const{caretX:n,caretY:r,options:i}=this,o=ho[i.position].call(this,e,t);return!1!==o&&(n!==o.x||r!==o.y)}}So.positioners=ho;var Mo={id:"tooltip",_element:So,positioners:ho,afterInit(e,t,n){n&&(e.tooltip=new So({_chart:e,options:n}))},beforeUpdate(e,t,n){e.tooltip&&e.tooltip.initialize(n)},reset(e,t,n){e.tooltip&&e.tooltip.initialize(n)},afterDraw(e){const t=e.tooltip,n={tooltip:t};!1!==e.notifyPlugins("beforeTooltipDraw",n)&&(t&&t.draw(e.ctx),e.notifyPlugins("afterTooltipDraw",n))},afterEvent(e,t){if(e.tooltip){const n=t.replay;e.tooltip.handleEvent(t.event,n)&&(t.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(e,t)=>t.bodyFont.size,boxWidth:(e,t)=>t.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:w,title(e){if(e.length>0){const t=e[0],n=t.chart.data.labels,r=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return t.dataset.label||"";if(t.label)return t.label;if(r>0&&t.dataIndex<r)return n[t.dataIndex]}return""},afterTitle:w,beforeBody:w,beforeLabel:w,label(e){if(this&&this.options&&"dataset"===this.options.mode)return e.label+": "+e.formattedValue||e.formattedValue;let t=e.dataset.label||"";t&&(t+=": ");const n=e.formattedValue;return S(n)||(t+=n),t},labelColor(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{borderColor:t.borderColor,backgroundColor:t.backgroundColor,borderWidth:t.borderWidth,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{pointStyle:t.pointStyle,rotation:t.rotation}},afterLabel:w,afterBody:w,beforeFooter:w,footer:w,afterFooter:w}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:e=>"filter"!==e&&"itemSort"!==e&&"external"!==e,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Eo=Object.freeze({__proto__:null,Decimation:Hi,Filler:io,Legend:so,SubTitle:fo,Title:uo,Tooltip:Mo});class Co extends Yr{constructor(e){super(e),this._startValue=void 0,this._valueRange=0}parse(e,t){if(S(e))return null;const n=this.getLabels();return((e,t)=>null===e?null:fe(Math.round(e),0,t))(t=isFinite(t)&&n[t]===e?t:function(e,t,n){const r=e.indexOf(t);return-1===r?((e,t,n)=>"string"==typeof t?e.push(t)-1:isNaN(t)?null:n)(e,t,n):r!==e.lastIndexOf(t)?n:r}(n,e,P(t,e)),n.length-1)}determineDataLimits(){const e=this,{minDefined:t,maxDefined:n}=e.getUserBounds();let{min:r,max:i}=e.getMinMax(!0);"ticks"===e.options.bounds&&(t||(r=0),n||(i=e.getLabels().length-1)),e.min=r,e.max=i}buildTicks(){const e=this,t=e.min,n=e.max,r=e.options.offset,i=[];let o=e.getLabels();o=0===t&&n===o.length-1?o:o.slice(t,n+1),e._valueRange=Math.max(o.length-(r?0:1),1),e._startValue=e.min-(r?.5:0);for(let e=t;e<=n;e++)i.push({value:e});return i}getLabelForValue(e){const t=this.getLabels();return e>=0&&e<t.length?t[e]:e}configure(){const e=this;super.configure(),e.isHorizontal()||(e._reversePixels=!e._reversePixels)}getPixelForValue(e){const t=this;return"number"!=typeof e&&(e=t.parse(e)),null===e?NaN:t.getPixelForDecimal((e-t._startValue)/t._valueRange)}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getValueForPixel(e){const t=this;return Math.round(t._startValue+t.getDecimalForPixel(e)*t._valueRange)}getBasePixel(){return this.bottom}}function Oo(e,t,{horizontal:n,minRotation:r}){const i=oe(r),o=(n?Math.sin(i):Math.cos(i))||.001,a=.75*t*(""+e).length;return Math.min(t/o,a)}Co.id="category",Co.defaults={ticks:{callback:Co.prototype.getLabelForValue}};class Po extends Yr{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(e,t){return S(e)||("number"==typeof e||e instanceof Number)&&!isFinite(+e)?null:+e}handleTickRangeOptions(){const e=this,{beginAtZero:t}=e.options,{minDefined:n,maxDefined:r}=e.getUserBounds();let{min:i,max:o}=e;const a=e=>i=n?i:e,s=e=>o=r?o:e;if(t){const e=ee(i),t=ee(o);e<0&&t<0?s(0):e>0&&t>0&&a(0)}if(i===o){let e=1;(o>=Number.MAX_SAFE_INTEGER||i<=Number.MIN_SAFE_INTEGER)&&(e=Math.abs(.05*o)),s(o+e),t||a(i-e)}e.min=i,e.max=o}getTickLimit(){const e=this,t=e.options.ticks;let n,{maxTicksLimit:r,stepSize:i}=t;return i?n=Math.ceil(e.max/i)-Math.floor(e.min/i)+1:(n=e.computeTickLimit(),r=r||11),r&&(n=Math.min(r,n)),n}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const e=this,t=e.options,n=t.ticks;let r=e.getTickLimit();r=Math.max(2,r);const i=function(e,t){const n=[],{bounds:r,step:i,min:o,max:a,precision:s,count:l,maxTicks:u,maxDigits:c,includeBounds:d}=e,f=i||1,h=u-1,{min:p,max:g}=t,m=!S(o),b=!S(a),v=!S(l),y=(g-p)/(c+1);let x,_,w,k,M=te((g-p)/h/f)*f;if(M<1e-14&&!m&&!b)return[{value:p},{value:g}];k=Math.ceil(g/M)-Math.floor(p/M),k>h&&(M=te(k*M/h/f)*f),S(s)||(x=Math.pow(10,s),M=Math.ceil(M*x)/x),"ticks"===r?(_=Math.floor(p/M)*M,w=Math.ceil(g/M)*M):(_=p,w=g),m&&b&&i&&function(e,t){const n=Math.round(e);return n-t<=e&&n+t>=e}((a-o)/i,M/1e3)?(k=Math.round(Math.min((a-o)/M,u)),M=(a-o)/k,_=o,w=a):v?(_=m?o:_,w=b?a:w,k=l-1,M=(w-_)/k):(k=(w-_)/M,k=re(k,Math.round(k),M/1e3)?Math.round(k):Math.ceil(k));const E=Math.max(se(M),se(_));x=Math.pow(10,S(s)?E:s),_=Math.round(_*x)/x,w=Math.round(w*x)/x;let C=0;for(m&&(d&&_!==o?(n.push({value:o}),_<o&&C++,re(Math.round((_+C*M)*x)/x,o,Oo(o,y,e))&&C++):_<o&&C++);C<k;++C)n.push({value:Math.round((_+C*M)*x)/x});return b&&d&&w!==a?re(n[n.length-1].value,a,Oo(a,y,e))?n[n.length-1].value=a:n.push({value:a}):b&&w!==a||n.push({value:w}),n}({maxTicks:r,bounds:t.bounds,min:t.min,max:t.max,precision:n.precision,step:n.stepSize,count:n.count,maxDigits:e._maxDigits(),horizontal:e.isHorizontal(),minRotation:n.minRotation||0,includeBounds:!1!==n.includeBounds},e._range||e);return"ticks"===t.bounds&&ie(i,e,"value"),t.reverse?(i.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),i}configure(){const e=this,t=e.ticks;let n=e.min,r=e.max;if(super.configure(),e.options.offset&&t.length){const e=(r-n)/Math.max(t.length-1,1)/2;n-=e,r+=e}e._startValue=n,e._endValue=r,e._valueRange=r-n}getLabelForValue(e){return un(e,this.chart.options.locale)}}class To extends Po{determineDataLimits(){const e=this,{min:t,max:n}=e.getMinMax(!0);e.min=C(t)?t:0,e.max=C(n)?n:1,e.handleTickRangeOptions()}computeTickLimit(){const e=this,t=e.isHorizontal(),n=t?e.width:e.height,r=oe(e.options.ticks.minRotation),i=(t?Math.sin(r):Math.cos(r))||.001,o=e._resolveTickFontOptions(0);return Math.ceil(n/Math.min(40,o.lineHeight/i))}getPixelForValue(e){return null===e?NaN:this.getPixelForDecimal((e-this._startValue)/this._valueRange)}getValueForPixel(e){return this._startValue+this.getDecimalForPixel(e)*this._valueRange}}function Do(e){return 1==e/Math.pow(10,Math.floor(J(e)))}To.id="linear",To.defaults={ticks:{callback:Fr.formatters.numeric}};class Ao extends Yr{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(e,t){const n=Po.prototype.parse.apply(this,[e,t]);if(0!==n)return C(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const e=this,{min:t,max:n}=e.getMinMax(!0);e.min=C(t)?Math.max(0,t):null,e.max=C(n)?Math.max(0,n):null,e.options.beginAtZero&&(e._zero=!0),e.handleTickRangeOptions()}handleTickRangeOptions(){const e=this,{minDefined:t,maxDefined:n}=e.getUserBounds();let r=e.min,i=e.max;const o=e=>r=t?r:e,a=e=>i=n?i:e,s=(e,t)=>Math.pow(10,Math.floor(J(e))+t);r===i&&(r<=0?(o(1),a(10)):(o(s(r,-1)),a(s(i,1)))),r<=0&&o(s(i,-1)),i<=0&&a(s(r,1)),e._zero&&e.min!==e._suggestedMin&&r===s(e.min,0)&&o(s(r,-1)),e.min=r,e.max=i}buildTicks(){const e=this,t=e.options,n=function(e,t){const n=Math.floor(J(t.max)),r=Math.ceil(t.max/Math.pow(10,n)),i=[];let o=O(e.min,Math.pow(10,Math.floor(J(t.min)))),a=Math.floor(J(o)),s=Math.floor(o/Math.pow(10,a)),l=a<0?Math.pow(10,Math.abs(a)):1;do{i.push({value:o,major:Do(o)}),++s,10===s&&(s=1,++a,l=a>=0?1:l),o=Math.round(s*Math.pow(10,a)*l)/l}while(a<n||a===n&&s<r);const u=O(e.max,o);return i.push({value:u,major:Do(o)}),i}({min:e._userMin,max:e._userMax},e);return"ticks"===t.bounds&&ie(n,e,"value"),t.reverse?(n.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),n}getLabelForValue(e){return void 0===e?"0":un(e,this.chart.options.locale)}configure(){const e=this,t=e.min;super.configure(),e._startValue=J(t),e._valueRange=J(e.max)-J(t)}getPixelForValue(e){const t=this;return void 0!==e&&0!==e||(e=t.min),null===e||isNaN(e)?NaN:t.getPixelForDecimal(e===t.min?0:(J(e)-t._startValue)/t._valueRange)}getValueForPixel(e){const t=this,n=t.getDecimalForPixel(e);return Math.pow(10,t._startValue+n*t._valueRange)}}function Lo(e){const t=e.ticks;if(t.display&&e.display){const e=yt(t.backdropPadding);return P(t.font&&t.font.size,Je.font.size)+e.height}return 0}function Ro(e,t,n,r,i){return e===r||e===i?{start:t-n/2,end:t+n/2}:e<r||e>i?{start:t-n,end:t}:{start:t,end:t+n}}function Io(e){return 0===e||180===e?"center":e<180?"left":"right"}function No(e,t,n){return"right"===n?e-=t:"center"===n&&(e-=t/2),e}function zo(e,t,n){return 90===n||270===n?e-=t/2:(n>270||n<90)&&(e-=t),e}function Fo(e,t,n,r){const{ctx:i}=e;if(n)i.arc(e.xCenter,e.yCenter,t,0,Y);else{let n=e.getPointPosition(0,t);i.moveTo(n.x,n.y);for(let o=1;o<r;o++)n=e.getPointPosition(o,t),i.lineTo(n.x,n.y)}}function Vo(e){return ne(e)?e:0}Ao.id="logarithmic",Ao.defaults={ticks:{callback:Fr.formatters.logarithmic,major:{enabled:!0}}};class jo extends Po{constructor(e){super(e),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const e=this;e.width=e.maxWidth,e.height=e.maxHeight,e.paddingTop=Lo(e.options)/2,e.xCenter=Math.floor(e.width/2),e.yCenter=Math.floor((e.height-e.paddingTop)/2),e.drawingArea=Math.min(e.height-e.paddingTop,e.width)/2}determineDataLimits(){const e=this,{min:t,max:n}=e.getMinMax(!1);e.min=C(t)&&!isNaN(t)?t:0,e.max=C(n)&&!isNaN(n)?n:0,e.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Lo(this.options))}generateTickLabels(e){const t=this;Po.prototype.generateTickLabels.call(t,e),t._pointLabels=t.getLabels().map(((e,n)=>{const r=D(t.options.pointLabels.callback,[e,n],t);return r||0===r?r:""}))}fit(){const e=this,t=e.options;t.display&&t.pointLabels.display?function(e){const t={l:0,r:e.width,t:0,b:e.height-e.paddingTop},n={},r=[],i=[],o=e.getLabels().length;for(let u=0;u<o;u++){const o=e.options.pointLabels.setContext(e.getPointLabelContext(u));i[u]=o.padding;const c=e.getPointPosition(u,e.drawingArea+i[u]),d=xt(o.font),f=(a=e.ctx,s=d,l=M(l=e._pointLabels[u])?l:[l],{w:tt(a,s.string,l),h:l.length*s.lineHeight});r[u]=f;const h=e.getIndexAngle(u),p=ae(h),g=Ro(p,c.x,f.w,0,180),m=Ro(p,c.y,f.h,90,270);g.start<t.l&&(t.l=g.start,n.l=h),g.end>t.r&&(t.r=g.end,n.r=h),m.start<t.t&&(t.t=m.start,n.t=h),m.end>t.b&&(t.b=m.end,n.b=h)}var a,s,l;e._setReductions(e.drawingArea,t,n),e._pointLabelItems=function(e,t,n){const r=[],i=e.getLabels().length,o=e.options,a=Lo(o),s=e.getDistanceFromCenterForValue(o.ticks.reverse?e.min:e.max);for(let o=0;o<i;o++){const i=0===o?a/2:0,l=e.getPointPosition(o,s+i+n[o]),u=ae(e.getIndexAngle(o)),c=t[o],d=zo(l.y,c.h,u),f=Io(u),h=No(l.x,c.w,f);r.push({x:l.x,y:d,textAlign:f,left:h,top:d,right:h+c.w,bottom:d+c.h})}return r}(e,r,i)}(e):e.setCenterPoint(0,0,0,0)}_setReductions(e,t,n){const r=this;let i=t.l/Math.sin(n.l),o=Math.max(t.r-r.width,0)/Math.sin(n.r),a=-t.t/Math.cos(n.t),s=-Math.max(t.b-(r.height-r.paddingTop),0)/Math.cos(n.b);i=Vo(i),o=Vo(o),a=Vo(a),s=Vo(s),r.drawingArea=Math.max(e/2,Math.min(Math.floor(e-(i+o)/2),Math.floor(e-(a+s)/2))),r.setCenterPoint(i,o,a,s)}setCenterPoint(e,t,n,r){const i=this,o=i.width-t-i.drawingArea,a=e+i.drawingArea,s=n+i.drawingArea,l=i.height-i.paddingTop-r-i.drawingArea;i.xCenter=Math.floor((a+o)/2+i.left),i.yCenter=Math.floor((s+l)/2+i.top+i.paddingTop)}getIndexAngle(e){return ce(e*(Y/this.getLabels().length)+oe(this.options.startAngle||0))}getDistanceFromCenterForValue(e){const t=this;if(S(e))return NaN;const n=t.drawingArea/(t.max-t.min);return t.options.reverse?(t.max-e)*n:(e-t.min)*n}getValueForDistanceFromCenter(e){if(S(e))return NaN;const t=this,n=e/(t.drawingArea/(t.max-t.min));return t.options.reverse?t.max-n:t.min+n}getPointLabelContext(e){const t=this,n=t._pointLabels||[];if(e>=0&&e<n.length){const r=n[e];return function(e,t,n){return Object.assign(Object.create(e),{label:n,index:t,type:"pointLabel"})}(t.getContext(),e,r)}}getPointPosition(e,t){const n=this,r=n.getIndexAngle(e)-K;return{x:Math.cos(r)*t+n.xCenter,y:Math.sin(r)*t+n.yCenter,angle:r}}getPointPositionForValue(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))}getBasePosition(e){return this.getPointPositionForValue(e||0,this.getBaseValue())}getPointLabelPosition(e){const{left:t,top:n,right:r,bottom:i}=this._pointLabelItems[e];return{left:t,top:n,right:r,bottom:i}}drawBackground(){const e=this,{backgroundColor:t,grid:{circular:n}}=e.options;if(t){const r=e.ctx;r.save(),r.beginPath(),Fo(e,e.getDistanceFromCenterForValue(e._endValue),n,e.getLabels().length),r.closePath(),r.fillStyle=t,r.fill(),r.restore()}}drawGrid(){const e=this,t=e.ctx,n=e.options,{angleLines:r,grid:i}=n,o=e.getLabels().length;let a,s,l;if(n.pointLabels.display&&function(e,t){const{ctx:n,options:{pointLabels:r}}=e;for(let i=t-1;i>=0;i--){const t=r.setContext(e.getPointLabelContext(i)),o=xt(t.font),{x:a,y:s,textAlign:l,left:u,top:c,right:d,bottom:f}=e._pointLabelItems[i],{backdropColor:h}=t;if(!S(h)){const e=yt(t.backdropPadding);n.fillStyle=h,n.fillRect(u-e.left,c-e.top,d-u+e.width,f-c+e.height)}ct(n,e._pointLabels[i],a,s+o.lineHeight/2,o,{color:t.color,textAlign:l,textBaseline:"middle"})}}(e,o),i.display&&e.ticks.forEach(((t,n)=>{if(0!==n){s=e.getDistanceFromCenterForValue(t.value);const r=i.setContext(e.getContext(n-1));!function(e,t,n,r){const i=e.ctx,o=t.circular,{color:a,lineWidth:s}=t;!o&&!r||!a||!s||n<0||(i.save(),i.strokeStyle=a,i.lineWidth=s,i.setLineDash(t.borderDash),i.lineDashOffset=t.borderDashOffset,i.beginPath(),Fo(e,n,o,r),i.closePath(),i.stroke(),i.restore())}(e,r,s,o)}})),r.display){for(t.save(),a=e.getLabels().length-1;a>=0;a--){const i=r.setContext(e.getPointLabelContext(a)),{color:o,lineWidth:u}=i;u&&o&&(t.lineWidth=u,t.strokeStyle=o,t.setLineDash(i.borderDash),t.lineDashOffset=i.borderDashOffset,s=e.getDistanceFromCenterForValue(n.ticks.reverse?e.min:e.max),l=e.getPointPosition(a,s),t.beginPath(),t.moveTo(e.xCenter,e.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const e=this,t=e.ctx,n=e.options,r=n.ticks;if(!r.display)return;const i=e.getIndexAngle(0);let o,a;t.save(),t.translate(e.xCenter,e.yCenter),t.rotate(i),t.textAlign="center",t.textBaseline="middle",e.ticks.forEach(((i,s)=>{if(0===s&&!n.reverse)return;const l=r.setContext(e.getContext(s)),u=xt(l.font);if(o=e.getDistanceFromCenterForValue(e.ticks[s].value),l.showLabelBackdrop){t.font=u.string,a=t.measureText(i.label).width,t.fillStyle=l.backdropColor;const e=yt(l.backdropPadding);t.fillRect(-a/2-e.left,-o-u.size/2-e.top,a+e.width,u.size+e.height)}ct(t,i.label,0,-o,u,{color:l.color})})),t.restore()}drawTitle(){}}jo.id="radialLinear",jo.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Fr.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:e=>e,padding:5}},jo.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},jo.descriptors={angleLines:{_fallback:"grid"}};const Bo={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Ho=Object.keys(Bo);function Wo(e,t){return e-t}function Uo(e,t){if(S(t))return null;const n=e._adapter,{parser:r,round:i,isoWeekday:o}=e._parseOpts;let a=t;return"function"==typeof r&&(a=r(a)),C(a)||(a="string"==typeof r?n.parse(a,r):n.parse(a)),null===a?null:(i&&(a="week"!==i||!ne(o)&&!0!==o?n.startOf(a,i):n.startOf(a,"isoWeek",o)),+a)}function $o(e,t,n,r){const i=Ho.length;for(let o=Ho.indexOf(e);o<i-1;++o){const e=Bo[Ho[o]],i=e.steps?e.steps:Number.MAX_SAFE_INTEGER;if(e.common&&Math.ceil((n-t)/(i*e.size))<=r)return Ho[o]}return Ho[i-1]}function Yo(e,t,n){if(n){if(n.length){const{lo:r,hi:i}=wt(n,t);e[n[r]>=t?n[r]:n[i]]=!0}}else e[t]=!0}function Xo(e,t,n){const r=[],i={},o=t.length;let a,s;for(a=0;a<o;++a)s=t[a],i[s]=a,r.push({value:s,major:!1});return 0!==o&&n?function(e,t,n,r){const i=e._adapter,o=+i.startOf(t[0].value,r),a=t[t.length-1].value;let s,l;for(s=o;s<=a;s=+i.add(s,1,r))l=n[s],l>=0&&(t[l].major=!0);return t}(e,r,i,n):r}class qo extends Yr{constructor(e){super(e),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(e,t){const n=e.time||(e.time={}),r=this._adapter=new tr._date(e.adapters.date);F(n.displayFormats,r.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(e),this._normalized=t.normalized}parse(e,t){return void 0===e?null:Uo(this,e)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const e=this,t=e.options,n=e._adapter,r=t.time.unit||"day";let{min:i,max:o,minDefined:a,maxDefined:s}=e.getUserBounds();function l(e){a||isNaN(e.min)||(i=Math.min(i,e.min)),s||isNaN(e.max)||(o=Math.max(o,e.max))}a&&s||(l(e._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||l(e.getMinMax(!1))),i=C(i)&&!isNaN(i)?i:+n.startOf(Date.now(),r),o=C(o)&&!isNaN(o)?o:+n.endOf(Date.now(),r)+1,e.min=Math.min(i,o-1),e.max=Math.max(i+1,o)}_getLabelBounds(){const e=this.getLabelTimestamps();let t=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return e.length&&(t=e[0],n=e[e.length-1]),{min:t,max:n}}buildTicks(){const e=this,t=e.options,n=t.time,r=t.ticks,i="labels"===r.source?e.getLabelTimestamps():e._generate();"ticks"===t.bounds&&i.length&&(e.min=e._userMin||i[0],e.max=e._userMax||i[i.length-1]);const o=e.min,a=function(e,t,n){let r=0,i=e.length;for(;r<i&&e[r]<t;)r++;for(;i>r&&e[i-1]>n;)i--;return r>0||i<e.length?e.slice(r,i):e}(i,o,e.max);return e._unit=n.unit||(r.autoSkip?$o(n.minUnit,e.min,e.max,e._getLabelCapacity(o)):function(e,t,n,r,i){for(let o=Ho.length-1;o>=Ho.indexOf(n);o--){const n=Ho[o];if(Bo[n].common&&e._adapter.diff(i,r,n)>=t-1)return n}return Ho[n?Ho.indexOf(n):0]}(e,a.length,n.minUnit,e.min,e.max)),e._majorUnit=r.major.enabled&&"year"!==e._unit?function(e){for(let t=Ho.indexOf(e)+1,n=Ho.length;t<n;++t)if(Bo[Ho[t]].common)return Ho[t]}(e._unit):void 0,e.initOffsets(i),t.reverse&&a.reverse(),Xo(e,a,e._majorUnit)}initOffsets(e){const t=this;let n,r,i=0,o=0;t.options.offset&&e.length&&(n=t.getDecimalForValue(e[0]),i=1===e.length?1-n:(t.getDecimalForValue(e[1])-n)/2,r=t.getDecimalForValue(e[e.length-1]),o=1===e.length?r:(r-t.getDecimalForValue(e[e.length-2]))/2);const a=e.length<3?.5:.25;i=fe(i,0,a),o=fe(o,0,a),t._offsets={start:i,end:o,factor:1/(i+1+o)}}_generate(){const e=this,t=e._adapter,n=e.min,r=e.max,i=e.options,o=i.time,a=o.unit||$o(o.minUnit,n,r,e._getLabelCapacity(n)),s=P(o.stepSize,1),l="week"===a&&o.isoWeekday,u=ne(l)||!0===l,c={};let d,f,h=n;if(u&&(h=+t.startOf(h,"isoWeek",l)),h=+t.startOf(h,u?"day":a),t.diff(r,n,a)>1e5*s)throw new Error(n+" and "+r+" are too far apart with stepSize of "+s+" "+a);const p="data"===i.ticks.source&&e.getDataTimestamps();for(d=h,f=0;d<r;d=+t.add(d,s,a),f++)Yo(c,d,p);return d!==r&&"ticks"!==i.bounds&&1!==f||Yo(c,d,p),Object.keys(c).sort(((e,t)=>e-t)).map((e=>+e))}getLabelForValue(e){const t=this._adapter,n=this.options.time;return n.tooltipFormat?t.format(e,n.tooltipFormat):t.format(e,n.displayFormats.datetime)}_tickFormatFunction(e,t,n,r){const i=this,o=i.options,a=o.time.displayFormats,s=i._unit,l=i._majorUnit,u=s&&a[s],c=l&&a[l],d=n[t],f=l&&c&&d&&d.major,h=i._adapter.format(e,r||(f?c:u)),p=o.ticks.callback;return p?D(p,[h,t,n],i):h}generateTickLabels(e){let t,n,r;for(t=0,n=e.length;t<n;++t)r=e[t],r.label=this._tickFormatFunction(r.value,t,e)}getDecimalForValue(e){const t=this;return null===e?NaN:(e-t.min)/(t.max-t.min)}getPixelForValue(e){const t=this,n=t._offsets,r=t.getDecimalForValue(e);return t.getPixelForDecimal((n.start+r)*n.factor)}getValueForPixel(e){const t=this,n=t._offsets,r=t.getDecimalForPixel(e)/n.factor-n.end;return t.min+r*(t.max-t.min)}_getLabelSize(e){const t=this,n=t.options.ticks,r=t.ctx.measureText(e).width,i=oe(t.isHorizontal()?n.maxRotation:n.minRotation),o=Math.cos(i),a=Math.sin(i),s=t._resolveTickFontOptions(0).size;return{w:r*o+s*a,h:r*a+s*o}}_getLabelCapacity(e){const t=this,n=t.options.time,r=n.displayFormats,i=r[n.unit]||r.millisecond,o=t._tickFormatFunction(e,0,Xo(t,[e],t._majorUnit),i),a=t._getLabelSize(o),s=Math.floor(t.isHorizontal()?t.width/a.w:t.height/a.h)-1;return s>0?s:1}getDataTimestamps(){const e=this;let t,n,r=e._cache.data||[];if(r.length)return r;const i=e.getMatchingVisibleMetas();if(e._normalized&&i.length)return e._cache.data=i[0].controller.getAllParsedValues(e);for(t=0,n=i.length;t<n;++t)r=r.concat(i[t].controller.getAllParsedValues(e));return e._cache.data=e.normalize(r)}getLabelTimestamps(){const e=this,t=e._cache.labels||[];let n,r;if(t.length)return t;const i=e.getLabels();for(n=0,r=i.length;n<r;++n)t.push(Uo(e,i[n]));return e._cache.labels=e._normalized?t:e.normalize(t)}normalize(e){return Ct(e.sort(Wo))}}function Qo(e,t,n){let r,i,o,a,s=0,l=e.length-1;n?(t>=e[s].pos&&t<=e[l].pos&&({lo:s,hi:l}=kt(e,"pos",t)),({pos:r,time:o}=e[s]),({pos:i,time:a}=e[l])):(t>=e[s].time&&t<=e[l].time&&({lo:s,hi:l}=kt(e,"time",t)),({time:r,pos:o}=e[s]),({time:i,pos:a}=e[l]));const u=i-r;return u?o+(a-o)*(t-r)/u:o}qo.id="time",qo.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Ko extends qo{constructor(e){super(e),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const e=this,t=e._getTimestampsForTable(),n=e._table=e.buildLookupTable(t);e._minPos=Qo(n,e.min),e._tableRange=Qo(n,e.max)-e._minPos,super.initOffsets(t)}buildLookupTable(e){const{min:t,max:n}=this,r=[],i=[];let o,a,s,l,u;for(o=0,a=e.length;o<a;++o)l=e[o],l>=t&&l<=n&&r.push(l);if(r.length<2)return[{time:t,pos:0},{time:n,pos:1}];for(o=0,a=r.length;o<a;++o)u=r[o+1],s=r[o-1],l=r[o],Math.round((u+s)/2)!==l&&i.push({time:l,pos:o/(a-1)});return i}_getTimestampsForTable(){const e=this;let t=e._cache.all||[];if(t.length)return t;const n=e.getDataTimestamps(),r=e.getLabelTimestamps();return t=n.length&&r.length?e.normalize(n.concat(r)):n.length?n:r,t=e._cache.all=t,t}getDecimalForValue(e){return(Qo(this._table,e)-this._minPos)/this._tableRange}getValueForPixel(e){const t=this,n=t._offsets,r=t.getDecimalForPixel(e)/n.factor-n.end;return Qo(t._table,r*t._tableRange+t._minPos,!0)}}Ko.id="timeseries",Ko.defaults=qo.defaults;const Go=[Zn,Vi,Eo,Object.freeze({__proto__:null,CategoryScale:Co,LinearScale:To,LogarithmicScale:Ao,RadialLinearScale:jo,TimeScale:qo,TimeSeriesScale:Ko})];mi.register(...Go);const Zo=mi;function Jo(){}function ea(e){return null==e?Jo:function(){return this.querySelector(e)}}function ta(e){return null==e?[]:Array.isArray(e)?e:Array.from(e)}function na(){return[]}function ra(e){return null==e?na:function(){return this.querySelectorAll(e)}}function ia(e){return function(){return this.matches(e)}}function oa(e){return function(t){return t.matches(e)}}var aa=Array.prototype.find;function sa(){return this.firstElementChild}var la=Array.prototype.filter;function ua(){return Array.from(this.children)}function ca(e){return new Array(e.length)}function da(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}function fa(e){return function(){return e}}function ha(e,t,n,r,i,o){for(var a,s=0,l=t.length,u=o.length;s<u;++s)(a=t[s])?(a.__data__=o[s],r[s]=a):n[s]=new da(e,o[s]);for(;s<l;++s)(a=t[s])&&(i[s]=a)}function pa(e,t,n,r,i,o,a){var s,l,u,c=new Map,d=t.length,f=o.length,h=new Array(d);for(s=0;s<d;++s)(l=t[s])&&(h[s]=u=a.call(l,l.__data__,s,t)+"",c.has(u)?i[s]=l:c.set(u,l));for(s=0;s<f;++s)u=a.call(e,o[s],s,o)+"",(l=c.get(u))?(r[s]=l,l.__data__=o[s],c.delete(u)):n[s]=new da(e,o[s]);for(s=0;s<d;++s)(l=t[s])&&c.get(h[s])===l&&(i[s]=l)}function ga(e){return e.__data__}function ma(e){return"object"==typeof e&&"length"in e?e:Array.from(e)}function ba(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}da.prototype={constructor:da,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};var va="http://www.w3.org/1999/xhtml";const ya={svg:"http://www.w3.org/2000/svg",xhtml:va,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function xa(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),ya.hasOwnProperty(t)?{space:ya[t],local:e}:e}function _a(e){return function(){this.removeAttribute(e)}}function wa(e){return function(){this.removeAttributeNS(e.space,e.local)}}function ka(e,t){return function(){this.setAttribute(e,t)}}function Sa(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function Ma(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function Ea(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}function Ca(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function Oa(e){return function(){this.style.removeProperty(e)}}function Pa(e,t,n){return function(){this.style.setProperty(e,t,n)}}function Ta(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function Da(e,t){return e.style.getPropertyValue(t)||Ca(e).getComputedStyle(e,null).getPropertyValue(t)}function Aa(e){return function(){delete this[e]}}function La(e,t){return function(){this[e]=t}}function Ra(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}function Ia(e){return e.trim().split(/^|\s+/)}function Na(e){return e.classList||new za(e)}function za(e){this._node=e,this._names=Ia(e.getAttribute("class")||"")}function Fa(e,t){for(var n=Na(e),r=-1,i=t.length;++r<i;)n.add(t[r])}function Va(e,t){for(var n=Na(e),r=-1,i=t.length;++r<i;)n.remove(t[r])}function ja(e){return function(){Fa(this,e)}}function Ba(e){return function(){Va(this,e)}}function Ha(e,t){return function(){(t.apply(this,arguments)?Fa:Va)(this,e)}}function Wa(){this.textContent=""}function Ua(e){return function(){this.textContent=e}}function $a(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}function Ya(){this.innerHTML=""}function Xa(e){return function(){this.innerHTML=e}}function qa(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}function Qa(){this.nextSibling&&this.parentNode.appendChild(this)}function Ka(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Ga(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===va&&t.documentElement.namespaceURI===va?t.createElement(e):t.createElementNS(n,e)}}function Za(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}function Ja(e){var t=xa(e);return(t.local?Za:Ga)(t)}function es(){return null}function ts(){var e=this.parentNode;e&&e.removeChild(this)}function ns(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function rs(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function is(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}function os(e){return function(){var t=this.__on;if(t){for(var n,r=0,i=-1,o=t.length;r<o;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++i]=n:this.removeEventListener(n.type,n.listener,n.options);++i?t.length=i:delete this.__on}}}function as(e,t,n){return function(){var r,i=this.__on,o=function(e){return function(t){e.call(this,t,this.__data__)}}(t);if(i)for(var a=0,s=i.length;a<s;++a)if((r=i[a]).type===e.type&&r.name===e.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=n),void(r.value=t);this.addEventListener(e.type,o,n),r={type:e.type,name:e.name,value:t,listener:o,options:n},i?i.push(r):this.__on=[r]}}function ss(e,t,n){var r=Ca(e),i=r.CustomEvent;"function"==typeof i?i=new i(t,n):(i=r.document.createEvent("Event"),n?(i.initEvent(t,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(t,!1,!1)),e.dispatchEvent(i)}function ls(e,t){return function(){return ss(this,e,t)}}function us(e,t){return function(){return ss(this,e,t.apply(this,arguments))}}za.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};var cs=[null];function ds(e,t){this._groups=e,this._parents=t}function fs(){return new ds([[document.documentElement]],cs)}ds.prototype=fs.prototype={constructor:ds,select:function(e){"function"!=typeof e&&(e=ea(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=t[i],l=s.length,u=r[i]=new Array(l),c=0;c<l;++c)(o=s[c])&&(a=e.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),u[c]=a);return new ds(r,this._parents)},selectAll:function(e){e="function"==typeof e?function(e){return function(){return ta(e.apply(this,arguments))}}(e):ra(e);for(var t=this._groups,n=t.length,r=[],i=[],o=0;o<n;++o)for(var a,s=t[o],l=s.length,u=0;u<l;++u)(a=s[u])&&(r.push(e.call(a,a.__data__,u,s)),i.push(a));return new ds(r,i)},selectChild:function(e){return this.select(null==e?sa:function(e){return function(){return aa.call(this.children,e)}}("function"==typeof e?e:oa(e)))},selectChildren:function(e){return this.selectAll(null==e?ua:function(e){return function(){return la.call(this.children,e)}}("function"==typeof e?e:oa(e)))},filter:function(e){"function"!=typeof e&&(e=ia(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o,a=t[i],s=a.length,l=r[i]=[],u=0;u<s;++u)(o=a[u])&&e.call(o,o.__data__,u,a)&&l.push(o);return new ds(r,this._parents)},data:function(e,t){if(!arguments.length)return Array.from(this,ga);var n=t?pa:ha,r=this._parents,i=this._groups;"function"!=typeof e&&(e=fa(e));for(var o=i.length,a=new Array(o),s=new Array(o),l=new Array(o),u=0;u<o;++u){var c=r[u],d=i[u],f=d.length,h=ma(e.call(c,c&&c.__data__,u,r)),p=h.length,g=s[u]=new Array(p),m=a[u]=new Array(p),b=l[u]=new Array(f);n(c,d,g,m,b,h,t);for(var v,y,x=0,_=0;x<p;++x)if(v=g[x]){for(x>=_&&(_=x+1);!(y=m[_])&&++_<p;);v._next=y||null}}return(a=new ds(a,r))._enter=s,a._exit=l,a},enter:function(){return new ds(this._enter||this._groups.map(ca),this._parents)},exit:function(){return new ds(this._exit||this._groups.map(ca),this._parents)},join:function(e,t,n){var r=this.enter(),i=this,o=this.exit();return"function"==typeof e?(r=e(r))&&(r=r.selection()):r=r.append(e+""),null!=t&&(i=t(i))&&(i=i.selection()),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(e){for(var t=e.selection?e.selection():e,n=this._groups,r=t._groups,i=n.length,o=r.length,a=Math.min(i,o),s=new Array(i),l=0;l<a;++l)for(var u,c=n[l],d=r[l],f=c.length,h=s[l]=new Array(f),p=0;p<f;++p)(u=c[p]||d[p])&&(h[p]=u);for(;l<i;++l)s[l]=n[l];return new ds(s,this._parents)},selection:function(){return this},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,i=e[t],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=ba);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],l=s.length,u=i[o]=new Array(l),c=0;c<l;++c)(a=s[c])&&(u[c]=a);u.sort(t)}return new ds(i,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){let e=0;for(const t of this)++e;return e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var i,o=t[n],a=0,s=o.length;a<s;++a)(i=o[a])&&e.call(i,i.__data__,a,o);return this},attr:function(e,t){var n=xa(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?wa:_a:"function"==typeof t?n.local?Ea:Ma:n.local?Sa:ka)(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?Oa:"function"==typeof t?Ta:Pa)(e,t,null==n?"":n)):Da(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?Aa:"function"==typeof t?Ra:La)(e,t)):this.node()[e]},classed:function(e,t){var n=Ia(e+"");if(arguments.length<2){for(var r=Na(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof t?Ha:t?ja:Ba)(n,t))},text:function(e){return arguments.length?this.each(null==e?Wa:("function"==typeof e?$a:Ua)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?Ya:("function"==typeof e?qa:Xa)(e)):this.node().innerHTML},raise:function(){return this.each(Qa)},lower:function(){return this.each(Ka)},append:function(e){var t="function"==typeof e?e:Ja(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function(e,t){var n="function"==typeof e?e:Ja(e),r=null==t?es:"function"==typeof t?t:ea(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ts)},clone:function(e){return this.select(e?rs:ns)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,i,o=is(e+""),a=o.length;if(!(arguments.length<2)){for(s=t?as:os,r=0;r<a;++r)this.each(s(o[r],t,n));return this}var s=this.node().__on;if(s)for(var l,u=0,c=s.length;u<c;++u)for(r=0,l=s[u];r<a;++r)if((i=o[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(e,t){return this.each(("function"==typeof t?us:ls)(e,t))},[Symbol.iterator]:function*(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r,i=e[t],o=0,a=i.length;o<a;++o)(r=i[o])&&(yield r)}};const hs=fs;var ps={value:()=>{}};function gs(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r||/[\s.]/.test(e))throw new Error("illegal type: "+e);r[e]=[]}return new ms(r)}function ms(e){this._=e}function bs(e,t){return e.trim().split(/^|\s+/).map((function(e){var n="",r=e.indexOf(".");if(r>=0&&(n=e.slice(r+1),e=e.slice(0,r)),e&&!t.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:n}}))}function vs(e,t){for(var n,r=0,i=e.length;r<i;++r)if((n=e[r]).name===t)return n.value}function ys(e,t,n){for(var r=0,i=e.length;r<i;++r)if(e[r].name===t){e[r]=ps,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=n&&e.push({name:t,value:n}),e}ms.prototype=gs.prototype={constructor:ms,on:function(e,t){var n,r=this._,i=bs(e+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++o<a;)if(n=(e=i[o]).type)r[n]=ys(r[n],e.name,t);else if(null==t)for(n in r)r[n]=ys(r[n],e.name,null);return this}for(;++o<a;)if((n=(e=i[o]).type)&&(n=vs(r[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new ms(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(o=0,n=(r=this._[e]).length;o<n;++o)r[o].value.apply(t,i)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],i=0,o=r.length;i<o;++i)r[i].value.apply(t,n)}};const xs=gs;var _s,ws,ks=0,Ss=0,Ms=0,Es=0,Cs=0,Os=0,Ps="object"==typeof performance&&performance.now?performance:Date,Ts="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function Ds(){return Cs||(Ts(As),Cs=Ps.now()+Os)}function As(){Cs=0}function Ls(){this._call=this._time=this._next=null}function Rs(e,t,n){var r=new Ls;return r.restart(e,t,n),r}function Is(){Cs=(Es=Ps.now())+Os,ks=Ss=0;try{!function(){Ds(),++ks;for(var e,t=_s;t;)(e=Cs-t._time)>=0&&t._call.call(void 0,e),t=t._next;--ks}()}finally{ks=0,function(){for(var e,t,n=_s,r=1/0;n;)n._call?(r>n._time&&(r=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:_s=t);ws=e,zs(r)}(),Cs=0}}function Ns(){var e=Ps.now(),t=e-Es;t>1e3&&(Os-=t,Es=e)}function zs(e){ks||(Ss&&(Ss=clearTimeout(Ss)),e-Cs>24?(e<1/0&&(Ss=setTimeout(Is,e-Ps.now()-Os)),Ms&&(Ms=clearInterval(Ms))):(Ms||(Es=Ps.now(),Ms=setInterval(Ns,1e3)),ks=1,Ts(Is)))}function Fs(e,t,n){var r=new Ls;return t=null==t?0:+t,r.restart((n=>{r.stop(),e(n+t)}),t,n),r}Ls.prototype=Rs.prototype={constructor:Ls,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?Ds():+n)+(null==t?0:+t),this._next||ws===this||(ws?ws._next=this:_s=this,ws=this),this._call=e,this._time=n,zs()},stop:function(){this._call&&(this._call=null,this._time=1/0,zs())}};var Vs=xs("start","end","cancel","interrupt"),js=[];function Bs(e,t,n,r,i,o){var a=e.__transition;if(a){if(n in a)return}else e.__transition={};!function(e,t,n){var r,i=e.__transition;function o(l){var u,c,d,f;if(1!==n.state)return s();for(u in i)if((f=i[u]).name===n.name){if(3===f.state)return Fs(o);4===f.state?(f.state=6,f.timer.stop(),f.on.call("interrupt",e,e.__data__,f.index,f.group),delete i[u]):+u<t&&(f.state=6,f.timer.stop(),f.on.call("cancel",e,e.__data__,f.index,f.group),delete i[u])}if(Fs((function(){3===n.state&&(n.state=4,n.timer.restart(a,n.delay,n.time),a(l))})),n.state=2,n.on.call("start",e,e.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(d=n.tween.length),u=0,c=-1;u<d;++u)(f=n.tween[u].value.call(e,e.__data__,n.index,n.group))&&(r[++c]=f);r.length=c+1}}function a(t){for(var i=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(s),n.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(e,i);5===n.state&&(n.on.call("end",e,e.__data__,n.index,n.group),s())}function s(){for(var r in n.state=6,n.timer.stop(),delete i[t],i)return;delete e.__transition}i[t]=n,n.timer=Rs((function(e){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=e&&o(e-n.delay)}),0,n.time)}(e,n,{name:t,index:r,group:i,on:Vs,tween:js,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function Hs(e,t){var n=Us(e,t);if(n.state>0)throw new Error("too late; already scheduled");return n}function Ws(e,t){var n=Us(e,t);if(n.state>3)throw new Error("too late; already running");return n}function Us(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}function $s(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}}var Ys,Xs=180/Math.PI,qs={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Qs(e,t,n,r,i,o){var a,s,l;return(a=Math.sqrt(e*e+t*t))&&(e/=a,t/=a),(l=e*n+t*r)&&(n-=e*l,r-=t*l),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,l/=s),e*r<t*n&&(e=-e,t=-t,l=-l,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(t,e)*Xs,skewX:Math.atan(l)*Xs,scaleX:a,scaleY:s}}function Ks(e,t,n,r){function i(e){return e.length?e.pop()+" ":""}return function(o,a){var s=[],l=[];return o=e(o),a=e(a),function(e,r,i,o,a,s){if(e!==i||r!==o){var l=a.push("translate(",null,t,null,n);s.push({i:l-4,x:$s(e,i)},{i:l-2,x:$s(r,o)})}else(i||o)&&a.push("translate("+i+t+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,l),function(e,t,n,o){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:$s(e,t)})):t&&n.push(i(n)+"rotate("+t+r)}(o.rotate,a.rotate,s,l),function(e,t,n,o){e!==t?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:$s(e,t)}):t&&n.push(i(n)+"skewX("+t+r)}(o.skewX,a.skewX,s,l),function(e,t,n,r,o,a){if(e!==n||t!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:$s(e,n)},{i:s-2,x:$s(t,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,l),o=a=null,function(e){for(var t,n=-1,r=l.length;++n<r;)s[(t=l[n]).i]=t.x(e);return s.join("")}}}var Gs=Ks((function(e){const t=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(e+"");return t.isIdentity?qs:Qs(t.a,t.b,t.c,t.d,t.e,t.f)}),"px, ","px)","deg)"),Zs=Ks((function(e){return null==e?qs:(Ys||(Ys=document.createElementNS("http://www.w3.org/2000/svg","g")),Ys.setAttribute("transform",e),(e=Ys.transform.baseVal.consolidate())?Qs((e=e.matrix).a,e.b,e.c,e.d,e.e,e.f):qs)}),", ",")",")");function Js(e,t){var n,r;return function(){var i=Ws(this,e),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===t){(r=r.slice()).splice(a,1);break}i.tween=r}}function el(e,t,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=Ws(this,e),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:t,value:n},l=0,u=i.length;l<u;++l)if(i[l].name===t){i[l]=s;break}l===u&&i.push(s)}o.tween=i}}function tl(e,t,n){var r=e._id;return e.each((function(){var e=Ws(this,r);(e.value||(e.value={}))[t]=n.apply(this,arguments)})),function(e){return Us(e,r).value[t]}}function nl(e,t,n){e.prototype=t.prototype=n,n.constructor=e}function rl(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function il(){}var ol=.7,al=1/ol,sl="\\s*([+-]?\\d+)\\s*",ll="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",ul="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",cl=/^#([0-9a-f]{3,8})$/,dl=new RegExp("^rgb\\("+[sl,sl,sl]+"\\)$"),fl=new RegExp("^rgb\\("+[ul,ul,ul]+"\\)$"),hl=new RegExp("^rgba\\("+[sl,sl,sl,ll]+"\\)$"),pl=new RegExp("^rgba\\("+[ul,ul,ul,ll]+"\\)$"),gl=new RegExp("^hsl\\("+[ll,ul,ul]+"\\)$"),ml=new RegExp("^hsla\\("+[ll,ul,ul,ll]+"\\)$"),bl={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function vl(){return this.rgb().formatHex()}function yl(){return this.rgb().formatRgb()}function xl(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=cl.exec(e))?(n=t[1].length,t=parseInt(t[1],16),6===n?_l(t):3===n?new Ml(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):8===n?wl(t>>24&255,t>>16&255,t>>8&255,(255&t)/255):4===n?wl(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|240&t,((15&t)<<4|15&t)/255):null):(t=dl.exec(e))?new Ml(t[1],t[2],t[3],1):(t=fl.exec(e))?new Ml(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=hl.exec(e))?wl(t[1],t[2],t[3],t[4]):(t=pl.exec(e))?wl(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=gl.exec(e))?Pl(t[1],t[2]/100,t[3]/100,1):(t=ml.exec(e))?Pl(t[1],t[2]/100,t[3]/100,t[4]):bl.hasOwnProperty(e)?_l(bl[e]):"transparent"===e?new Ml(NaN,NaN,NaN,0):null}function _l(e){return new Ml(e>>16&255,e>>8&255,255&e,1)}function wl(e,t,n,r){return r<=0&&(e=t=n=NaN),new Ml(e,t,n,r)}function kl(e){return e instanceof il||(e=xl(e)),e?new Ml((e=e.rgb()).r,e.g,e.b,e.opacity):new Ml}function Sl(e,t,n,r){return 1===arguments.length?kl(e):new Ml(e,t,n,null==r?1:r)}function Ml(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function El(){return"#"+Ol(this.r)+Ol(this.g)+Ol(this.b)}function Cl(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}function Ol(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function Pl(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new Dl(e,t,n,r)}function Tl(e){if(e instanceof Dl)return new Dl(e.h,e.s,e.l,e.opacity);if(e instanceof il||(e=xl(e)),!e)return new Dl;if(e instanceof Dl)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,i=Math.min(t,n,r),o=Math.max(t,n,r),a=NaN,s=o-i,l=(o+i)/2;return s?(a=t===o?(n-r)/s+6*(n<r):n===o?(r-t)/s+2:(t-n)/s+4,s/=l<.5?o+i:2-o-i,a*=60):s=l>0&&l<1?0:a,new Dl(a,s,l,e.opacity)}function Dl(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function Al(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}function Ll(e,t,n,r,i){var o=e*e,a=o*e;return((1-3*e+3*o-a)*t+(4-6*o+3*a)*n+(1+3*e+3*o-3*a)*r+a*i)/6}nl(il,xl,{copy:function(e){return Object.assign(new this.constructor,this,e)},displayable:function(){return this.rgb().displayable()},hex:vl,formatHex:vl,formatHsl:function(){return Tl(this).formatHsl()},formatRgb:yl,toString:yl}),nl(Ml,Sl,rl(il,{brighter:function(e){return e=null==e?al:Math.pow(al,e),new Ml(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?ol:Math.pow(ol,e),new Ml(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:El,formatHex:El,formatRgb:Cl,toString:Cl})),nl(Dl,(function(e,t,n,r){return 1===arguments.length?Tl(e):new Dl(e,t,n,null==r?1:r)}),rl(il,{brighter:function(e){return e=null==e?al:Math.pow(al,e),new Dl(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?ol:Math.pow(ol,e),new Dl(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,i=2*n-r;return new Ml(Al(e>=240?e-240:e+120,i,r),Al(e,i,r),Al(e<120?e+240:e-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===e?")":", "+e+")")}}));const Rl=e=>()=>e;function Il(e,t){var n=t-e;return n?function(e,t){return function(n){return e+n*t}}(e,n):Rl(isNaN(e)?t:e)}const Nl=function e(t){var n=function(e){return 1==(e=+e)?Il:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):Rl(isNaN(t)?n:t)}}(t);function r(e,t){var r=n((e=Sl(e)).r,(t=Sl(t)).r),i=n(e.g,t.g),o=n(e.b,t.b),a=Il(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=i(t),e.b=o(t),e.opacity=a(t),e+""}}return r.gamma=e,r}(1);function zl(e){return function(t){var n,r,i=t.length,o=new Array(i),a=new Array(i),s=new Array(i);for(n=0;n<i;++n)r=Sl(t[n]),o[n]=r.r||0,a[n]=r.g||0,s[n]=r.b||0;return o=e(o),a=e(a),s=e(s),r.opacity=1,function(e){return r.r=o(e),r.g=a(e),r.b=s(e),r+""}}}zl((function(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),i=e[r],o=e[r+1],a=r>0?e[r-1]:2*i-o,s=r<t-1?e[r+2]:2*o-i;return Ll((n-r/t)*t,a,i,o,s)}})),zl((function(e){var t=e.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*t),i=e[(r+t-1)%t],o=e[r%t],a=e[(r+1)%t],s=e[(r+2)%t];return Ll((n-r/t)*t,i,o,a,s)}}));var Fl=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Vl=new RegExp(Fl.source,"g");function jl(e,t){var n,r,i,o=Fl.lastIndex=Vl.lastIndex=0,a=-1,s=[],l=[];for(e+="",t+="";(n=Fl.exec(e))&&(r=Vl.exec(t));)(i=r.index)>o&&(i=t.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,l.push({i:a,x:$s(n,r)})),o=Vl.lastIndex;return o<t.length&&(i=t.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?l[0]?function(e){return function(t){return e(t)+""}}(l[0].x):function(e){return function(){return e}}(t):(t=l.length,function(e){for(var n,r=0;r<t;++r)s[(n=l[r]).i]=n.x(e);return s.join("")})}function Bl(e,t){var n;return("number"==typeof t?$s:t instanceof xl?Nl:(n=xl(t))?(t=n,Nl):jl)(e,t)}function Hl(e){return function(){this.removeAttribute(e)}}function Wl(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Ul(e,t,n){var r,i,o=n+"";return function(){var a=this.getAttribute(e);return a===o?null:a===r?i:i=t(r=a,n)}}function $l(e,t,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(e.space,e.local);return a===o?null:a===r?i:i=t(r=a,n)}}function Yl(e,t,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttribute(e))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=t(r=a,l));this.removeAttribute(e)}}function Xl(e,t,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttributeNS(e.space,e.local))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=t(r=a,l));this.removeAttributeNS(e.space,e.local)}}function ql(e,t){return function(n){this.setAttribute(e,t.call(this,n))}}function Ql(e,t){return function(n){this.setAttributeNS(e.space,e.local,t.call(this,n))}}function Kl(e,t){var n,r;function i(){var i=t.apply(this,arguments);return i!==r&&(n=(r=i)&&Ql(e,i)),n}return i._value=t,i}function Gl(e,t){var n,r;function i(){var i=t.apply(this,arguments);return i!==r&&(n=(r=i)&&ql(e,i)),n}return i._value=t,i}function Zl(e,t){return function(){Hs(this,e).delay=+t.apply(this,arguments)}}function Jl(e,t){return t=+t,function(){Hs(this,e).delay=t}}function eu(e,t){return function(){Ws(this,e).duration=+t.apply(this,arguments)}}function tu(e,t){return t=+t,function(){Ws(this,e).duration=t}}function nu(e,t){if("function"!=typeof t)throw new Error;return function(){Ws(this,e).ease=t}}function ru(e,t,n){var r,i,o=function(e){return(e+"").trim().split(/^|\s+/).every((function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e}))}(t)?Hs:Ws;return function(){var a=o(this,e),s=a.on;s!==r&&(i=(r=s).copy()).on(t,n),a.on=i}}var iu=hs.prototype.constructor;function ou(e){return function(){this.style.removeProperty(e)}}function au(e,t,n){return function(r){this.style.setProperty(e,t.call(this,r),n)}}function su(e,t,n){var r,i;function o(){var o=t.apply(this,arguments);return o!==i&&(r=(i=o)&&au(e,o,n)),r}return o._value=t,o}function lu(e){return function(t){this.textContent=e.call(this,t)}}function uu(e){var t,n;function r(){var r=e.apply(this,arguments);return r!==n&&(t=(n=r)&&lu(r)),t}return r._value=e,r}var cu=0;function du(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function fu(){return++cu}var hu=hs.prototype;du.prototype=function(e){return hs().transition(e)}.prototype={constructor:du,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=ea(e));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,l,u=r[a],c=u.length,d=o[a]=new Array(c),f=0;f<c;++f)(s=u[f])&&(l=e.call(s,s.__data__,f,u))&&("__data__"in s&&(l.__data__=s.__data__),d[f]=l,Bs(d[f],t,n,f,d,Us(s,n)));return new du(o,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=ra(e));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var l,u=r[s],c=u.length,d=0;d<c;++d)if(l=u[d]){for(var f,h=e.call(l,l.__data__,d,u),p=Us(l,n),g=0,m=h.length;g<m;++g)(f=h[g])&&Bs(f,t,n,g,h,p);o.push(h),a.push(l)}return new du(o,a,t,n)},selectChild:hu.selectChild,selectChildren:hu.selectChildren,filter:function(e){"function"!=typeof e&&(e=ia(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o,a=t[i],s=a.length,l=r[i]=[],u=0;u<s;++u)(o=a[u])&&e.call(o,o.__data__,u,a)&&l.push(o);return new du(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,u=t[s],c=n[s],d=u.length,f=a[s]=new Array(d),h=0;h<d;++h)(l=u[h]||c[h])&&(f[h]=l);for(;s<r;++s)a[s]=t[s];return new du(a,this._parents,this._name,this._id)},selection:function(){return new iu(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=fu(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,u=0;u<l;++u)if(a=s[u]){var c=Us(a,t);Bs(a,e,n,u,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new du(r,this._parents,e,n)},call:hu.call,nodes:hu.nodes,node:hu.node,size:hu.size,empty:hu.empty,each:hu.each,on:function(e,t){var n=this._id;return arguments.length<2?Us(this.node(),n).on.on(e):this.each(ru(n,e,t))},attr:function(e,t){var n=xa(e),r="transform"===n?Zs:Bl;return this.attrTween(e,"function"==typeof t?(n.local?Xl:Yl)(n,r,tl(this,"attr."+e,t)):null==t?(n.local?Wl:Hl)(n):(n.local?$l:Ul)(n,r,t))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var r=xa(e);return this.tween(n,(r.local?Kl:Gl)(r,t))},style:function(e,t,n){var r="transform"==(e+="")?Gs:Bl;return null==t?this.styleTween(e,function(e,t){var n,r,i;return function(){var o=Da(this,e),a=(this.style.removeProperty(e),Da(this,e));return o===a?null:o===n&&a===r?i:i=t(n=o,r=a)}}(e,r)).on("end.style."+e,ou(e)):"function"==typeof t?this.styleTween(e,function(e,t,n){var r,i,o;return function(){var a=Da(this,e),s=n(this),l=s+"";return null==s&&(this.style.removeProperty(e),l=s=Da(this,e)),a===l?null:a===r&&l===i?o:(i=l,o=t(r=a,s))}}(e,r,tl(this,"style."+e,t))).each(function(e,t){var n,r,i,o,a="style."+t,s="end."+a;return function(){var l=Ws(this,e),u=l.on,c=null==l.value[a]?o||(o=ou(t)):void 0;u===n&&i===c||(r=(n=u).copy()).on(s,i=c),l.on=r}}(this._id,e)):this.styleTween(e,function(e,t,n){var r,i,o=n+"";return function(){var a=Da(this,e);return a===o?null:a===r?i:i=t(r=a,n)}}(e,r,t),n).on("end.style."+e,null)},styleTween:function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,su(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(tl(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},textTween:function(e){var t="text";if(arguments.length<1)return(t=this.tween(t))&&t._value;if(null==e)return this.tween(t,null);if("function"!=typeof e)throw new Error;return this.tween(t,uu(e))},remove:function(){return this.on("end.remove",function(e){return function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}}(this._id))},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r,i=Us(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===e)return r.value;return null}return this.each((null==t?Js:el)(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?Zl:Jl)(t,e)):Us(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?eu:tu)(t,e)):Us(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(nu(t,e)):Us(this.node(),t).ease},easeVarying:function(e){if("function"!=typeof e)throw new Error;return this.each(function(e,t){return function(){var n=t.apply(this,arguments);if("function"!=typeof n)throw new Error;Ws(this,e).ease=n}}(this._id,e))},end:function(){var e,t,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},l={value:function(){0==--i&&o()}};n.each((function(){var n=Ws(this,r),i=n.on;i!==e&&((t=(e=i).copy())._.cancel.push(s),t._.interrupt.push(s),t._.end.push(l)),n.on=t})),0===i&&o()}))},[Symbol.iterator]:hu[Symbol.iterator]};var pu={time:null,delay:0,duration:250,ease:function(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}};function gu(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))throw new Error(`transition ${t} not found`);return n}hs.prototype.interrupt=function(e){return this.each((function(){!function(e,t){var n,r,i,o=e.__transition,a=!0;if(o){for(i in t=null==t?null:t+"",o)(n=o[i]).name===t?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",e,e.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete e.__transition}}(this,e)}))},hs.prototype.transition=function(e){var t,n;e instanceof du?(t=e._id,e=e._name):(t=fu(),(n=pu).time=Ds(),e=null==e?null:e+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,u=0;u<l;++u)(a=s[u])&&Bs(a,e,t,u,s,n||gu(a,t));return new du(r,this._parents,e,t)};const{abs:mu,max:bu,min:vu}=Math;function yu(e){return{type:e}}["w","e"].map(yu),["n","s"].map(yu),["n","w","e","s","nw","ne","sw","se"].map(yu);var xu={},_u={};function wu(e){return new Function("d","return {"+e.map((function(e,t){return JSON.stringify(e)+": d["+t+'] || ""'})).join(",")+"}")}function ku(e){var t=Object.create(null),n=[];return e.forEach((function(e){for(var r in e)r in t||n.push(t[r]=r)})),n}function Su(e,t){var n=e+"",r=n.length;return r<t?new Array(t-r+1).join(0)+n:n}function Mu(e){var t=new RegExp('["'+e+"\n\r]"),n=e.charCodeAt(0);function r(e,t){var r,i=[],o=e.length,a=0,s=0,l=o<=0,u=!1;function c(){if(l)return _u;if(u)return u=!1,xu;var t,r,i=a;if(34===e.charCodeAt(i)){for(;a++<o&&34!==e.charCodeAt(a)||34===e.charCodeAt(++a););return(t=a)>=o?l=!0:10===(r=e.charCodeAt(a++))?u=!0:13===r&&(u=!0,10===e.charCodeAt(a)&&++a),e.slice(i+1,t-1).replace(/""/g,'"')}for(;a<o;){if(10===(r=e.charCodeAt(t=a++)))u=!0;else if(13===r)u=!0,10===e.charCodeAt(a)&&++a;else if(r!==n)continue;return e.slice(i,t)}return l=!0,e.slice(i,o)}for(10===e.charCodeAt(o-1)&&--o,13===e.charCodeAt(o-1)&&--o;(r=c())!==_u;){for(var d=[];r!==xu&&r!==_u;)d.push(r),r=c();t&&null==(d=t(d,s++))||i.push(d)}return i}function i(t,n){return t.map((function(t){return n.map((function(e){return a(t[e])})).join(e)}))}function o(t){return t.map(a).join(e)}function a(e){return null==e?"":e instanceof Date?(i=(n=e).getUTCHours(),o=n.getUTCMinutes(),a=n.getUTCSeconds(),s=n.getUTCMilliseconds(),isNaN(n)?"Invalid Date":((r=n.getUTCFullYear())<0?"-"+Su(-r,6):r>9999?"+"+Su(r,6):Su(r,4))+"-"+Su(n.getUTCMonth()+1,2)+"-"+Su(n.getUTCDate(),2)+(s?"T"+Su(i,2)+":"+Su(o,2)+":"+Su(a,2)+"."+Su(s,3)+"Z":a?"T"+Su(i,2)+":"+Su(o,2)+":"+Su(a,2)+"Z":o||i?"T"+Su(i,2)+":"+Su(o,2)+"Z":"")):t.test(e+="")?'"'+e.replace(/"/g,'""')+'"':e;var n,r,i,o,a,s}return{parse:function(e,t){var n,i,o=r(e,(function(e,r){if(n)return n(e,r-1);i=e,n=t?function(e,t){var n=wu(e);return function(r,i){return t(n(r),i,e)}}(e,t):wu(e)}));return o.columns=i||[],o},parseRows:r,format:function(t,n){return null==n&&(n=ku(t)),[n.map(a).join(e)].concat(i(t,n)).join("\n")},formatBody:function(e,t){return null==t&&(t=ku(e)),i(e,t).join("\n")},formatRows:function(e){return e.map(o).join("\n")},formatRow:o,formatValue:a}}var Eu=Mu(","),Cu=Eu.parse,Ou=(Eu.parseRows,Eu.format,Eu.formatBody,Eu.formatRows,Eu.formatRow,Eu.formatValue,Mu("\t")),Pu=Ou.parse;function Tu(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.text()}function Du(e,t){return fetch(e,t).then(Tu)}function Au(e){return function(t,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),Du(t,n).then((function(t){return e(t,r)}))}}Ou.parseRows,Ou.format,Ou.formatBody,Ou.formatRows,Ou.formatRow,Ou.formatValue;var Lu=Au(Cu);function Ru(e,t,n){this.k=e,this.x=t,this.y=n}function Iu(e){return Iu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Iu(e)}function Nu(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function zu(e,t){return zu=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},zu(e,t)}function Fu(e,t){if(t&&("object"===Iu(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Vu(e)}function Vu(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ju(e){return ju=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},ju(e)}Au(Pu),Ru.prototype={constructor:Ru,scale:function(e){return 1===e?this:new Ru(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new Ru(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new Ru(1,0,0),Ru.prototype;const Bu=function(t){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&zu(e,t)}(s,t);var n,r,i,o,a=(i=s,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=ju(i);if(o){var n=ju(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Fu(this,e)});function s(t){var n,r,i,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),r=Vu(n=a.call(this,t)),i="chartRef",o=e.createRef(),i in r?Object.defineProperty(r,i,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[i]=o,n}return n=s,(r=[{key:"componentDidMount",value:function(){var e=this.chartRef.current.getContext("2d"),t=String(this.props.datacol),n=String(this.props.suptitle);Lu(this.props.filename).then((function(r){var i=r.map((function(e){return e.countries})),o=r.map((function(e){return+e[t]}));new Zo(e,{type:"bar",options:{plugins:{title:{display:!0,text:n,padding:{top:10,bottom:30}}},responsive:!0,maintainAspectRatio:!0,showScale:!1,legend:{display:!0},scales:{x:{title:{display:!0,text:"Countries",align:"center",padding:10}},y:{title:{display:!0,text:"production in t (FAO)",align:"center"}}},transitions:{show:{animations:{x:{from:0},y:{from:0}}},hide:{animations:{x:{to:0},y:{to:0}}}}},data:{labels:i,datasets:[{label:"Hide/Unhide chart",data:o,backgroundColor:["rgba(255, 99, 132)","rgba(255, 159, 64)","rgba(255, 205, 86)","rgba(75, 192, 192)","rgba(54, 162, 235)","rgba(153, 102, 255)","rgba(201, 203, 207)","rgba(60, 80, 202)","rgba(230, 50, 100)","rgba(245, 50, 50)"]}]}})})).catch((function(e){throw console.log("ERROR: Missing data"),e}))}},{key:"render",value:function(){return e.createElement("div",null,e.createElement("canvas",{width:this.props.width,height:this.props.height,ref:this.chartRef}))}}])&&Nu(n.prototype,r),s}(e.Component);const Hu=i.p+"images/bg_img.jpeg",Wu=i.p+"csv_files/maize_top_10_2020.csv",Uu=i.p+"csv_files/rice_top_10_2020.csv",$u=i.p+"csv_files/wheat_top_10_2020.csv",Yu=i.p+"csv_files/maize_top_10_2050_pred.csv",Xu=i.p+"csv_files/rice_top_10_2050_pred.csv",qu=i.p+"csv_files/wheat_top_10_2050_pred.csv",Qu=i.p+"csv_files/maize_top_10_2080_pred.csv",Ku=i.p+"csv_files/rice_top_10_2080_pred.csv",Gu=i.p+"csv_files/wheat_top_10_2080_pred.csv";function Zu(){return Zu=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Zu.apply(this,arguments)}var Ju=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),ec=Math.abs,tc=String.fromCharCode,nc=Object.assign;function rc(e){return e.trim()}function ic(e,t,n){return e.replace(t,n)}function oc(e,t){return e.indexOf(t)}function ac(e,t){return 0|e.charCodeAt(t)}function sc(e,t,n){return e.slice(t,n)}function lc(e){return e.length}function uc(e){return e.length}function cc(e,t){return t.push(e),e}var dc=1,fc=1,hc=0,pc=0,gc=0,mc="";function bc(e,t,n,r,i,o,a){return{value:e,root:t,parent:n,type:r,props:i,children:o,line:dc,column:fc,length:a,return:""}}function vc(e,t){return nc(bc("",null,null,"",null,null,0),e,{length:-e.length},t)}function yc(){return gc=pc>0?ac(mc,--pc):0,fc--,10===gc&&(fc=1,dc--),gc}function xc(){return gc=pc<hc?ac(mc,pc++):0,fc++,10===gc&&(fc=1,dc++),gc}function _c(){return ac(mc,pc)}function wc(){return pc}function kc(e,t){return sc(mc,e,t)}function Sc(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function Mc(e){return dc=fc=1,hc=lc(mc=e),pc=0,[]}function Ec(e){return mc="",e}function Cc(e){return rc(kc(pc-1,Tc(91===e?e+2:40===e?e+1:e)))}function Oc(e){for(;(gc=_c())&&gc<33;)xc();return Sc(e)>2||Sc(gc)>3?"":" "}function Pc(e,t){for(;--t&&xc()&&!(gc<48||gc>102||gc>57&&gc<65||gc>70&&gc<97););return kc(e,wc()+(t<6&&32==_c()&&32==xc()))}function Tc(e){for(;xc();)switch(gc){case e:return pc;case 34:case 39:34!==e&&39!==e&&Tc(gc);break;case 40:41===e&&Tc(e);break;case 92:xc()}return pc}function Dc(e,t){for(;xc()&&e+gc!==57&&(e+gc!==84||47!==_c()););return"/*"+kc(t,pc-1)+"*"+tc(47===e?e:xc())}function Ac(e){for(;!Sc(_c());)xc();return kc(e,pc)}var Lc="-ms-",Rc="-moz-",Ic="-webkit-",Nc="comm",zc="rule",Fc="decl",Vc="@keyframes";function jc(e,t){for(var n="",r=uc(e),i=0;i<r;i++)n+=t(e[i],i,e,t)||"";return n}function Bc(e,t,n,r){switch(e.type){case"@import":case Fc:return e.return=e.return||e.value;case Nc:return"";case Vc:return e.return=e.value+"{"+jc(e.children,r)+"}";case zc:e.value=e.props.join(",")}return lc(n=jc(e.children,r))?e.return=e.value+"{"+n+"}":""}function Hc(e,t){switch(function(e,t){return(((t<<2^ac(e,0))<<2^ac(e,1))<<2^ac(e,2))<<2^ac(e,3)}(e,t)){case 5103:return Ic+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return Ic+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return Ic+e+Rc+e+Lc+e+e;case 6828:case 4268:return Ic+e+Lc+e+e;case 6165:return Ic+e+Lc+"flex-"+e+e;case 5187:return Ic+e+ic(e,/(\w+).+(:[^]+)/,"-webkit-box-$1$2-ms-flex-$1$2")+e;case 5443:return Ic+e+Lc+"flex-item-"+ic(e,/flex-|-self/,"")+e;case 4675:return Ic+e+Lc+"flex-line-pack"+ic(e,/align-content|flex-|-self/,"")+e;case 5548:return Ic+e+Lc+ic(e,"shrink","negative")+e;case 5292:return Ic+e+Lc+ic(e,"basis","preferred-size")+e;case 6060:return Ic+"box-"+ic(e,"-grow","")+Ic+e+Lc+ic(e,"grow","positive")+e;case 4554:return Ic+ic(e,/([^-])(transform)/g,"$1-webkit-$2")+e;case 6187:return ic(ic(ic(e,/(zoom-|grab)/,Ic+"$1"),/(image-set)/,Ic+"$1"),e,"")+e;case 5495:case 3959:return ic(e,/(image-set\([^]*)/,Ic+"$1$`$1");case 4968:return ic(ic(e,/(.+:)(flex-)?(.*)/,"-webkit-box-pack:$3-ms-flex-pack:$3"),/s.+-b[^;]+/,"justify")+Ic+e+e;case 4095:case 3583:case 4068:case 2532:return ic(e,/(.+)-inline(.+)/,Ic+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(lc(e)-1-t>6)switch(ac(e,t+1)){case 109:if(45!==ac(e,t+4))break;case 102:return ic(e,/(.+:)(.+)-([^]+)/,"$1-webkit-$2-$3$1"+Rc+(108==ac(e,t+3)?"$3":"$2-$3"))+e;case 115:return~oc(e,"stretch")?Hc(ic(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==ac(e,t+1))break;case 6444:switch(ac(e,lc(e)-3-(~oc(e,"!important")&&10))){case 107:return ic(e,":",":"+Ic)+e;case 101:return ic(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+Ic+(45===ac(e,14)?"inline-":"")+"box$3$1"+Ic+"$2$3$1"+Lc+"$2box$3")+e}break;case 5936:switch(ac(e,t+11)){case 114:return Ic+e+Lc+ic(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return Ic+e+Lc+ic(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return Ic+e+Lc+ic(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return Ic+e+Lc+e+e}return e}function Wc(e){return function(t){t.root||(t=t.return)&&e(t)}}function Uc(e){return Ec($c("",null,null,null,[""],e=Mc(e),0,[0],e))}function $c(e,t,n,r,i,o,a,s,l){for(var u=0,c=0,d=a,f=0,h=0,p=0,g=1,m=1,b=1,v=0,y="",x=i,_=o,w=r,k=y;m;)switch(p=v,v=xc()){case 40:if(108!=p&&58==k.charCodeAt(d-1)){-1!=oc(k+=ic(Cc(v),"&","&\f"),"&\f")&&(b=-1);break}case 34:case 39:case 91:k+=Cc(v);break;case 9:case 10:case 13:case 32:k+=Oc(p);break;case 92:k+=Pc(wc()-1,7);continue;case 47:switch(_c()){case 42:case 47:cc(Xc(Dc(xc(),wc()),t,n),l);break;default:k+="/"}break;case 123*g:s[u++]=lc(k)*b;case 125*g:case 59:case 0:switch(v){case 0:case 125:m=0;case 59+c:h>0&&lc(k)-d&&cc(h>32?qc(k+";",r,n,d-1):qc(ic(k," ","")+";",r,n,d-2),l);break;case 59:k+=";";default:if(cc(w=Yc(k,t,n,u,c,i,s,y,x=[],_=[],d),o),123===v)if(0===c)$c(k,t,w,w,x,o,d,s,_);else switch(f){case 100:case 109:case 115:$c(e,w,w,r&&cc(Yc(e,w,w,0,0,i,s,y,i,x=[],d),_),i,_,d,s,r?x:_);break;default:$c(k,w,w,w,[""],_,0,s,_)}}u=c=h=0,g=b=1,y=k="",d=a;break;case 58:d=1+lc(k),h=p;default:if(g<1)if(123==v)--g;else if(125==v&&0==g++&&125==yc())continue;switch(k+=tc(v),v*g){case 38:b=c>0?1:(k+="\f",-1);break;case 44:s[u++]=(lc(k)-1)*b,b=1;break;case 64:45===_c()&&(k+=Cc(xc())),f=_c(),c=d=lc(y=k+=Ac(wc())),v++;break;case 45:45===p&&2==lc(k)&&(g=0)}}return o}function Yc(e,t,n,r,i,o,a,s,l,u,c){for(var d=i-1,f=0===i?o:[""],h=uc(f),p=0,g=0,m=0;p<r;++p)for(var b=0,v=sc(e,d+1,d=ec(g=a[p])),y=e;b<h;++b)(y=rc(g>0?f[b]+" "+v:ic(v,/&\f/g,f[b])))&&(l[m++]=y);return bc(e,t,n,0===i?zc:s,l,u,c)}function Xc(e,t,n){return bc(e,t,n,Nc,tc(gc),sc(e,2,-2),0)}function qc(e,t,n,r){return bc(e,t,n,Fc,sc(e,0,r),sc(e,r+1,-1),r)}var Qc=function(e,t,n){for(var r=0,i=0;r=i,i=_c(),38===r&&12===i&&(t[n]=1),!Sc(i);)xc();return kc(e,pc)},Kc=new WeakMap,Gc=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||Kc.get(n))&&!r){Kc.set(e,!0);for(var i=[],o=function(e,t){return Ec(function(e,t){var n=-1,r=44;do{switch(Sc(r)){case 0:38===r&&12===_c()&&(t[n]=1),e[n]+=Qc(pc-1,t,n);break;case 2:e[n]+=Cc(r);break;case 4:if(44===r){e[++n]=58===_c()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=tc(r)}}while(r=xc());return e}(Mc(e),t))}(t,i),a=n.props,s=0,l=0;s<o.length;s++)for(var u=0;u<a.length;u++,l++)e.props[l]=i[s]?o[s].replace(/&\f/g,a[u]):a[u]+" "+o[s]}}},Zc=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}},Jc=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case Fc:e.return=Hc(e.value,e.length);break;case Vc:return jc([vc(e,{value:ic(e.value,"@","@"+Ic)})],r);case zc:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return jc([vc(e,{props:[ic(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return jc([vc(e,{props:[ic(t,/:(plac\w+)/,":-webkit-input-$1")]}),vc(e,{props:[ic(t,/:(plac\w+)/,":-moz-$1")]}),vc(e,{props:[ic(t,/:(plac\w+)/,Lc+"input-$1")]})],r)}return""}))}}];const ed=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,i,o=e.stylisPlugins||Jc,a={},s=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)a[t[n]]=!0;s.push(e)}));var l,u,c,d=[Gc,Zc],f=[Bc,Wc((function(e){l.insert(e)}))],h=(u=d.concat(o,f),c=uc(u),function(e,t,n,r){for(var i="",o=0;o<c;o++)i+=u[o](e,t,n,r)||"";return i});i=function(e,t,n,r){l=n,jc(Uc(e?e+"{"+t.styles+"}":t.styles),h),r&&(p.inserted[t.name]=!0)};var p={key:t,sheet:new Ju({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:a,registered:{},insert:i};return p.sheet.hydrate(s),p};function td(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}var nd=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},rd=function(e,t,n){nd(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var i=t;do{e.insert(t===i?"."+r:"",i,e.sheet,!0),i=i.next}while(void 0!==i)}};const id=function(e){for(var t,n=0,r=0,i=e.length;i>=4;++r,i-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(i){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},od={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var ad=/[A-Z]|^ms/g,sd=/_EMO_([^_]+?)_([^]*?)_EMO_/g,ld=function(e){return 45===e.charCodeAt(1)},ud=function(e){return null!=e&&"boolean"!=typeof e},cd=function(e){var t=Object.create(null);return function(e){return void 0===t[e]&&(t[e]=ld(n=e)?n:n.replace(ad,"-$&").toLowerCase()),t[e];var n}}(),dd=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(sd,(function(e,t,n){return hd={name:t,styles:n,next:hd},t}))}return 1===od[e]||ld(e)||"number"!=typeof t||0===t?t:t+"px"};function fd(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return hd={name:n.name,styles:n.styles,next:hd},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)hd={name:r.name,styles:r.styles,next:hd},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var i=0;i<n.length;i++)r+=fd(e,t,n[i])+";";else for(var o in n){var a=n[o];if("object"!=typeof a)null!=t&&void 0!==t[a]?r+=o+"{"+t[a]+"}":ud(a)&&(r+=cd(o)+":"+dd(o,a)+";");else if(!Array.isArray(a)||"string"!=typeof a[0]||null!=t&&void 0!==t[a[0]]){var s=fd(e,t,a);switch(o){case"animation":case"animationName":r+=cd(o)+":"+s+";";break;default:r+=o+"{"+s+"}"}}else for(var l=0;l<a.length;l++)ud(a[l])&&(r+=cd(o)+":"+dd(o,a[l])+";")}return r}(e,t,n);case"function":if(void 0!==e){var i=hd,o=n(e);return hd=i,fd(e,t,o)}}if(null==t)return n;var a=t[n];return void 0!==a?a:n}var hd,pd=/label:\s*([^\s;\n{]+)\s*(;|$)/g,gd=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,i="";hd=void 0;var o=e[0];null==o||void 0===o.raw?(r=!1,i+=fd(n,t,o)):i+=o[0];for(var a=1;a<e.length;a++)i+=fd(n,t,e[a]),r&&(i+=o[a]);pd.lastIndex=0;for(var s,l="";null!==(s=pd.exec(i));)l+="-"+s[1];return{name:id(i)+l,styles:i,next:hd}},md={}.hasOwnProperty,bd=(0,e.createContext)("undefined"!=typeof HTMLElement?ed({key:"css"}):null),vd=(bd.Provider,function(t){return(0,e.forwardRef)((function(n,r){var i=(0,e.useContext)(bd);return t(n,i,r)}))}),yd=(0,e.createContext)({}),xd=t.useInsertionEffect?t.useInsertionEffect:function(e){e()};function _d(e){xd(e)}var wd="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",kd=function(e,t){var n={};for(var r in t)md.call(t,r)&&(n[r]=t[r]);return n[wd]=e,n},Sd=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return nd(t,n,r),_d((function(){return rd(t,n,r)})),null},Md=vd((function(t,n,r){var i=t.css;"string"==typeof i&&void 0!==n.registered[i]&&(i=n.registered[i]);var o=t[wd],a=[i],s="";"string"==typeof t.className?s=td(n.registered,a,t.className):null!=t.className&&(s=t.className+" ");var l=gd(a,void 0,(0,e.useContext)(yd));s+=n.key+"-"+l.name;var u={};for(var c in t)md.call(t,c)&&"css"!==c&&c!==wd&&(u[c]=t[c]);return u.ref=r,u.className=s,(0,e.createElement)(e.Fragment,null,(0,e.createElement)(Sd,{cache:n,serialized:l,isStringTag:"string"==typeof o}),(0,e.createElement)(o,u))}));i(679);var Ed=function(t,n){var r=arguments;if(null==n||!md.call(n,"css"))return e.createElement.apply(void 0,r);var i=r.length,o=new Array(i);o[0]=Md,o[1]=kd(t,n);for(var a=2;a<i;a++)o[a]=r[a];return e.createElement.apply(null,o)};function Cd(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return gd(t)}t.useInsertionEffect?t.useInsertionEffect:e.useLayoutEffect;var Od=function e(t){for(var n=t.length,r=0,i="";r<n;r++){var o=t[r];if(null!=o){var a=void 0;switch(typeof o){case"boolean":break;case"object":if(Array.isArray(o))a=e(o);else for(var s in a="",o)o[s]&&s&&(a&&(a+=" "),a+=s);break;default:a=o}a&&(i&&(i+=" "),i+=a)}}return i};function Pd(e,t,n){var r=[],i=td(e,r,n);return r.length<2?n:i+t(r)}var Td=function(e){var t=e.cache,n=e.serializedArr;return _d((function(){for(var e=0;e<n.length;e++)rd(t,n[e],!1)})),null},Dd=vd((function(t,n){var r=[],i=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var o=gd(t,n.registered);return r.push(o),nd(n,o,!1),n.key+"-"+o.name},o={css:i,cx:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return Pd(n.registered,i,Od(t))},theme:(0,e.useContext)(yd)},a=t.children(o);return(0,e.createElement)(e.Fragment,null,(0,e.createElement)(Td,{cache:n,serializedArr:r}),a)}));function Ad(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function Ld(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Rd(e,t){if(e){if("string"==typeof e)return Ld(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ld(e,t):void 0}}function Id(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);a=!0);}catch(e){s=!0,i=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw i}}return o}}(e,t)||Rd(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Nd(e){return Nd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Nd(e)}function zd(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Fd(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Vd(e,t,n){return t&&Fd(e.prototype,t),n&&Fd(e,n),e}function jd(e,t){return jd=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},jd(e,t)}function Bd(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&jd(e,t)}function Hd(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Wd(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ud(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function $d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ud(Object(n),!0).forEach((function(t){Wd(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ud(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Yd(e){return Yd=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},Yd(e)}function Xd(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function qd(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Yd(e);if(t){var i=Yd(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Xd(this,n)}}var Qd=["className","clearValue","cx","getStyles","getValue","hasValue","isMulti","isRtl","options","selectOption","selectProps","setValue","theme"],Kd=function(){};function Gd(e,t){return t?"-"===t[0]?e+t:e+"__"+t:e}function Zd(e,t,n){var r=[n];if(t&&e)for(var i in t)t.hasOwnProperty(i)&&t[i]&&r.push("".concat(Gd(e,i)));return r.filter((function(e){return e})).map((function(e){return String(e).trim()})).join(" ")}var Jd=function(e){return t=e,Array.isArray(t)?e.filter(Boolean):"object"===Nd(e)&&null!==e?[e]:[];var t},ef=function(e){return e.className,e.clearValue,e.cx,e.getStyles,e.getValue,e.hasValue,e.isMulti,e.isRtl,e.options,e.selectOption,e.selectProps,e.setValue,e.theme,$d({},Ad(e,Qd))};function tf(e){return[document.documentElement,document.body,window].indexOf(e)>-1}function nf(e){return tf(e)?window.pageYOffset:e.scrollTop}function rf(e,t){tf(e)?window.scrollTo(0,t):e.scrollTop=t}function of(e,t,n,r){return n*((e=e/r-1)*e*e+1)+t}function af(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:200,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Kd,i=nf(e),o=t-i,a=10,s=0;function l(){var t=of(s+=a,i,o,n);rf(e,t),s<n?window.requestAnimationFrame(l):r(e)}l()}function sf(){try{return document.createEvent("TouchEvent"),!0}catch(e){return!1}}var lf=!1,uf={get passive(){return lf=!0}},cf="undefined"!=typeof window?window:{};cf.addEventListener&&cf.removeEventListener&&(cf.addEventListener("p",Kd,uf),cf.removeEventListener("p",Kd,!1));var df=lf;function ff(e){return null!=e}function hf(e,t,n){return e?t:n}function pf(e){var t=e.maxHeight,n=e.menuEl,r=e.minHeight,i=e.placement,o=e.shouldScroll,a=e.isFixedPosition,s=e.theme.spacing,l=function(e){var t=getComputedStyle(e),n="absolute"===t.position,r=/(auto|scroll)/;if("fixed"===t.position)return document.documentElement;for(var i=e;i=i.parentElement;)if(t=getComputedStyle(i),(!n||"static"!==t.position)&&r.test(t.overflow+t.overflowY+t.overflowX))return i;return document.documentElement}(n),u={placement:"bottom",maxHeight:t};if(!n||!n.offsetParent)return u;var c,d=l.getBoundingClientRect().height,f=n.getBoundingClientRect(),h=f.bottom,p=f.height,g=f.top,m=n.offsetParent.getBoundingClientRect().top,b=a||tf(c=l)?window.innerHeight:c.clientHeight,v=nf(l),y=parseInt(getComputedStyle(n).marginBottom,10),x=parseInt(getComputedStyle(n).marginTop,10),_=m-x,w=b-g,k=_+v,S=d-v-g,M=h-b+v+y,E=v+g-x,C=160;switch(i){case"auto":case"bottom":if(w>=p)return{placement:"bottom",maxHeight:t};if(S>=p&&!a)return o&&af(l,M,C),{placement:"bottom",maxHeight:t};if(!a&&S>=r||a&&w>=r)return o&&af(l,M,C),{placement:"bottom",maxHeight:a?w-y:S-y};if("auto"===i||a){var O=t,P=a?_:k;return P>=r&&(O=Math.min(P-y-s.controlHeight,t)),{placement:"top",maxHeight:O}}if("bottom"===i)return o&&rf(l,M),{placement:"bottom",maxHeight:t};break;case"top":if(_>=p)return{placement:"top",maxHeight:t};if(k>=p&&!a)return o&&af(l,E,C),{placement:"top",maxHeight:t};if(!a&&k>=r||a&&_>=r){var T=t;return(!a&&k>=r||a&&_>=r)&&(T=a?_-x:k-x),o&&af(l,E,C),{placement:"top",maxHeight:T}}return{placement:"bottom",maxHeight:t};default:throw new Error('Invalid placement provided "'.concat(i,'".'))}return u}var gf=function(e){return"auto"===e?"bottom":e},mf=(0,e.createContext)({getPortalPlacement:null}),bf=function(e){Bd(n,e);var t=qd(n);function n(){var e;zd(this,n);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return(e=t.call.apply(t,[this].concat(i))).state={maxHeight:e.props.maxMenuHeight,placement:null},e.context=void 0,e.getPlacement=function(t){var n=e.props,r=n.minMenuHeight,i=n.maxMenuHeight,o=n.menuPlacement,a=n.menuPosition,s=n.menuShouldScrollIntoView,l=n.theme;if(t){var u="fixed"===a,c=pf({maxHeight:i,menuEl:t,minHeight:r,placement:o,shouldScroll:s&&!u,isFixedPosition:u,theme:l}),d=e.context.getPortalPlacement;d&&d(c),e.setState(c)}},e.getUpdatedProps=function(){var t=e.props.menuPlacement,n=e.state.placement||gf(t);return $d($d({},e.props),{},{placement:n,maxHeight:e.state.maxHeight})},e}return Vd(n,[{key:"render",value:function(){return(0,this.props.children)({ref:this.getPlacement,placerProps:this.getUpdatedProps()})}}]),n}(e.Component);bf.contextType=mf;var vf=function(e){var t=e.theme,n=t.spacing.baseUnit;return{color:t.colors.neutral40,padding:"".concat(2*n,"px ").concat(3*n,"px"),textAlign:"center"}},yf=vf,xf=vf,_f=function(e){var t=e.children,n=e.className,r=e.cx,i=e.getStyles,o=e.innerProps;return Ed("div",Zu({css:i("noOptionsMessage",e),className:r({"menu-notice":!0,"menu-notice--no-options":!0},n)},o),t)};_f.defaultProps={children:"No options"};var wf=function(e){var t=e.children,n=e.className,r=e.cx,i=e.getStyles,o=e.innerProps;return Ed("div",Zu({css:i("loadingMessage",e),className:r({"menu-notice":!0,"menu-notice--loading":!0},n)},o),t)};wf.defaultProps={children:"Loading..."};var kf,Sf,Mf,Ef=function(e){Bd(r,e);var t=qd(r);function r(){var e;zd(this,r);for(var n=arguments.length,i=new Array(n),o=0;o<n;o++)i[o]=arguments[o];return(e=t.call.apply(t,[this].concat(i))).state={placement:null},e.getPortalPlacement=function(t){var n=t.placement;n!==gf(e.props.menuPlacement)&&e.setState({placement:n})},e}return Vd(r,[{key:"render",value:function(){var e=this.props,t=e.appendTo,r=e.children,i=e.className,o=e.controlElement,a=e.cx,s=e.innerProps,l=e.menuPlacement,u=e.menuPosition,c=e.getStyles,d="fixed"===u;if(!t&&!d||!o)return null;var f=this.state.placement||gf(l),h=function(e){var t=e.getBoundingClientRect();return{bottom:t.bottom,height:t.height,left:t.left,right:t.right,top:t.top,width:t.width}}(o),p=d?0:window.pageYOffset,g=h[f]+p,m=Ed("div",Zu({css:c("menuPortal",{offset:g,position:u,rect:h}),className:a({"menu-portal":!0},i)},s),r);return Ed(mf.Provider,{value:{getPortalPlacement:this.getPortalPlacement}},t?(0,n.createPortal)(m,t):m)}}]),r}(e.Component),Cf=["size"],Of={name:"8mmkcg",styles:"display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0"},Pf=function(e){var t=e.size,n=Ad(e,Cf);return Ed("svg",Zu({height:t,width:t,viewBox:"0 0 20 20","aria-hidden":"true",focusable:"false",css:Of},n))},Tf=function(e){return Ed(Pf,Zu({size:20},e),Ed("path",{d:"M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z"}))},Df=function(e){return Ed(Pf,Zu({size:20},e),Ed("path",{d:"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"}))},Af=function(e){var t=e.isFocused,n=e.theme,r=n.spacing.baseUnit,i=n.colors;return{label:"indicatorContainer",color:t?i.neutral60:i.neutral20,display:"flex",padding:2*r,transition:"color 150ms",":hover":{color:t?i.neutral80:i.neutral40}}},Lf=Af,Rf=Af,If=function(){var e=Cd.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}(kf||(Sf=["\n  0%, 80%, 100% { opacity: 0; }\n  40% { opacity: 1; }\n"],Mf||(Mf=Sf.slice(0)),kf=Object.freeze(Object.defineProperties(Sf,{raw:{value:Object.freeze(Mf)}})))),Nf=function(e){var t=e.delay,n=e.offset;return Ed("span",{css:Cd({animation:"".concat(If," 1s ease-in-out ").concat(t,"ms infinite;"),backgroundColor:"currentColor",borderRadius:"1em",display:"inline-block",marginLeft:n?"1em":void 0,height:"1em",verticalAlign:"top",width:"1em"},"","")})},zf=function(e){var t=e.className,n=e.cx,r=e.getStyles,i=e.innerProps,o=e.isRtl;return Ed("div",Zu({css:r("loadingIndicator",e),className:n({indicator:!0,"loading-indicator":!0},t)},i),Ed(Nf,{delay:0,offset:o}),Ed(Nf,{delay:160,offset:!0}),Ed(Nf,{delay:320,offset:!o}))};zf.defaultProps={size:4};var Ff=["data"],Vf=["innerRef","isDisabled","isHidden","inputClassName"],jf={gridArea:"1 / 2",font:"inherit",minWidth:"2px",border:0,margin:0,outline:0,padding:0},Bf={flex:"1 1 auto",display:"inline-grid",gridArea:"1 / 1 / 2 / 3",gridTemplateColumns:"0 min-content","&:after":$d({content:'attr(data-value) " "',visibility:"hidden",whiteSpace:"pre"},jf)},Hf=function(e){return $d({label:"input",color:"inherit",background:0,opacity:e?0:1,width:"100%"},jf)},Wf=function(e){var t=e.children,n=e.innerProps;return Ed("div",n,t)},Uf={ClearIndicator:function(e){var t=e.children,n=e.className,r=e.cx,i=e.getStyles,o=e.innerProps;return Ed("div",Zu({css:i("clearIndicator",e),className:r({indicator:!0,"clear-indicator":!0},n)},o),t||Ed(Tf,null))},Control:function(e){var t=e.children,n=e.cx,r=e.getStyles,i=e.className,o=e.isDisabled,a=e.isFocused,s=e.innerRef,l=e.innerProps,u=e.menuIsOpen;return Ed("div",Zu({ref:s,css:r("control",e),className:n({control:!0,"control--is-disabled":o,"control--is-focused":a,"control--menu-is-open":u},i)},l),t)},DropdownIndicator:function(e){var t=e.children,n=e.className,r=e.cx,i=e.getStyles,o=e.innerProps;return Ed("div",Zu({css:i("dropdownIndicator",e),className:r({indicator:!0,"dropdown-indicator":!0},n)},o),t||Ed(Df,null))},DownChevron:Df,CrossIcon:Tf,Group:function(e){var t=e.children,n=e.className,r=e.cx,i=e.getStyles,o=e.Heading,a=e.headingProps,s=e.innerProps,l=e.label,u=e.theme,c=e.selectProps;return Ed("div",Zu({css:i("group",e),className:r({group:!0},n)},s),Ed(o,Zu({},a,{selectProps:c,theme:u,getStyles:i,cx:r}),l),Ed("div",null,t))},GroupHeading:function(e){var t=e.getStyles,n=e.cx,r=e.className,i=ef(e);i.data;var o=Ad(i,Ff);return Ed("div",Zu({css:t("groupHeading",e),className:n({"group-heading":!0},r)},o))},IndicatorsContainer:function(e){var t=e.children,n=e.className,r=e.cx,i=e.innerProps,o=e.getStyles;return Ed("div",Zu({css:o("indicatorsContainer",e),className:r({indicators:!0},n)},i),t)},IndicatorSeparator:function(e){var t=e.className,n=e.cx,r=e.getStyles,i=e.innerProps;return Ed("span",Zu({},i,{css:r("indicatorSeparator",e),className:n({"indicator-separator":!0},t)}))},Input:function(e){var t=e.className,n=e.cx,r=e.getStyles,i=e.value,o=ef(e),a=o.innerRef,s=o.isDisabled,l=o.isHidden,u=o.inputClassName,c=Ad(o,Vf);return Ed("div",{className:n({"input-container":!0},t),css:r("input",e),"data-value":i||""},Ed("input",Zu({className:n({input:!0},u),ref:a,style:Hf(l),disabled:s},c)))},LoadingIndicator:zf,Menu:function(e){var t=e.children,n=e.className,r=e.cx,i=e.getStyles,o=e.innerRef,a=e.innerProps;return Ed("div",Zu({css:i("menu",e),className:r({menu:!0},n),ref:o},a),t)},MenuList:function(e){var t=e.children,n=e.className,r=e.cx,i=e.getStyles,o=e.innerProps,a=e.innerRef,s=e.isMulti;return Ed("div",Zu({css:i("menuList",e),className:r({"menu-list":!0,"menu-list--is-multi":s},n),ref:a},o),t)},MenuPortal:Ef,LoadingMessage:wf,NoOptionsMessage:_f,MultiValue:function(e){var t=e.children,n=e.className,r=e.components,i=e.cx,o=e.data,a=e.getStyles,s=e.innerProps,l=e.isDisabled,u=e.removeProps,c=e.selectProps,d=r.Container,f=r.Label,h=r.Remove;return Ed(Dd,null,(function(r){var p=r.css,g=r.cx;return Ed(d,{data:o,innerProps:$d({className:g(p(a("multiValue",e)),i({"multi-value":!0,"multi-value--is-disabled":l},n))},s),selectProps:c},Ed(f,{data:o,innerProps:{className:g(p(a("multiValueLabel",e)),i({"multi-value__label":!0},n))},selectProps:c},t),Ed(h,{data:o,innerProps:$d({className:g(p(a("multiValueRemove",e)),i({"multi-value__remove":!0},n)),"aria-label":"Remove ".concat(t||"option")},u),selectProps:c}))}))},MultiValueContainer:Wf,MultiValueLabel:Wf,MultiValueRemove:function(e){var t=e.children,n=e.innerProps;return Ed("div",Zu({role:"button"},n),t||Ed(Tf,{size:14}))},Option:function(e){var t=e.children,n=e.className,r=e.cx,i=e.getStyles,o=e.isDisabled,a=e.isFocused,s=e.isSelected,l=e.innerRef,u=e.innerProps;return Ed("div",Zu({css:i("option",e),className:r({option:!0,"option--is-disabled":o,"option--is-focused":a,"option--is-selected":s},n),ref:l,"aria-disabled":o},u),t)},Placeholder:function(e){var t=e.children,n=e.className,r=e.cx,i=e.getStyles,o=e.innerProps;return Ed("div",Zu({css:i("placeholder",e),className:r({placeholder:!0},n)},o),t)},SelectContainer:function(e){var t=e.children,n=e.className,r=e.cx,i=e.getStyles,o=e.innerProps,a=e.isDisabled,s=e.isRtl;return Ed("div",Zu({css:i("container",e),className:r({"--is-disabled":a,"--is-rtl":s},n)},o),t)},SingleValue:function(e){var t=e.children,n=e.className,r=e.cx,i=e.getStyles,o=e.isDisabled,a=e.innerProps;return Ed("div",Zu({css:i("singleValue",e),className:r({"single-value":!0,"single-value--is-disabled":o},n)},a),t)},ValueContainer:function(e){var t=e.children,n=e.className,r=e.cx,i=e.innerProps,o=e.isMulti,a=e.getStyles,s=e.hasValue;return Ed("div",Zu({css:a("valueContainer",e),className:r({"value-container":!0,"value-container--is-multi":o,"value-container--has-value":s},n)},i),t)}},$f=["defaultInputValue","defaultMenuIsOpen","defaultValue","inputValue","menuIsOpen","onChange","onInputChange","onMenuClose","onMenuOpen","value"];function Yf(e){return function(e){if(Array.isArray(e))return Ld(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Rd(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var Xf=Number.isNaN||function(e){return"number"==typeof e&&e!=e};function qf(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(!((r=e[n])===(i=t[n])||Xf(r)&&Xf(i)))return!1;var r,i;return!0}for(var Qf={name:"7pg0cj-a11yText",styles:"label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap"},Kf=function(e){return Ed("span",Zu({css:Qf},e))},Gf={guidance:function(e){var t=e.isSearchable,n=e.isMulti,r=e.isDisabled,i=e.tabSelectsValue;switch(e.context){case"menu":return"Use Up and Down to choose options".concat(r?"":", press Enter to select the currently focused option",", press Escape to exit the menu").concat(i?", press Tab to select the option and exit the menu":"",".");case"input":return"".concat(e["aria-label"]||"Select"," is focused ").concat(t?",type to refine list":"",", press Down to open the menu, ").concat(n?" press left to focus selected values":"");case"value":return"Use left and right to toggle between focused values, press Backspace to remove the currently focused value";default:return""}},onChange:function(e){var t=e.action,n=e.label,r=void 0===n?"":n,i=e.labels,o=e.isDisabled;switch(t){case"deselect-option":case"pop-value":case"remove-value":return"option ".concat(r,", deselected.");case"clear":return"All selected options have been cleared.";case"initial-input-focus":return"option".concat(i.length>1?"s":""," ").concat(i.join(","),", selected.");case"select-option":return"option ".concat(r,o?" is disabled. Select another option.":", selected.");default:return""}},onFocus:function(e){var t=e.context,n=e.focused,r=e.options,i=e.label,o=void 0===i?"":i,a=e.selectValue,s=e.isDisabled,l=e.isSelected,u=function(e,t){return e&&e.length?"".concat(e.indexOf(t)+1," of ").concat(e.length):""};if("value"===t&&a)return"value ".concat(o," focused, ").concat(u(a,n),".");if("menu"===t){var c=s?" disabled":"",d="".concat(l?"selected":"focused").concat(c);return"option ".concat(o," ").concat(d,", ").concat(u(r,n),".")}return""},onFilter:function(e){var t=e.inputValue,n=e.resultsMessage;return"".concat(n).concat(t?" for search term "+t:"",".")}},Zf=function(t){var n=t.ariaSelection,r=t.focusedOption,i=t.focusedValue,o=t.focusableOptions,a=t.isFocused,s=t.selectValue,l=t.selectProps,u=t.id,c=l.ariaLiveMessages,d=l.getOptionLabel,f=l.inputValue,h=l.isMulti,p=l.isOptionDisabled,g=l.isSearchable,m=l.menuIsOpen,b=l.options,v=l.screenReaderStatus,y=l.tabSelectsValue,x=l["aria-label"],_=l["aria-live"],w=(0,e.useMemo)((function(){return $d($d({},Gf),c||{})}),[c]),k=(0,e.useMemo)((function(){var e,t="";if(n&&w.onChange){var r=n.option,i=n.options,o=n.removedValue,a=n.removedValues,l=n.value,u=o||r||(e=l,Array.isArray(e)?null:e),c=u?d(u):"",f=i||a||void 0,h=f?f.map(d):[],g=$d({isDisabled:u&&p(u,s),label:c,labels:h},n);t=w.onChange(g)}return t}),[n,w,p,s,d]),S=(0,e.useMemo)((function(){var e="",t=r||i,n=!!(r&&s&&s.includes(r));if(t&&w.onFocus){var o={focused:t,label:d(t),isDisabled:p(t,s),isSelected:n,options:b,context:t===r?"menu":"value",selectValue:s};e=w.onFocus(o)}return e}),[r,i,d,p,w,b,s]),M=(0,e.useMemo)((function(){var e="";if(m&&b.length&&w.onFilter){var t=v({count:o.length});e=w.onFilter({inputValue:f,resultsMessage:t})}return e}),[o,f,m,w,b,v]),E=(0,e.useMemo)((function(){var e="";if(w.guidance){var t=i?"value":m?"menu":"input";e=w.guidance({"aria-label":x,context:t,isDisabled:r&&p(r,s),isMulti:h,isSearchable:g,tabSelectsValue:y})}return e}),[x,r,i,h,p,g,m,w,s,y]),C="".concat(S," ").concat(M," ").concat(E),O=Ed(e.Fragment,null,Ed("span",{id:"aria-selection"},k),Ed("span",{id:"aria-context"},C)),P="initial-input-focus"===(null==n?void 0:n.action);return Ed(e.Fragment,null,Ed(Kf,{id:u},P&&O),Ed(Kf,{"aria-live":_,"aria-atomic":"false","aria-relevant":"additions text"},a&&!P&&O))},Jf=[{base:"A",letters:"AⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ"},{base:"AA",letters:"Ꜳ"},{base:"AE",letters:"ÆǼǢ"},{base:"AO",letters:"Ꜵ"},{base:"AU",letters:"Ꜷ"},{base:"AV",letters:"ꜸꜺ"},{base:"AY",letters:"Ꜽ"},{base:"B",letters:"BⒷＢḂḄḆɃƂƁ"},{base:"C",letters:"CⒸＣĆĈĊČÇḈƇȻꜾ"},{base:"D",letters:"DⒹＤḊĎḌḐḒḎĐƋƊƉꝹ"},{base:"DZ",letters:"ǱǄ"},{base:"Dz",letters:"ǲǅ"},{base:"E",letters:"EⒺＥÈÉÊỀẾỄỂẼĒḔḖĔĖËẺĚȄȆẸỆȨḜĘḘḚƐƎ"},{base:"F",letters:"FⒻＦḞƑꝻ"},{base:"G",letters:"GⒼＧǴĜḠĞĠǦĢǤƓꞠꝽꝾ"},{base:"H",letters:"HⒽＨĤḢḦȞḤḨḪĦⱧⱵꞍ"},{base:"I",letters:"IⒾＩÌÍÎĨĪĬİÏḮỈǏȈȊỊĮḬƗ"},{base:"J",letters:"JⒿＪĴɈ"},{base:"K",letters:"KⓀＫḰǨḲĶḴƘⱩꝀꝂꝄꞢ"},{base:"L",letters:"LⓁＬĿĹĽḶḸĻḼḺŁȽⱢⱠꝈꝆꞀ"},{base:"LJ",letters:"Ǉ"},{base:"Lj",letters:"ǈ"},{base:"M",letters:"MⓂＭḾṀṂⱮƜ"},{base:"N",letters:"NⓃＮǸŃÑṄŇṆŅṊṈȠƝꞐꞤ"},{base:"NJ",letters:"Ǌ"},{base:"Nj",letters:"ǋ"},{base:"O",letters:"OⓄＯÒÓÔỒỐỖỔÕṌȬṎŌṐṒŎȮȰÖȪỎŐǑȌȎƠỜỚỠỞỢỌỘǪǬØǾƆƟꝊꝌ"},{base:"OI",letters:"Ƣ"},{base:"OO",letters:"Ꝏ"},{base:"OU",letters:"Ȣ"},{base:"P",letters:"PⓅＰṔṖƤⱣꝐꝒꝔ"},{base:"Q",letters:"QⓆＱꝖꝘɊ"},{base:"R",letters:"RⓇＲŔṘŘȐȒṚṜŖṞɌⱤꝚꞦꞂ"},{base:"S",letters:"SⓈＳẞŚṤŜṠŠṦṢṨȘŞⱾꞨꞄ"},{base:"T",letters:"TⓉＴṪŤṬȚŢṰṮŦƬƮȾꞆ"},{base:"TZ",letters:"Ꜩ"},{base:"U",letters:"UⓊＵÙÚÛŨṸŪṺŬÜǛǗǕǙỦŮŰǓȔȖƯỪỨỮỬỰỤṲŲṶṴɄ"},{base:"V",letters:"VⓋＶṼṾƲꝞɅ"},{base:"VY",letters:"Ꝡ"},{base:"W",letters:"WⓌＷẀẂŴẆẄẈⱲ"},{base:"X",letters:"XⓍＸẊẌ"},{base:"Y",letters:"YⓎＹỲÝŶỸȲẎŸỶỴƳɎỾ"},{base:"Z",letters:"ZⓏＺŹẐŻŽẒẔƵȤⱿⱫꝢ"},{base:"a",letters:"aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐ"},{base:"aa",letters:"ꜳ"},{base:"ae",letters:"æǽǣ"},{base:"ao",letters:"ꜵ"},{base:"au",letters:"ꜷ"},{base:"av",letters:"ꜹꜻ"},{base:"ay",letters:"ꜽ"},{base:"b",letters:"bⓑｂḃḅḇƀƃɓ"},{base:"c",letters:"cⓒｃćĉċčçḉƈȼꜿↄ"},{base:"d",letters:"dⓓｄḋďḍḑḓḏđƌɖɗꝺ"},{base:"dz",letters:"ǳǆ"},{base:"e",letters:"eⓔｅèéêềếễểẽēḕḗĕėëẻěȅȇẹệȩḝęḙḛɇɛǝ"},{base:"f",letters:"fⓕｆḟƒꝼ"},{base:"g",letters:"gⓖｇǵĝḡğġǧģǥɠꞡᵹꝿ"},{base:"h",letters:"hⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ"},{base:"hv",letters:"ƕ"},{base:"i",letters:"iⓘｉìíîĩīĭïḯỉǐȉȋịįḭɨı"},{base:"j",letters:"jⓙｊĵǰɉ"},{base:"k",letters:"kⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ"},{base:"l",letters:"lⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇ"},{base:"lj",letters:"ǉ"},{base:"m",letters:"mⓜｍḿṁṃɱɯ"},{base:"n",letters:"nⓝｎǹńñṅňṇņṋṉƞɲŉꞑꞥ"},{base:"nj",letters:"ǌ"},{base:"o",letters:"oⓞｏòóôồốỗổõṍȭṏōṑṓŏȯȱöȫỏőǒȍȏơờớỡởợọộǫǭøǿɔꝋꝍɵ"},{base:"oi",letters:"ƣ"},{base:"ou",letters:"ȣ"},{base:"oo",letters:"ꝏ"},{base:"p",letters:"pⓟｐṕṗƥᵽꝑꝓꝕ"},{base:"q",letters:"qⓠｑɋꝗꝙ"},{base:"r",letters:"rⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ"},{base:"s",letters:"sⓢｓßśṥŝṡšṧṣṩșşȿꞩꞅẛ"},{base:"t",letters:"tⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ"},{base:"tz",letters:"ꜩ"},{base:"u",letters:"uⓤｕùúûũṹūṻŭüǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ"},{base:"v",letters:"vⓥｖṽṿʋꝟʌ"},{base:"vy",letters:"ꝡ"},{base:"w",letters:"wⓦｗẁẃŵẇẅẘẉⱳ"},{base:"x",letters:"xⓧｘẋẍ"},{base:"y",letters:"yⓨｙỳýŷỹȳẏÿỷẙỵƴɏỿ"},{base:"z",letters:"zⓩｚźẑżžẓẕƶȥɀⱬꝣ"}],eh=new RegExp("["+Jf.map((function(e){return e.letters})).join("")+"]","g"),th={},nh=0;nh<Jf.length;nh++)for(var rh=Jf[nh],ih=0;ih<rh.letters.length;ih++)th[rh.letters[ih]]=rh.base;var oh=function(e){return e.replace(eh,(function(e){return th[e]}))},ah=function(e,t){var n;void 0===t&&(t=qf);var r,i=[],o=!1;return function(){for(var a=[],s=0;s<arguments.length;s++)a[s]=arguments[s];return o&&n===this&&t(a,i)||(r=e.apply(this,a),o=!0,n=this,i=a),r}}(oh),sh=function(e){return e.replace(/^\s+|\s+$/g,"")},lh=function(e){return"".concat(e.label," ").concat(e.value)},uh=["innerRef"];function ch(e){var t=e.innerRef,n=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var i=Object.entries(e).filter((function(e){var t=Id(e,1)[0];return!n.includes(t)}));return i.reduce((function(e,t){var n=Id(t,2),r=n[0],i=n[1];return e[r]=i,e}),{})}(Ad(e,uh),"onExited","in","enter","exit","appear");return Ed("input",Zu({ref:t},n,{css:Cd({label:"dummyInput",background:0,border:0,caretColor:"transparent",fontSize:"inherit",gridArea:"1 / 1 / 2 / 3",outline:0,padding:0,width:1,color:"transparent",left:-100,opacity:0,position:"relative",transform:"scale(.01)"},"","")}))}var dh=["boxSizing","height","overflow","paddingRight","position"],fh={boxSizing:"border-box",overflow:"hidden",position:"relative",height:"100%"};function hh(e){e.preventDefault()}function ph(e){e.stopPropagation()}function gh(){var e=this.scrollTop,t=this.scrollHeight,n=e+this.offsetHeight;0===e?this.scrollTop=1:n===t&&(this.scrollTop=e-1)}function mh(){return"ontouchstart"in window||navigator.maxTouchPoints}var bh=!("undefined"==typeof window||!window.document||!window.document.createElement),vh=0,yh={capture:!1,passive:!1},xh=function(){return document.activeElement&&document.activeElement.blur()},_h={name:"1kfdb0e",styles:"position:fixed;left:0;bottom:0;right:0;top:0"};function wh(t){var n=t.children,r=t.lockEnabled,i=t.captureEnabled,o=function(t){var n=t.isEnabled,r=t.onBottomArrive,i=t.onBottomLeave,o=t.onTopArrive,a=t.onTopLeave,s=(0,e.useRef)(!1),l=(0,e.useRef)(!1),u=(0,e.useRef)(0),c=(0,e.useRef)(null),d=(0,e.useCallback)((function(e,t){if(null!==c.current){var n=c.current,u=n.scrollTop,d=n.scrollHeight,f=n.clientHeight,h=c.current,p=t>0,g=d-f-u,m=!1;g>t&&s.current&&(i&&i(e),s.current=!1),p&&l.current&&(a&&a(e),l.current=!1),p&&t>g?(r&&!s.current&&r(e),h.scrollTop=d,m=!0,s.current=!0):!p&&-t>u&&(o&&!l.current&&o(e),h.scrollTop=0,m=!0,l.current=!0),m&&function(e){e.preventDefault(),e.stopPropagation()}(e)}}),[r,i,o,a]),f=(0,e.useCallback)((function(e){d(e,e.deltaY)}),[d]),h=(0,e.useCallback)((function(e){u.current=e.changedTouches[0].clientY}),[]),p=(0,e.useCallback)((function(e){var t=u.current-e.changedTouches[0].clientY;d(e,t)}),[d]),g=(0,e.useCallback)((function(e){if(e){var t=!!df&&{passive:!1};e.addEventListener("wheel",f,t),e.addEventListener("touchstart",h,t),e.addEventListener("touchmove",p,t)}}),[p,h,f]),m=(0,e.useCallback)((function(e){e&&(e.removeEventListener("wheel",f,!1),e.removeEventListener("touchstart",h,!1),e.removeEventListener("touchmove",p,!1))}),[p,h,f]);return(0,e.useEffect)((function(){if(n){var e=c.current;return g(e),function(){m(e)}}}),[n,g,m]),function(e){c.current=e}}({isEnabled:void 0===i||i,onBottomArrive:t.onBottomArrive,onBottomLeave:t.onBottomLeave,onTopArrive:t.onTopArrive,onTopLeave:t.onTopLeave}),a=function(t){var n=t.isEnabled,r=t.accountForScrollbars,i=void 0===r||r,o=(0,e.useRef)({}),a=(0,e.useRef)(null),s=(0,e.useCallback)((function(e){if(bh){var t=document.body,n=t&&t.style;if(i&&dh.forEach((function(e){var t=n&&n[e];o.current[e]=t})),i&&vh<1){var r=parseInt(o.current.paddingRight,10)||0,a=document.body?document.body.clientWidth:0,s=window.innerWidth-a+r||0;Object.keys(fh).forEach((function(e){var t=fh[e];n&&(n[e]=t)})),n&&(n.paddingRight="".concat(s,"px"))}t&&mh()&&(t.addEventListener("touchmove",hh,yh),e&&(e.addEventListener("touchstart",gh,yh),e.addEventListener("touchmove",ph,yh))),vh+=1}}),[i]),l=(0,e.useCallback)((function(e){if(bh){var t=document.body,n=t&&t.style;vh=Math.max(vh-1,0),i&&vh<1&&dh.forEach((function(e){var t=o.current[e];n&&(n[e]=t)})),t&&mh()&&(t.removeEventListener("touchmove",hh,yh),e&&(e.removeEventListener("touchstart",gh,yh),e.removeEventListener("touchmove",ph,yh)))}}),[i]);return(0,e.useEffect)((function(){if(n){var e=a.current;return s(e),function(){l(e)}}}),[n,s,l]),function(e){a.current=e}}({isEnabled:r});return Ed(e.Fragment,null,r&&Ed("div",{onClick:xh,css:_h}),n((function(e){o(e),a(e)})))}var kh={clearIndicator:Rf,container:function(e){var t=e.isDisabled;return{label:"container",direction:e.isRtl?"rtl":void 0,pointerEvents:t?"none":void 0,position:"relative"}},control:function(e){var t=e.isDisabled,n=e.isFocused,r=e.theme,i=r.colors,o=r.borderRadius,a=r.spacing;return{label:"control",alignItems:"center",backgroundColor:t?i.neutral5:i.neutral0,borderColor:t?i.neutral10:n?i.primary:i.neutral20,borderRadius:o,borderStyle:"solid",borderWidth:1,boxShadow:n?"0 0 0 1px ".concat(i.primary):void 0,cursor:"default",display:"flex",flexWrap:"wrap",justifyContent:"space-between",minHeight:a.controlHeight,outline:"0 !important",position:"relative",transition:"all 100ms","&:hover":{borderColor:n?i.primary:i.neutral30}}},dropdownIndicator:Lf,group:function(e){var t=e.theme.spacing;return{paddingBottom:2*t.baseUnit,paddingTop:2*t.baseUnit}},groupHeading:function(e){var t=e.theme.spacing;return{label:"group",color:"#999",cursor:"default",display:"block",fontSize:"75%",fontWeight:500,marginBottom:"0.25em",paddingLeft:3*t.baseUnit,paddingRight:3*t.baseUnit,textTransform:"uppercase"}},indicatorsContainer:function(){return{alignItems:"center",alignSelf:"stretch",display:"flex",flexShrink:0}},indicatorSeparator:function(e){var t=e.isDisabled,n=e.theme,r=n.spacing.baseUnit,i=n.colors;return{label:"indicatorSeparator",alignSelf:"stretch",backgroundColor:t?i.neutral10:i.neutral20,marginBottom:2*r,marginTop:2*r,width:1}},input:function(e){var t=e.isDisabled,n=e.value,r=e.theme,i=r.spacing,o=r.colors;return $d({margin:i.baseUnit/2,paddingBottom:i.baseUnit/2,paddingTop:i.baseUnit/2,visibility:t?"hidden":"visible",color:o.neutral80,transform:n?"translateZ(0)":""},Bf)},loadingIndicator:function(e){var t=e.isFocused,n=e.size,r=e.theme,i=r.colors,o=r.spacing.baseUnit;return{label:"loadingIndicator",color:t?i.neutral60:i.neutral20,display:"flex",padding:2*o,transition:"color 150ms",alignSelf:"center",fontSize:n,lineHeight:1,marginRight:n,textAlign:"center",verticalAlign:"middle"}},loadingMessage:xf,menu:function(e){var t,n=e.placement,r=e.theme,i=r.borderRadius,o=r.spacing,a=r.colors;return Hd(t={label:"menu"},function(e){return e?{bottom:"top",top:"bottom"}[e]:"bottom"}(n),"100%"),Hd(t,"backgroundColor",a.neutral0),Hd(t,"borderRadius",i),Hd(t,"boxShadow","0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)"),Hd(t,"marginBottom",o.menuGutter),Hd(t,"marginTop",o.menuGutter),Hd(t,"position","absolute"),Hd(t,"width","100%"),Hd(t,"zIndex",1),t},menuList:function(e){var t=e.maxHeight,n=e.theme.spacing.baseUnit;return{maxHeight:t,overflowY:"auto",paddingBottom:n,paddingTop:n,position:"relative",WebkitOverflowScrolling:"touch"}},menuPortal:function(e){var t=e.rect,n=e.offset,r=e.position;return{left:t.left,position:r,top:n,width:t.width,zIndex:1}},multiValue:function(e){var t=e.theme,n=t.spacing,r=t.borderRadius;return{label:"multiValue",backgroundColor:t.colors.neutral10,borderRadius:r/2,display:"flex",margin:n.baseUnit/2,minWidth:0}},multiValueLabel:function(e){var t=e.theme,n=t.borderRadius,r=t.colors,i=e.cropWithEllipsis;return{borderRadius:n/2,color:r.neutral80,fontSize:"85%",overflow:"hidden",padding:3,paddingLeft:6,textOverflow:i||void 0===i?"ellipsis":void 0,whiteSpace:"nowrap"}},multiValueRemove:function(e){var t=e.theme,n=t.spacing,r=t.borderRadius,i=t.colors;return{alignItems:"center",borderRadius:r/2,backgroundColor:e.isFocused?i.dangerLight:void 0,display:"flex",paddingLeft:n.baseUnit,paddingRight:n.baseUnit,":hover":{backgroundColor:i.dangerLight,color:i.danger}}},noOptionsMessage:yf,option:function(e){var t=e.isDisabled,n=e.isFocused,r=e.isSelected,i=e.theme,o=i.spacing,a=i.colors;return{label:"option",backgroundColor:r?a.primary:n?a.primary25:"transparent",color:t?a.neutral20:r?a.neutral0:"inherit",cursor:"default",display:"block",fontSize:"inherit",padding:"".concat(2*o.baseUnit,"px ").concat(3*o.baseUnit,"px"),width:"100%",userSelect:"none",WebkitTapHighlightColor:"rgba(0, 0, 0, 0)",":active":{backgroundColor:t?void 0:r?a.primary:a.primary50}}},placeholder:function(e){var t=e.theme,n=t.spacing;return{label:"placeholder",color:t.colors.neutral50,gridArea:"1 / 1 / 2 / 3",marginLeft:n.baseUnit/2,marginRight:n.baseUnit/2}},singleValue:function(e){var t=e.isDisabled,n=e.theme,r=n.spacing,i=n.colors;return{label:"singleValue",color:t?i.neutral40:i.neutral80,gridArea:"1 / 1 / 2 / 3",marginLeft:r.baseUnit/2,marginRight:r.baseUnit/2,maxWidth:"100%",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}},valueContainer:function(e){var t=e.theme.spacing,n=e.isMulti,r=e.hasValue,i=e.selectProps.controlShouldRenderValue;return{alignItems:"center",display:n&&r&&i?"flex":"grid",flex:1,flexWrap:"wrap",padding:"".concat(t.baseUnit/2,"px ").concat(2*t.baseUnit,"px"),WebkitOverflowScrolling:"touch",position:"relative",overflow:"hidden"}}},Sh={borderRadius:4,colors:{primary:"#2684FF",primary75:"#4C9AFF",primary50:"#B2D4FF",primary25:"#DEEBFF",danger:"#DE350B",dangerLight:"#FFBDAD",neutral0:"hsl(0, 0%, 100%)",neutral5:"hsl(0, 0%, 95%)",neutral10:"hsl(0, 0%, 90%)",neutral20:"hsl(0, 0%, 80%)",neutral30:"hsl(0, 0%, 70%)",neutral40:"hsl(0, 0%, 60%)",neutral50:"hsl(0, 0%, 50%)",neutral60:"hsl(0, 0%, 40%)",neutral70:"hsl(0, 0%, 30%)",neutral80:"hsl(0, 0%, 20%)",neutral90:"hsl(0, 0%, 10%)"},spacing:{baseUnit:4,controlHeight:38,menuGutter:8}},Mh={"aria-live":"polite",backspaceRemovesValue:!0,blurInputOnSelect:sf(),captureMenuScroll:!sf(),closeMenuOnSelect:!0,closeMenuOnScroll:!1,components:{},controlShouldRenderValue:!0,escapeClearsValue:!1,filterOption:function(e,t){if(e.data.__isNew__)return!0;var n=$d({ignoreCase:!0,ignoreAccents:!0,stringify:lh,trim:!0,matchFrom:"any"},undefined),r=n.ignoreCase,i=n.ignoreAccents,o=n.stringify,a=n.trim,s=n.matchFrom,l=a?sh(t):t,u=a?sh(o(e)):o(e);return r&&(l=l.toLowerCase(),u=u.toLowerCase()),i&&(l=ah(l),u=oh(u)),"start"===s?u.substr(0,l.length)===l:u.indexOf(l)>-1},formatGroupLabel:function(e){return e.label},getOptionLabel:function(e){return e.label},getOptionValue:function(e){return e.value},isDisabled:!1,isLoading:!1,isMulti:!1,isRtl:!1,isSearchable:!0,isOptionDisabled:function(e){return!!e.isDisabled},loadingMessage:function(){return"Loading..."},maxMenuHeight:300,minMenuHeight:140,menuIsOpen:!1,menuPlacement:"bottom",menuPosition:"absolute",menuShouldBlockScroll:!1,menuShouldScrollIntoView:!function(){try{return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}catch(e){return!1}}(),noOptionsMessage:function(){return"No options"},openMenuOnFocus:!1,openMenuOnClick:!0,options:[],pageSize:5,placeholder:"Select...",screenReaderStatus:function(e){var t=e.count;return"".concat(t," result").concat(1!==t?"s":""," available")},styles:{},tabIndex:0,tabSelectsValue:!0};function Eh(e,t,n,r){return{type:"option",data:t,isDisabled:Ah(e,t,n),isSelected:Lh(e,t,n),label:Th(e,t),value:Dh(e,t),index:r}}function Ch(e,t){return e.options.map((function(n,r){if("options"in n){var i=n.options.map((function(n,r){return Eh(e,n,t,r)})).filter((function(t){return Ph(e,t)}));return i.length>0?{type:"group",data:n,options:i,index:r}:void 0}var o=Eh(e,n,t,r);return Ph(e,o)?o:void 0})).filter(ff)}function Oh(e){return e.reduce((function(e,t){return"group"===t.type?e.push.apply(e,Yf(t.options.map((function(e){return e.data})))):e.push(t.data),e}),[])}function Ph(e,t){var n=e.inputValue,r=void 0===n?"":n,i=t.data,o=t.isSelected,a=t.label,s=t.value;return(!Ih(e)||!o)&&Rh(e,{label:a,value:s,data:i},r)}var Th=function(e,t){return e.getOptionLabel(t)},Dh=function(e,t){return e.getOptionValue(t)};function Ah(e,t,n){return"function"==typeof e.isOptionDisabled&&e.isOptionDisabled(t,n)}function Lh(e,t,n){if(n.indexOf(t)>-1)return!0;if("function"==typeof e.isOptionSelected)return e.isOptionSelected(t,n);var r=Dh(e,t);return n.some((function(t){return Dh(e,t)===r}))}function Rh(e,t,n){return!e.filterOption||e.filterOption(t,n)}var Ih=function(e){var t=e.hideSelectedOptions,n=e.isMulti;return void 0===t?n:t},Nh=1,zh=function(t){Bd(r,t);var n=qd(r);function r(e){var t;return zd(this,r),(t=n.call(this,e)).state={ariaSelection:null,focusedOption:null,focusedValue:null,inputIsHidden:!1,isFocused:!1,selectValue:[],clearFocusValueOnUpdate:!1,prevWasFocused:!1,inputIsHiddenAfterUpdate:void 0,prevProps:void 0},t.blockOptionHover=!1,t.isComposing=!1,t.commonProps=void 0,t.initialTouchX=0,t.initialTouchY=0,t.instancePrefix="",t.openAfterFocus=!1,t.scrollToFocusedOptionOnUpdate=!1,t.userIsDragging=void 0,t.controlRef=null,t.getControlRef=function(e){t.controlRef=e},t.focusedOptionRef=null,t.getFocusedOptionRef=function(e){t.focusedOptionRef=e},t.menuListRef=null,t.getMenuListRef=function(e){t.menuListRef=e},t.inputRef=null,t.getInputRef=function(e){t.inputRef=e},t.focus=t.focusInput,t.blur=t.blurInput,t.onChange=function(e,n){var r=t.props,i=r.onChange,o=r.name;n.name=o,t.ariaOnChange(e,n),i(e,n)},t.setValue=function(e,n,r){var i=t.props,o=i.closeMenuOnSelect,a=i.isMulti,s=i.inputValue;t.onInputChange("",{action:"set-value",prevInputValue:s}),o&&(t.setState({inputIsHiddenAfterUpdate:!a}),t.onMenuClose()),t.setState({clearFocusValueOnUpdate:!0}),t.onChange(e,{action:n,option:r})},t.selectOption=function(e){var n=t.props,r=n.blurInputOnSelect,i=n.isMulti,o=n.name,a=t.state.selectValue,s=i&&t.isOptionSelected(e,a),l=t.isOptionDisabled(e,a);if(s){var u=t.getOptionValue(e);t.setValue(a.filter((function(e){return t.getOptionValue(e)!==u})),"deselect-option",e)}else{if(l)return void t.ariaOnChange(e,{action:"select-option",option:e,name:o});i?t.setValue([].concat(Yf(a),[e]),"select-option",e):t.setValue(e,"select-option")}r&&t.blurInput()},t.removeValue=function(e){var n=t.props.isMulti,r=t.state.selectValue,i=t.getOptionValue(e),o=r.filter((function(e){return t.getOptionValue(e)!==i})),a=hf(n,o,o[0]||null);t.onChange(a,{action:"remove-value",removedValue:e}),t.focusInput()},t.clearValue=function(){var e=t.state.selectValue;t.onChange(hf(t.props.isMulti,[],null),{action:"clear",removedValues:e})},t.popValue=function(){var e=t.props.isMulti,n=t.state.selectValue,r=n[n.length-1],i=n.slice(0,n.length-1),o=hf(e,i,i[0]||null);t.onChange(o,{action:"pop-value",removedValue:r})},t.getValue=function(){return t.state.selectValue},t.cx=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return Zd.apply(void 0,[t.props.classNamePrefix].concat(n))},t.getOptionLabel=function(e){return Th(t.props,e)},t.getOptionValue=function(e){return Dh(t.props,e)},t.getStyles=function(e,n){var r=kh[e](n);r.boxSizing="border-box";var i=t.props.styles[e];return i?i(r,n):r},t.getElementId=function(e){return"".concat(t.instancePrefix,"-").concat(e)},t.getComponents=function(){return e=t.props,$d($d({},Uf),e.components);var e},t.buildCategorizedOptions=function(){return Ch(t.props,t.state.selectValue)},t.getCategorizedOptions=function(){return t.props.menuIsOpen?t.buildCategorizedOptions():[]},t.buildFocusableOptions=function(){return Oh(t.buildCategorizedOptions())},t.getFocusableOptions=function(){return t.props.menuIsOpen?t.buildFocusableOptions():[]},t.ariaOnChange=function(e,n){t.setState({ariaSelection:$d({value:e},n)})},t.onMenuMouseDown=function(e){0===e.button&&(e.stopPropagation(),e.preventDefault(),t.focusInput())},t.onMenuMouseMove=function(e){t.blockOptionHover=!1},t.onControlMouseDown=function(e){if(!e.defaultPrevented){var n=t.props.openMenuOnClick;t.state.isFocused?t.props.menuIsOpen?"INPUT"!==e.target.tagName&&"TEXTAREA"!==e.target.tagName&&t.onMenuClose():n&&t.openMenu("first"):(n&&(t.openAfterFocus=!0),t.focusInput()),"INPUT"!==e.target.tagName&&"TEXTAREA"!==e.target.tagName&&e.preventDefault()}},t.onDropdownIndicatorMouseDown=function(e){if(!(e&&"mousedown"===e.type&&0!==e.button||t.props.isDisabled)){var n=t.props,r=n.isMulti,i=n.menuIsOpen;t.focusInput(),i?(t.setState({inputIsHiddenAfterUpdate:!r}),t.onMenuClose()):t.openMenu("first"),e.preventDefault()}},t.onClearIndicatorMouseDown=function(e){e&&"mousedown"===e.type&&0!==e.button||(t.clearValue(),e.preventDefault(),t.openAfterFocus=!1,"touchend"===e.type?t.focusInput():setTimeout((function(){return t.focusInput()})))},t.onScroll=function(e){"boolean"==typeof t.props.closeMenuOnScroll?e.target instanceof HTMLElement&&tf(e.target)&&t.props.onMenuClose():"function"==typeof t.props.closeMenuOnScroll&&t.props.closeMenuOnScroll(e)&&t.props.onMenuClose()},t.onCompositionStart=function(){t.isComposing=!0},t.onCompositionEnd=function(){t.isComposing=!1},t.onTouchStart=function(e){var n=e.touches,r=n&&n.item(0);r&&(t.initialTouchX=r.clientX,t.initialTouchY=r.clientY,t.userIsDragging=!1)},t.onTouchMove=function(e){var n=e.touches,r=n&&n.item(0);if(r){var i=Math.abs(r.clientX-t.initialTouchX),o=Math.abs(r.clientY-t.initialTouchY);t.userIsDragging=i>5||o>5}},t.onTouchEnd=function(e){t.userIsDragging||(t.controlRef&&!t.controlRef.contains(e.target)&&t.menuListRef&&!t.menuListRef.contains(e.target)&&t.blurInput(),t.initialTouchX=0,t.initialTouchY=0)},t.onControlTouchEnd=function(e){t.userIsDragging||t.onControlMouseDown(e)},t.onClearIndicatorTouchEnd=function(e){t.userIsDragging||t.onClearIndicatorMouseDown(e)},t.onDropdownIndicatorTouchEnd=function(e){t.userIsDragging||t.onDropdownIndicatorMouseDown(e)},t.handleInputChange=function(e){var n=t.props.inputValue,r=e.currentTarget.value;t.setState({inputIsHiddenAfterUpdate:!1}),t.onInputChange(r,{action:"input-change",prevInputValue:n}),t.props.menuIsOpen||t.onMenuOpen()},t.onInputFocus=function(e){t.props.onFocus&&t.props.onFocus(e),t.setState({inputIsHiddenAfterUpdate:!1,isFocused:!0}),(t.openAfterFocus||t.props.openMenuOnFocus)&&t.openMenu("first"),t.openAfterFocus=!1},t.onInputBlur=function(e){var n=t.props.inputValue;t.menuListRef&&t.menuListRef.contains(document.activeElement)?t.inputRef.focus():(t.props.onBlur&&t.props.onBlur(e),t.onInputChange("",{action:"input-blur",prevInputValue:n}),t.onMenuClose(),t.setState({focusedValue:null,isFocused:!1}))},t.onOptionHover=function(e){t.blockOptionHover||t.state.focusedOption===e||t.setState({focusedOption:e})},t.shouldHideSelectedOptions=function(){return Ih(t.props)},t.onKeyDown=function(e){var n=t.props,r=n.isMulti,i=n.backspaceRemovesValue,o=n.escapeClearsValue,a=n.inputValue,s=n.isClearable,l=n.isDisabled,u=n.menuIsOpen,c=n.onKeyDown,d=n.tabSelectsValue,f=n.openMenuOnFocus,h=t.state,p=h.focusedOption,g=h.focusedValue,m=h.selectValue;if(!(l||"function"==typeof c&&(c(e),e.defaultPrevented))){switch(t.blockOptionHover=!0,e.key){case"ArrowLeft":if(!r||a)return;t.focusValue("previous");break;case"ArrowRight":if(!r||a)return;t.focusValue("next");break;case"Delete":case"Backspace":if(a)return;if(g)t.removeValue(g);else{if(!i)return;r?t.popValue():s&&t.clearValue()}break;case"Tab":if(t.isComposing)return;if(e.shiftKey||!u||!d||!p||f&&t.isOptionSelected(p,m))return;t.selectOption(p);break;case"Enter":if(229===e.keyCode)break;if(u){if(!p)return;if(t.isComposing)return;t.selectOption(p);break}return;case"Escape":u?(t.setState({inputIsHiddenAfterUpdate:!1}),t.onInputChange("",{action:"menu-close",prevInputValue:a}),t.onMenuClose()):s&&o&&t.clearValue();break;case" ":if(a)return;if(!u){t.openMenu("first");break}if(!p)return;t.selectOption(p);break;case"ArrowUp":u?t.focusOption("up"):t.openMenu("last");break;case"ArrowDown":u?t.focusOption("down"):t.openMenu("first");break;case"PageUp":if(!u)return;t.focusOption("pageup");break;case"PageDown":if(!u)return;t.focusOption("pagedown");break;case"Home":if(!u)return;t.focusOption("first");break;case"End":if(!u)return;t.focusOption("last");break;default:return}e.preventDefault()}},t.instancePrefix="react-select-"+(t.props.instanceId||++Nh),t.state.selectValue=Jd(e.value),t}return Vd(r,[{key:"componentDidMount",value:function(){this.startListeningComposition(),this.startListeningToTouch(),this.props.closeMenuOnScroll&&document&&document.addEventListener&&document.addEventListener("scroll",this.onScroll,!0),this.props.autoFocus&&this.focusInput()}},{key:"componentDidUpdate",value:function(e){var t,n,r,i,o,a=this.props,s=a.isDisabled,l=a.menuIsOpen,u=this.state.isFocused;(u&&!s&&e.isDisabled||u&&l&&!e.menuIsOpen)&&this.focusInput(),u&&s&&!e.isDisabled&&this.setState({isFocused:!1},this.onMenuClose),this.menuListRef&&this.focusedOptionRef&&this.scrollToFocusedOptionOnUpdate&&(t=this.menuListRef,n=this.focusedOptionRef,r=t.getBoundingClientRect(),i=n.getBoundingClientRect(),o=n.offsetHeight/3,i.bottom+o>r.bottom?rf(t,Math.min(n.offsetTop+n.clientHeight-t.offsetHeight+o,t.scrollHeight)):i.top-o<r.top&&rf(t,Math.max(n.offsetTop-o,0)),this.scrollToFocusedOptionOnUpdate=!1)}},{key:"componentWillUnmount",value:function(){this.stopListeningComposition(),this.stopListeningToTouch(),document.removeEventListener("scroll",this.onScroll,!0)}},{key:"onMenuOpen",value:function(){this.props.onMenuOpen()}},{key:"onMenuClose",value:function(){this.onInputChange("",{action:"menu-close",prevInputValue:this.props.inputValue}),this.props.onMenuClose()}},{key:"onInputChange",value:function(e,t){this.props.onInputChange(e,t)}},{key:"focusInput",value:function(){this.inputRef&&this.inputRef.focus()}},{key:"blurInput",value:function(){this.inputRef&&this.inputRef.blur()}},{key:"openMenu",value:function(e){var t=this,n=this.state,r=n.selectValue,i=n.isFocused,o=this.buildFocusableOptions(),a="first"===e?0:o.length-1;if(!this.props.isMulti){var s=o.indexOf(r[0]);s>-1&&(a=s)}this.scrollToFocusedOptionOnUpdate=!(i&&this.menuListRef),this.setState({inputIsHiddenAfterUpdate:!1,focusedValue:null,focusedOption:o[a]},(function(){return t.onMenuOpen()}))}},{key:"focusValue",value:function(e){var t=this.state,n=t.selectValue,r=t.focusedValue;if(this.props.isMulti){this.setState({focusedOption:null});var i=n.indexOf(r);r||(i=-1);var o=n.length-1,a=-1;if(n.length){switch(e){case"previous":a=0===i?0:-1===i?o:i-1;break;case"next":i>-1&&i<o&&(a=i+1)}this.setState({inputIsHidden:-1!==a,focusedValue:n[a]})}}}},{key:"focusOption",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"first",t=this.props.pageSize,n=this.state.focusedOption,r=this.getFocusableOptions();if(r.length){var i=0,o=r.indexOf(n);n||(o=-1),"up"===e?i=o>0?o-1:r.length-1:"down"===e?i=(o+1)%r.length:"pageup"===e?(i=o-t)<0&&(i=0):"pagedown"===e?(i=o+t)>r.length-1&&(i=r.length-1):"last"===e&&(i=r.length-1),this.scrollToFocusedOptionOnUpdate=!0,this.setState({focusedOption:r[i],focusedValue:null})}}},{key:"getTheme",value:function(){return this.props.theme?"function"==typeof this.props.theme?this.props.theme(Sh):$d($d({},Sh),this.props.theme):Sh}},{key:"getCommonProps",value:function(){var e=this.clearValue,t=this.cx,n=this.getStyles,r=this.getValue,i=this.selectOption,o=this.setValue,a=this.props,s=a.isMulti,l=a.isRtl,u=a.options;return{clearValue:e,cx:t,getStyles:n,getValue:r,hasValue:this.hasValue(),isMulti:s,isRtl:l,options:u,selectOption:i,selectProps:a,setValue:o,theme:this.getTheme()}}},{key:"hasValue",value:function(){return this.state.selectValue.length>0}},{key:"hasOptions",value:function(){return!!this.getFocusableOptions().length}},{key:"isClearable",value:function(){var e=this.props,t=e.isClearable,n=e.isMulti;return void 0===t?n:t}},{key:"isOptionDisabled",value:function(e,t){return Ah(this.props,e,t)}},{key:"isOptionSelected",value:function(e,t){return Lh(this.props,e,t)}},{key:"filterOption",value:function(e,t){return Rh(this.props,e,t)}},{key:"formatOptionLabel",value:function(e,t){if("function"==typeof this.props.formatOptionLabel){var n=this.props.inputValue,r=this.state.selectValue;return this.props.formatOptionLabel(e,{context:t,inputValue:n,selectValue:r})}return this.getOptionLabel(e)}},{key:"formatGroupLabel",value:function(e){return this.props.formatGroupLabel(e)}},{key:"startListeningComposition",value:function(){document&&document.addEventListener&&(document.addEventListener("compositionstart",this.onCompositionStart,!1),document.addEventListener("compositionend",this.onCompositionEnd,!1))}},{key:"stopListeningComposition",value:function(){document&&document.removeEventListener&&(document.removeEventListener("compositionstart",this.onCompositionStart),document.removeEventListener("compositionend",this.onCompositionEnd))}},{key:"startListeningToTouch",value:function(){document&&document.addEventListener&&(document.addEventListener("touchstart",this.onTouchStart,!1),document.addEventListener("touchmove",this.onTouchMove,!1),document.addEventListener("touchend",this.onTouchEnd,!1))}},{key:"stopListeningToTouch",value:function(){document&&document.removeEventListener&&(document.removeEventListener("touchstart",this.onTouchStart),document.removeEventListener("touchmove",this.onTouchMove),document.removeEventListener("touchend",this.onTouchEnd))}},{key:"renderInput",value:function(){var t=this.props,n=t.isDisabled,r=t.isSearchable,i=t.inputId,o=t.inputValue,a=t.tabIndex,s=t.form,l=t.menuIsOpen,u=this.getComponents().Input,c=this.state,d=c.inputIsHidden,f=c.ariaSelection,h=this.commonProps,p=i||this.getElementId("input"),g=$d($d($d({"aria-autocomplete":"list","aria-expanded":l,"aria-haspopup":!0,"aria-errormessage":this.props["aria-errormessage"],"aria-invalid":this.props["aria-invalid"],"aria-label":this.props["aria-label"],"aria-labelledby":this.props["aria-labelledby"],role:"combobox"},l&&{"aria-controls":this.getElementId("listbox"),"aria-owns":this.getElementId("listbox")}),!r&&{"aria-readonly":!0}),this.hasValue()?"initial-input-focus"===(null==f?void 0:f.action)&&{"aria-describedby":this.getElementId("live-region")}:{"aria-describedby":this.getElementId("placeholder")});return r?e.createElement(u,Zu({},h,{autoCapitalize:"none",autoComplete:"off",autoCorrect:"off",id:p,innerRef:this.getInputRef,isDisabled:n,isHidden:d,onBlur:this.onInputBlur,onChange:this.handleInputChange,onFocus:this.onInputFocus,spellCheck:"false",tabIndex:a,form:s,type:"text",value:o},g)):e.createElement(ch,Zu({id:p,innerRef:this.getInputRef,onBlur:this.onInputBlur,onChange:Kd,onFocus:this.onInputFocus,disabled:n,tabIndex:a,inputMode:"none",form:s,value:""},g))}},{key:"renderPlaceholderOrValue",value:function(){var t=this,n=this.getComponents(),r=n.MultiValue,i=n.MultiValueContainer,o=n.MultiValueLabel,a=n.MultiValueRemove,s=n.SingleValue,l=n.Placeholder,u=this.commonProps,c=this.props,d=c.controlShouldRenderValue,f=c.isDisabled,h=c.isMulti,p=c.inputValue,g=c.placeholder,m=this.state,b=m.selectValue,v=m.focusedValue,y=m.isFocused;if(!this.hasValue()||!d)return p?null:e.createElement(l,Zu({},u,{key:"placeholder",isDisabled:f,isFocused:y,innerProps:{id:this.getElementId("placeholder")}}),g);if(h)return b.map((function(n,s){var l=n===v,c="".concat(t.getOptionLabel(n),"-").concat(t.getOptionValue(n));return e.createElement(r,Zu({},u,{components:{Container:i,Label:o,Remove:a},isFocused:l,isDisabled:f,key:c,index:s,removeProps:{onClick:function(){return t.removeValue(n)},onTouchEnd:function(){return t.removeValue(n)},onMouseDown:function(e){e.preventDefault()}},data:n}),t.formatOptionLabel(n,"value"))}));if(p)return null;var x=b[0];return e.createElement(s,Zu({},u,{data:x,isDisabled:f}),this.formatOptionLabel(x,"value"))}},{key:"renderClearIndicator",value:function(){var t=this.getComponents().ClearIndicator,n=this.commonProps,r=this.props,i=r.isDisabled,o=r.isLoading,a=this.state.isFocused;if(!this.isClearable()||!t||i||!this.hasValue()||o)return null;var s={onMouseDown:this.onClearIndicatorMouseDown,onTouchEnd:this.onClearIndicatorTouchEnd,"aria-hidden":"true"};return e.createElement(t,Zu({},n,{innerProps:s,isFocused:a}))}},{key:"renderLoadingIndicator",value:function(){var t=this.getComponents().LoadingIndicator,n=this.commonProps,r=this.props,i=r.isDisabled,o=r.isLoading,a=this.state.isFocused;return t&&o?e.createElement(t,Zu({},n,{innerProps:{"aria-hidden":"true"},isDisabled:i,isFocused:a})):null}},{key:"renderIndicatorSeparator",value:function(){var t=this.getComponents(),n=t.DropdownIndicator,r=t.IndicatorSeparator;if(!n||!r)return null;var i=this.commonProps,o=this.props.isDisabled,a=this.state.isFocused;return e.createElement(r,Zu({},i,{isDisabled:o,isFocused:a}))}},{key:"renderDropdownIndicator",value:function(){var t=this.getComponents().DropdownIndicator;if(!t)return null;var n=this.commonProps,r=this.props.isDisabled,i=this.state.isFocused,o={onMouseDown:this.onDropdownIndicatorMouseDown,onTouchEnd:this.onDropdownIndicatorTouchEnd,"aria-hidden":"true"};return e.createElement(t,Zu({},n,{innerProps:o,isDisabled:r,isFocused:i}))}},{key:"renderMenu",value:function(){var t=this,n=this.getComponents(),r=n.Group,i=n.GroupHeading,o=n.Menu,a=n.MenuList,s=n.MenuPortal,l=n.LoadingMessage,u=n.NoOptionsMessage,c=n.Option,d=this.commonProps,f=this.state.focusedOption,h=this.props,p=h.captureMenuScroll,g=h.inputValue,m=h.isLoading,b=h.loadingMessage,v=h.minMenuHeight,y=h.maxMenuHeight,x=h.menuIsOpen,_=h.menuPlacement,w=h.menuPosition,k=h.menuPortalTarget,S=h.menuShouldBlockScroll,M=h.menuShouldScrollIntoView,E=h.noOptionsMessage,C=h.onMenuScrollToTop,O=h.onMenuScrollToBottom;if(!x)return null;var P,T=function(n,r){var i=n.type,o=n.data,a=n.isDisabled,s=n.isSelected,l=n.label,u=n.value,h=f===o,p=a?void 0:function(){return t.onOptionHover(o)},g=a?void 0:function(){return t.selectOption(o)},m="".concat(t.getElementId("option"),"-").concat(r),b={id:m,onClick:g,onMouseMove:p,onMouseOver:p,tabIndex:-1};return e.createElement(c,Zu({},d,{innerProps:b,data:o,isDisabled:a,isSelected:s,key:m,label:l,type:i,value:u,isFocused:h,innerRef:h?t.getFocusedOptionRef:void 0}),t.formatOptionLabel(n.data,"menu"))};if(this.hasOptions())P=this.getCategorizedOptions().map((function(n){if("group"===n.type){var o=n.data,a=n.options,s=n.index,l="".concat(t.getElementId("group"),"-").concat(s),u="".concat(l,"-heading");return e.createElement(r,Zu({},d,{key:l,data:o,options:a,Heading:i,headingProps:{id:u,data:n.data},label:t.formatGroupLabel(n.data)}),n.options.map((function(e){return T(e,"".concat(s,"-").concat(e.index))})))}if("option"===n.type)return T(n,"".concat(n.index))}));else if(m){var D=b({inputValue:g});if(null===D)return null;P=e.createElement(l,d,D)}else{var A=E({inputValue:g});if(null===A)return null;P=e.createElement(u,d,A)}var L={minMenuHeight:v,maxMenuHeight:y,menuPlacement:_,menuPosition:w,menuShouldScrollIntoView:M},R=e.createElement(bf,Zu({},d,L),(function(n){var r=n.ref,i=n.placerProps,s=i.placement,l=i.maxHeight;return e.createElement(o,Zu({},d,L,{innerRef:r,innerProps:{onMouseDown:t.onMenuMouseDown,onMouseMove:t.onMenuMouseMove,id:t.getElementId("listbox")},isLoading:m,placement:s}),e.createElement(wh,{captureEnabled:p,onTopArrive:C,onBottomArrive:O,lockEnabled:S},(function(n){return e.createElement(a,Zu({},d,{innerRef:function(e){t.getMenuListRef(e),n(e)},isLoading:m,maxHeight:l,focusedOption:f}),P)})))}));return k||"fixed"===w?e.createElement(s,Zu({},d,{appendTo:k,controlElement:this.controlRef,menuPlacement:_,menuPosition:w}),R):R}},{key:"renderFormField",value:function(){var t=this,n=this.props,r=n.delimiter,i=n.isDisabled,o=n.isMulti,a=n.name,s=this.state.selectValue;if(a&&!i){if(o){if(r){var l=s.map((function(e){return t.getOptionValue(e)})).join(r);return e.createElement("input",{name:a,type:"hidden",value:l})}var u=s.length>0?s.map((function(n,r){return e.createElement("input",{key:"i-".concat(r),name:a,type:"hidden",value:t.getOptionValue(n)})})):e.createElement("input",{name:a,type:"hidden"});return e.createElement("div",null,u)}var c=s[0]?this.getOptionValue(s[0]):"";return e.createElement("input",{name:a,type:"hidden",value:c})}}},{key:"renderLiveRegion",value:function(){var t=this.commonProps,n=this.state,r=n.ariaSelection,i=n.focusedOption,o=n.focusedValue,a=n.isFocused,s=n.selectValue,l=this.getFocusableOptions();return e.createElement(Zf,Zu({},t,{id:this.getElementId("live-region"),ariaSelection:r,focusedOption:i,focusedValue:o,isFocused:a,selectValue:s,focusableOptions:l}))}},{key:"render",value:function(){var t=this.getComponents(),n=t.Control,r=t.IndicatorsContainer,i=t.SelectContainer,o=t.ValueContainer,a=this.props,s=a.className,l=a.id,u=a.isDisabled,c=a.menuIsOpen,d=this.state.isFocused,f=this.commonProps=this.getCommonProps();return e.createElement(i,Zu({},f,{className:s,innerProps:{id:l,onKeyDown:this.onKeyDown},isDisabled:u,isFocused:d}),this.renderLiveRegion(),e.createElement(n,Zu({},f,{innerRef:this.getControlRef,innerProps:{onMouseDown:this.onControlMouseDown,onTouchEnd:this.onControlTouchEnd},isDisabled:u,isFocused:d,menuIsOpen:c}),e.createElement(o,Zu({},f,{isDisabled:u}),this.renderPlaceholderOrValue(),this.renderInput()),e.createElement(r,Zu({},f,{isDisabled:u}),this.renderClearIndicator(),this.renderLoadingIndicator(),this.renderIndicatorSeparator(),this.renderDropdownIndicator())),this.renderMenu(),this.renderFormField())}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=t.prevProps,r=t.clearFocusValueOnUpdate,i=t.inputIsHiddenAfterUpdate,o=t.ariaSelection,a=t.isFocused,s=t.prevWasFocused,l=e.options,u=e.value,c=e.menuIsOpen,d=e.inputValue,f=e.isMulti,h=Jd(u),p={};if(n&&(u!==n.value||l!==n.options||c!==n.menuIsOpen||d!==n.inputValue)){var g=c?function(e,t){return Oh(Ch(e,t))}(e,h):[],m=r?function(e,t){var n=e.focusedValue,r=e.selectValue.indexOf(n);if(r>-1){if(t.indexOf(n)>-1)return n;if(r<t.length)return t[r]}return null}(t,h):null,b=function(e,t){var n=e.focusedOption;return n&&t.indexOf(n)>-1?n:t[0]}(t,g);p={selectValue:h,focusedOption:b,focusedValue:m,clearFocusValueOnUpdate:!1}}var v=null!=i&&e!==n?{inputIsHidden:i,inputIsHiddenAfterUpdate:void 0}:{},y=o,x=a&&s;return a&&!x&&(y={value:hf(f,h,h[0]||null),options:h,action:"initial-input-focus"},x=!s),"initial-input-focus"===(null==o?void 0:o.action)&&(y=null),$d($d($d({},p),v),{},{prevProps:e,ariaSelection:y,prevWasFocused:x})}}]),r}(e.Component);zh.defaultProps=Mh;var Fh=(0,e.forwardRef)((function(t,n){var r=function(t){var n=t.defaultInputValue,r=void 0===n?"":n,i=t.defaultMenuIsOpen,o=void 0!==i&&i,a=t.defaultValue,s=void 0===a?null:a,l=t.inputValue,u=t.menuIsOpen,c=t.onChange,d=t.onInputChange,f=t.onMenuClose,h=t.onMenuOpen,p=t.value,g=Ad(t,$f),m=Id((0,e.useState)(void 0!==l?l:r),2),b=m[0],v=m[1],y=Id((0,e.useState)(void 0!==u?u:o),2),x=y[0],_=y[1],w=Id((0,e.useState)(void 0!==p?p:s),2),k=w[0],S=w[1],M=(0,e.useCallback)((function(e,t){"function"==typeof c&&c(e,t),S(e)}),[c]),E=(0,e.useCallback)((function(e,t){var n;"function"==typeof d&&(n=d(e,t)),v(void 0!==n?n:e)}),[d]),C=(0,e.useCallback)((function(){"function"==typeof h&&h(),_(!0)}),[h]),O=(0,e.useCallback)((function(){"function"==typeof f&&f(),_(!1)}),[f]),P=void 0!==l?l:b,T=void 0!==u?u:x,D=void 0!==p?p:k;return $d($d({},g),{},{inputValue:P,menuIsOpen:T,onChange:M,onInputChange:E,onMenuClose:O,onMenuOpen:C,value:D})}(t);return e.createElement(zh,Zu({ref:n},r))}));e.Component;const Vh=Fh;function jh(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);a=!0);}catch(e){s=!0,i=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw i}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Bh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Bh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Hh=function(){var t=(0,e.useRef)(null),n=(0,e.useRef)(null),r=1300,i=650,o=jh((0,e.useState)(""),2),a=o[0],s=o[1],l=jh((0,e.useState)(""),2),u=l[0],c=l[1],d=jh((0,e.useState)(""),2),f=d[0],h=d[1];return(0,e.useEffect)((function(){}),[a,u]),e.createElement(e.Fragment,null,e.createElement("div",{style:{backgroundImage:"url(".concat(Hu,")"),backgroundPosition:"center",backgroundSize:"cover",backgroundRepeat:"no-repeat",width:"100vw",height:"100vh"}},e.createElement("center",null,e.createElement("br",null),e.createElement("br",null),e.createElement("br",null),e.createElement("br",null),e.createElement("h1",null,"IMPACT OF CLIMATE CHANGE ON FOOD PRODUCTION")),e.createElement("button",{style:{position:"absolute",top:650,left:750,borderRadius:10,height:50},onClick:function(){return window.scrollTo({top:t.current.offsetTop,behavior:"smooth"})}},"View Analysis")),e.createElement("div",{ref:t},e.createElement(e.Fragment,null,e.createElement(Bu,{filename:Wu,datacol:"MZ_2020",suptitle:"Top 10 countries of maize production in 2020",width:r,height:i}),e.createElement(Bu,{filename:Uu,datacol:"RI_2020",suptitle:"Top 10 countries of rice production in 2020",width:r,height:i}),e.createElement(Bu,{filename:$u,datacol:"WH_2020",suptitle:"Top 10 countries of wheat production in 2020",width:r,height:i}))),e.createElement("div",null,e.createElement("center",null,e.createElement("h1",{onClick:function(){window.location.reload()}},"Predictions")),e.createElement(Vh,{style:{position:"absolute",width:"30px"},options:[{value:"Wheat",label:"Wheat"},{value:"Rice",label:"Rice"},{value:"Maize",label:"Maize"}],onChange:function(e){s(e.value)},placeholder:"Select Crop"}),e.createElement("br",null),e.createElement(Vh,{style:{width:"30px"},options:[{value:"2050",label:"2050"},{value:"2080",label:"2080"}],onChange:function(e){c(e.value)},placeholder:"Select Year"}),e.createElement("br",null),e.createElement("center",null,e.createElement("button",{onClick:function(){window.scrollTo({top:n.current.offsetTop,behavior:"smooth"}),h(1)}},"Predict Production")),e.createElement("div",{ref:n},f?"Wheat"==a&&"2050"==u?e.createElement(Bu,{filename:qu,datacol:"WH_2050",suptitle:"Top 10 countries of wheat production in 2050",width:r,height:i}):"Wheat"==a&&"2080"==u?e.createElement(Bu,{filename:Gu,datacol:"WH_2080",suptitle:"Top 10 countries of wheat production in 2080",width:r,height:i}):"Rice"==a&&"2050"==u?e.createElement(Bu,{filename:Xu,datacol:"RI_2050",suptitle:"Top 10 countries of rice production in 2050",width:r,height:i}):"Rice"==a&&"2080"==u?e.createElement(Bu,{filename:Ku,datacol:"RI_2080",suptitle:"Top 10 countries of rice production in 2080",width:r,height:i}):"Maize"==a&&"2050"==u?e.createElement(Bu,{filename:Yu,datacol:"MZ_2050",suptitle:"Top 10 countries of maize production in 2050",width:r,height:i}):"Maize"==a&&"2080"==u?e.createElement(Bu,{filename:Qu,datacol:"MZ_2080",suptitle:"Top 10 countries of maize production in 2080",width:r,height:i}):e.createElement("p",null,"Select crop and year"):e.createElement("p",null))))};n.render(e.createElement(Hh,null),document.getElementById("app"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,